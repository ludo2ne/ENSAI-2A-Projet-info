---
title: "Development Tools"
description: "[Slides](outils-dev-slides.html)"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Development Tools](outils-dev.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: outils-dev-slides.html
from: markdown+emoji
lightbox: true
---

## What's on your school VM?
- `Python 3.10`: Python version chosen by ENSAI
- `Visual Studio Code`: your code editor
- `Git`: to manage your repositories
- `PostgreSQL`: an SQL database
- `DBeaver`: database administration tool to consult or change the database

## Visual Studio Code
- Widely used and known code editor
- Includes a file navigator and a terminal
- Many (many many) extensions
- Customization

### Some VS Code settings
- File: *.vscode/settings.json*
- Formatter (predefined style guidelines for code): Black
- Linter (check for errors or style issues): Flake8

:::{.notes}
- Show the settings.json file (DEMO)
- Gear icon :gear: at workspace or user level
- You probably don't need to modify anything
- You can include this file in your project repository
- Formatter and Linter in sync
Formatter:
- Line too long
- Superfluous spaces
:::

## Code Quality
### What is "quality" for code?
- **Maintenance**: easier to understand, maintain, and change/improve
- **Readability**: reduces errors and makes collaboration easier
- **Performance**: works better, faster, with fewer resources
- **Security**: less vulnerable and susceptible to exploits

### Pylint
A static analysis tool for Python that:

 - Checks code compliance with style standards
 - Detects potential errors
 - Identifies bad practices


```{.bash filename="Commands"}
pylint src
pylint --output-format=colorized --disable=C0114,C0411,C0415,W0718 $(git ls-files '*.py') --fail-under=7.5
```

:::{.notes}
- You can disable rules that bother you
- Do this regularly
:::

### Repository Structure {.smaller}
```{.txt code-line-numbers="false"}
PROJET-INFO-2A
    ├── .vscode
    │   └── settings.json
    ├── data
    │   └── init_db.sql
    ├── doc
    │   └── suivi
    │       └── YYYY.MM.DD-weekN.md
    ├── src
    │   ├── business_object
    │   │   └── a_class.py
    │   ├── dao
    │   │   └── a_class_dao.py
    │   ├── service
    │   │   └── a_class_service.py
    │   ├── tests
    │   │   ├── dao
    │   │   └── service
    │   ├── utils
    │   └── view
    │       └── home_view.py
    ├── .gitignore
    ├── LICENSE
    ├── README.md
    └── requirements.txt
```

### Documentation
```{.python filename="mathematical_operations.py"}
class MathematicalOperations:
    """Mathematical Operations"""
    def divide_five_by(self, number) -> float:
        """Divides the number 5 by a given number.
        Parameters
        ----------
        number : float or int
            The number by which 5 will be divided.
        Returns
        -------
        float or None
            The result of dividing 5 by the given number.
            If the number is equal to 0, the method returns None.
        """
        if number != 0:
            return 5 / number
        else:
            return None
```

:::{.notes}
- Document classes
  - Attributes
- Document methods
  - Brief description
  - Parameters
  - Return
:::

## Logs
### What are logs?
:::{.callout-note}
Logging is the process of recording events, errors, and information in an application.
:::
A log captures information about what happened at a given time:

 - Monitoring
 - Debugging

:::{.notes}
- They allow monitoring the state of a system, unexpected behaviors
- They help identify and resolve issues
:::

### Level 1 - Beginner
- You have an error in your code
- But you don't know exactly where?
- What do you do?

:::{.notes}
You put "prints" everywhere
:::

### Level 2 - Debug Mode
- You add a breakpoint
- You launch in debug mode
- You proceed until the error

:::{.notes}
Demo
:::

### Level 3 - Logs
- [ ] Import the *logging* module and configure it
```{.python}
import logging
logging.basicConfig(
    filename='logs/example.log',
    level=logging.INFO,
    format="%(asctime)s - %(levelname)-8s - %(message)s",
    datefmt="%d/%m/%Y %H:%M:%S")
```
It is possible to externalize the configuration in a `logging_config.yml` file

### Level 3 - Logs
- [ ] Position your logs
```{.python}
logger.debug("This is a debug message")
logger.info("This is an info message")
logger.warning("This is a warning message")
logger.error("This is an error message")
```

### Log Levels
- **DEBUG**: useful for debugging during development
- **INFO**: tracking executed code
- **WARNING**: unusual but non-blocking situation
- **ERROR**: affects program logic but doesn't stop it completely
- **CRITICAL**: requires urgent intervention

### A Good Start
```{.python}
import logging
def my_method(a):
    logging.debug("my_method - START")
    ...
    logging.debug("my_method - END")
```

### Going Further
Use the modules:

- src/utils/log_init.py
- src/utils/log_decorator.py

And add a `@Log` decorator before each method

:::{.notes}
Wrapper: will encapsulate the method
Demo log_decorator
:::
