---
title: "Functional Analysis"
description: "[Slides](analyse-fonctionnelle-slides.html)"
author: "Ludovic Deneuville, R√©mi P√©pin"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Functional Analysis](analyse-fonctionnelle.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: analyse-fonctionnelle-slides.html
from: markdown+emoji
lightbox: true

---

## Outline
1. Functional Analysis
   - Definition
   - UML Diagrams
2. Software Architecture
   - Definition
   - Separation of Responsibilities


::::::{.hide-html-render}

## Functional Analysis
<iframe src="https://giphy.com/embed/l0HlQngl0Eja36dlS" width="960" height="540" frameBorder="0" class="giphy-embed no-print" allowFullScreen></iframe>


::: {.notes}
Questions to ask before starting:
- What are we doing? Who is doing it?
- Client needs
- Required/optional/bonus features
- Prioritize effectively
- Role distribution within the team
:::
::::::

### Project Phases
- Analysis of the needs (specifications)
- Planning
- Design
- Development
- Testing
- Deployment
- Maintenance

::: {.notes}
In traditional projects (V-Cycle), these phases were highly segmented.
:::

---


![](./img/balancoire_agile.png)

::: {.notes}
- Important to discuss
- Rephrase
- Use simple words
- Imagine explaining the project to your grandparents
- Talk about documentation, onboarding, initiatives
:::

### What is Functional Analysis?
- First step in all projects
- Determines the functions and actors of the product to meet client needs
- Diagrams to communicate with the client
- Prioritizes tasks


::: {.notes}
- Helps to take ownership of the subject
- Not a waste of time, as adding unplanned features is extremely complicated
- This phase will be the first part of the interim report
:::

### Questions to Ask
- What types of users will use my application (administrator, manager, client, etc.)?
- What are the features? Common features between profiles?
- How do the application processes work?
- Which diagrams should be used?


::: {.notes}
- Use case diagrams for the first questions
- Activity diagrams for processes
- Why create diagrams? At a glance, you have all the information
  - Comment on your diagrams
:::

### UML Diagrams
- First-year course
- UML 2.5, Pascal Roques, Eyrolles, Memento (ENSAI library)

:::{.callout-note}
It is **agnostic** of the chosen programmation language !

A functional analysis UML diagram is **its own language**.
:::

::: {.notes}
- No time to redo a course
- Resources are available in the library and online
- Ask your tutor what they expect
:::

::::::{.hide-html-render}

### Questions?
<iframe src="https://giphy.com/embed/TgF6xfH8V0mZcUyneP" width="960" height="540" frameBorder="0" class="giphy-embed no-print" allowFullScreen></iframe>
::::::


## Software Architecture
![](https://media.giphy.com/media/yoJC2s3ppnJ7P8m80M/giphy.gif)


### What is Software Architecture?
- The technical counterpart of functional analysis
- Now that we have the who and what, we determine the how
- We design the code of our application
- Macro vision of our application (arrangement of major components)


::: {.notes}
For now, we are not yet writing code.
We will only draft our application with the components it comprises (both logical and physical).
For example, in your case, you will likely have:
- Python code running on your computer
- An external web service providing data
- A PostgreSQL database.
These are already 3 components, but quickly there will be many, and we need to know how to arrange them.
:::


::::::{.hide-html-render}


### Why It's Important: Parallel with Architecture
![](https://media.giphy.com/media/3o6MbsNhExCQT940Le/giphy-downsized.gif)
::::::


### Why It's Important: Parallel with Architecture
- Rooms, electrical installation, water, gas, legislative constraints, adapting to the terrain...
- Need to think about how to arrange all this from the beginning
- If we build as we go, we risk ending up with an inconsistent house (at best)
- **This is not wasted time!**

::: {.notes}
Some people even say we should spend more time analyzing than coding. This is debatable, but it shows how important the analysis phase (how to code the functions) is!
ChatGPT can almost code for us.
:::


### A Major Principle: Separation of Concerns

![](img/couches.png)

::: {.notes}
Macro version in 3 layers.
- Presentation: everything related to display
- Business: the core of your application, its added value
- Data: data storage
Each layer communicates with adjacent layers.
A layer only needs to know how to request information and what is returned.
Not obvious but very important!!!
:::


### Main Layers of an Application
- **_Presentation:_** everything related to display (web page, console, window)
- **_Business:_** the core of your application, its **added value**
- **_Persistence:_** manages data persistence. Database or file system

### For Your Project
- **_Presentation:_** terminal
- **_Business:_** your Python code
- **_Persistence:_** database

::: {.notes}
Example: web page
:::


### Focus on the Business Layer

![](img/couche_metier.png)


::: {.notes}
Within the Business layer, there are several sub-layers.
In the practical work:
- Presentation layer: View (navigate between views)
- DAO, business_object, service
- Controller (client): It receives user requests via the user interface (e.g., an HTTP request in the case of a web application) and calls the appropriate services to execute the requested actions.
:::


### Layers of the Business Layer 1/2
- **_DAO (Data Access Object):_**
  - The part of your code that communicates with the database (Lecture 4/Practical 4)

- **_Service:_**
  - Business code
  - Manipulates business objects to create information or value
  - Requests objects from the DAO layer (Practical 4)
  - Calls external web services (Practical 3)


### Layers of the Business Layer 2/2
- **_Business Objects:_**
  - Transversal layer
  - Represent business concepts that your code will manipulate
  - Objects with mostly attributes and few methods
- **_Controller:_**
  - Retrieves user inputs
  - Returns data to be displayed

::: {.notes}
We break down the objects:
- Attributes -> Business Objects (~DTO)
- Methods -> Services
:::


### Why Separate into Layers?
- Teamwork ü¶∏‚Äç‚ôÄÔ∏èüßô‚Äç‚ôÇÔ∏èüë®‚Äçüíºüë©‚Äçüî¨
- Code readability üìñ
- Debugging üêû
> **Limit the risk of errors when modifying code (avoid spaghetti code) üçù**


::: {.notes}
You should know that code must be readable by others.
And others can be yourself in 2 months. Joke about re-reading code.
If we have well-separated code, different teams can work in parallel.
And separating into layers allows us to quickly find the source of the problem.
:::


### Key Takeaways
- Spending time thinking about the different modules of an application is not a waste of time üïµÔ∏è‚Äç‚ôÄÔ∏è
- Dividing into layers allows parallel work üß™üß´üìö
- But we still need to think about how to code well ü§ñ


::: {.notes}
Possible in the project to distribute the layers.
:::
