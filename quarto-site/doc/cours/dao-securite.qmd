---
title: "DAO et S√©curit√©"
description: "[Slides](dao-securite-slides.html)"
author: "Ludovic Deneuville, R√©mi P√©pin"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [DAO et S√©curit√©](dao-securite.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: dao-securite-slides.html
from: markdown+emoji
lightbox: true
---


## Le plan {.smaller}

- Data Access Object
  - Pourquoi persister des donn√©es ?
  - C'est quoi une DAO
  - Exemple de DAO
- S√©curit√© Informatique
  - D√©finition
  - Failles de s√©curit√©
  - Injection SQL
- Gestion des mots de passe
  - Authentification avec cypher
  - Hashage de mots de passe
  - Exemple

::: {.notes}
Nous allons commencer par parler Stockage des donn√©es
:::

## Data access object (DAO)

:::::: {.hide-html-render}
<iframe src="https://giphy.com/embed/dIBLtolI6axTGIGopo" width="960" height="540" frameBorder="0" class="giphy-embed no-print" allowFullScreen></iframe>
::::::

::: {.notes}
Notre objectif va √™tre de stocker des donn√©es, mais avant :
:::

### Un ordinateur

Quels sont ses composants (en gros) ?

:::{.fragment}
- Un processeur (CPU) : fait UNIQUEMENT du calcul
- La m√©moire RAM : m√©moire volatile rapide
- Disque dur (HDD, SSD) : m√©moire longue dur√©e
- Carte graphique : unit√© de calcul sp√©cialis√©e
:::

::: {.notes}
Bien insister sur CPU, RAM, disque !

Rendent 3 services diff√©rents :

- CPU : processeur
- DD : disque
- RAM : barrettes
:::

### Comment r√©soudre ce probl√®me ?

:::::: {.hide-html-render}
![](https://media2.giphy.com/media/a5viI92PAF89q/giphy.gif?cid=790b76119068737928a0a3e1282ee7ff952e04585d31791e&rid=giphy.gif)
::::::

::: {.fragment}
Quel probl√®me ??
:::

::: {.notes}
R√©ponse : Conserver les donn√©es une fois le programme Python termin√©
:::

### Une question √† se poser

C'est quoi une variable Python ?

:::{.fragment}
- Une r√©f√©rence (le nom de la variable)
- **Un objet associ√© (sa valeur)**
:::

```{.python code-line-numbers="false"}
p = Personnage(prenom="Leia", nom="Organa", age = 35)
```

::: {.notes}
On zappe la notion d'adressage m√©moire.  
Pas besoin de stocker la r√©f√©rence, car elle est dans le code source  
:::

### Une question qui en d√©coule

C'est quoi un objet Python ?

:::{.fragment}
- Des attributs (qui peuvent √™tre eux-m√™mes des objets)
- Des m√©thodes
:::

```{.python filename="personnage.py"}
class Personnage:
    def __init__(self, prenom, nom, age):
        self.prenom = prenom
        self.nom = nom
        self.age = age
        self.vaisseaux = []

    def anniversaire(self):
        self.age += 1
```

::: {.notes}
Pareil, les m√©thodes c'est du code, nous on veut juste les attributs
:::

### Pour r√©sumer

- Nous voulons sauvegarder des couples clef-valeur  
- Avec des valeurs qui peuvent √™tre elles-m√™mes constitu√©es de couples clef-valeur

::: {.callout}
**Nous voulons sauvegarder un arbre üå≥**
:::

::: {.notes}
Besoin d'un dessin avec Leia et Vaisseaux

Parall√®le avec les dict Python / JSON

Arbre car les attributs d'objets sont parfois eux-m√™mes des objets
:::

### Comment faire cela ?

- √âcrire nos donn√©es sur le disque dur dans un fichier 
  - csv, parquet, json, xml
- Utiliser une base de donn√©es
  - SQL tables + relations, NoSQL

::: {.notes}
Question : Comment fait une BDD ?

- Elle g√®re dans des fichiers  
- On peut faire le parall√®le avec les couches  
- La BDD rend un service, j'ignore comment elle fait  
- Je sais ce qu'elle attend en entr√©e et ce qu'elle me donne en sortie !  
:::

### Lien persistance / application

- Python : Variables volatiles en RAM
- Syst√®me de persistance : Donn√©es stock√©es sur disque
- Data Access Objects (DAO) en guise de lien

::: {.notes}
Petite pause r√©cap pour essayer de r√©cup√©rer tout le monde avant la DAO.

Dans la vraie vie, on ne repart pas de 0 quand on relance une appli.

Si vous cr√©ez un Personnage, la fois suivante il sera toujours l√†
:::

### C'est quoi une DAO ?

:::::: {.hide-html-render}
![](https://media2.giphy.com/media/a5viI92PAF89q/giphy.gif?cid=790b76119068737928a0a3e1282ee7ff952e04585d31791e&rid=giphy.gif)
::::::

::: {.notes}
On vient de dire que l'on va stocker dans une BDD.

Comment y acc√©der ?
:::

### C'est quoi une DAO ?

- Classe technique
- Une classe DAO par objet m√©tier
- Expose des m√©thodes pour communiquer avec la couche de persistance

::: {.notes}
C'est une API

Rend un service √† des clients

Comment elle fait ? -> osef

Comme vous au restaurant. Vous voulez manger, comment c'est fait vous importe peu tant que le service est rendu (avec un niveau d'exigence)

Des ORM tels SQLAlchemy existent pour faire le lien Objet Python - Table BDD -> pas le sujet ici
:::

### Quelles m√©thodes exposer ?

:::{.fragment}
- **C**reate
- **R**ead
- **U**pdate
- **D**elete
:::

::: {.notes}
Faire participer  

Essayer de montrer que ces 4 l√† suffisent.

Apr√®s on peut avoir des raffinements en faisant des choses en masse, ou filtrer, etc.


Quid de la copie ?

Une copie c'est une lecture + cr√©ation donc on sait faire


Exemple dessin : classe Personne - table personne - dao personneDAO
:::

### L'int√©r√™t d'une classe √† part

S√©paration des responsabilit√©s

- Classe "jetable" üöÆ
- Modifiable sans risque üî®
- Parall√©lisation du travail ü¶∏‚Äç‚ôÄÔ∏èüßô‚Äç‚ôÇÔ∏èüë®‚Äçüíºüë©‚Äçüî¨

::: {.notes}
On remet une couche, √ßa fait pas de mal  
Dans la vraie vie, si changement de syst√®me, plus facile de migrer  

En projet, la couche DAO peut √™tre tr√®s facile √† faire
:::

### Petit recap

![](img/couche_metier.png)

::: {.notes}
Petit exemple pour illustrer.

Exemple : lister toutes les personnes fans de Pokemon
:::

## Comment se connecter √† une DB en python ?

Utilisation d'une biblioth√®que d√©di√©e

- **PostgreSQL** : [psycopg2](https://www.psycopg.org/docs/){target="_blank"}
- MySQL : mysql-connector-python
- Oracle : cx_Oracle
- MongoDB : pymongo

::: {.notes}
Vous lirez en entier la doc : psycopg2. 

Il y aura des questions √† l'exam !
:::

### psycopg2

- `pip install psycopg2-binary`

- `connection` : permet d'√©tablir la connexion avec la base  
  Pas super int√©ressant √† faire, le code est donn√©


### psycopg2 - connection

```{.python filename="db_connection.py"}
import os
import dotenv
import psycopg2

from psycopg2.extras import RealDictCursor
from utils.singleton import Singleton

class DBConnection(metaclass=Singleton):
    """
    Classe de connexion √† la base de donn√©es
    Elle permet de n'ouvrir qu'une seule et unique connexion
    """

    def __init__(self):
        """Ouverture de la connexion"""
        dotenv.load_dotenv()

        self.__connection = psycopg2.connect(
            host=os.environ["POSTGRES_HOST"],
            port=os.environ["POSTGRES_PORT"],
            database=os.environ["POSTGRES_DATABASE"],
            user=os.environ["POSTGRES_USER"],
            password=os.environ["POSTGRES_PASSWORD"],
            options=f"-c search_path={os.environ['POSTGRES_SCHEMA']}",
            cursor_factory=RealDictCursor,
        )

    @property
    def connection(self):
        return self.__connection
```

::: {.notes}
Singleton
::: 

### psycopg2 - cursor

- `cursor` : encapsule la requ√™te
    ```{.python}
    from dao.db_connection import DBConnection
    
    with DBConnection().connection as connection:
        with connection.cursor() as cursor:
    ```

- `cursor.execute("<une requ√™te SQL>")` : permet de faire une requ√™te
- `cursor.fetchone()/fetchall()/fetchmany()` : R√©cup√©ration des r√©sultats



### Forme de base

```{.python}
def dao_function(self, arg1, arg2, ...):
    # R√©cup√©ration de la connexion √† la base
    with DBConnection().connection as connection:
    # Cr√©ation d'un curseur pour faire une requ√™te
        with connection.cursor() as cursor:
            # On envoie au serveur la requ√™te SQL
            cursor.execute(
                "<une_requete_sql_√†_trous>",
                remplisage_des_trous)

            # On r√©cup√®re le r√©sultat de la requ√™te
            res = cursor.fetchone()  # ou fetchall()/fetchmany()

    # Si la requ√™te renvoie quelque chose
    if res:
      something = "<res mis en forme>"
        
    return something   
```

::: {.notes}
Pourquoi on ne retourne pas directement res ?

res : list[dict]

On pr√©f√®re retourner un Objet ou une liste[Objet]
:::

### Un petit exemple : LivreDao

![](img/class_diagram_DAO.png)

::: {.notes}
ISBN : International Standard Book Number
:::


### Cr√©er un livre

```{.python}
def create(self, livre) -> Livre:
    """Pour cr√©er un livre en base"""
    with DBConnection().connection as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO livre (isbm, titre, auteur)         "
                "     VALUES (%(isbm)s, %(titre)s, %(auteur)s)   "
                "  RETURNING id_livre;                           ",
                {"isbm": livre.isbm, 
                 "titre": livre.titre, 
                 "auteur": livre.auteur},
            )
            livre.id = cursor.fetchone()["id_livre"]
    return livre
```

::: {.notes}
Possible aussi de retourner une bool√©en :

- true si cr√©ation r√©ussie
- false sinon
:::

### Lister les livres

```{.python}
def find_all(self) -> list[Livre]:
    """Pour r√©cup√©rer tous les livres en base"""
    with DBConnection().connection as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT id_livre,                  "
                "       isbm,                      "
                "       titre,                     "
                "       auteur                     "
                "  FROM livre ;                    "
            )
            livre_bdd = cursor.fetchall()
            
    liste_livres = []

    if livre_bdd:
        for livre in livre_bdd:
            liste_livres.append(
                Livre(
                    id=livre["id_livre"],
                    isbm=livre["isbm"],
                    titre=livre["titre"],
                    auteur=livre["auteur"],
                )
            )
            
    return liste_livres
```

:::{.notes}
- livre_bdd = [{id_livre=1, isbm=123, "Le Schtroumpf hackeur", "Peyo"}, {...}, ...]
- livre = {id_livre=1, isbm=123, "Le Schtroumpf hackeur", "Peyo"}
- liste_livres = [Livre(1, 123, "Le Schtroumpf hackeur", "Peyo"), Livre(...), ...]
:::

### Trouver un livre

```{.python}
def find_by_isbm(self, isbm) -> Livre:
    """Pour r√©cup√©rer un livre depuis son isbm"""
    with DBConnection().connection as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT *                          "
                "  FROM livre                      "
                " WHERE isbm = %(isbm)s            ",
                {"isbm": livre.isbm}
            livre_bdd = cursor.fetchone()
            
    livre = None
    if livre_bdd:
        livre = Livre(
            id=livre_bdd["id_livre"],
            isbm=livre_bdd["isbm"],
            titre=livre_bdd["titre"],
            auteur=livre_bdd["auteur"],
        )
    return livre
```

:::{.notes}
livre_bdd : dict
livre : Livre

Principe √† retenir si vous voulez comprendre : nous allons toujours dans les DAO transformer les dict en objets
:::

### Conclusion

- Python travaille en RAM (volatile)
- Obligation d'avoir un m√©canisme de persistance des donn√©es
- DAO : centralise les m√©thodes pour lire/√©crire nos donn√©es
- La couche m√©tier appelle la DAO sans se pr√©occuper du syst√®me de persistance
- Permet un travail d'√©quipe efficace ü¶∏‚Äç‚ôÄÔ∏èüßô‚Äç‚ôÇÔ∏èüë®‚Äçüíºüë©‚Äçüî¨


## S√©curit√© informatique

### Principes CAID

::: {.hide-html-render}
![](https://i.kym-cdn.com/entries/icons/original/000/035/843/cover3.jpg)
:::

### 4 piliers de la s√©curit√© info

- **C**onfidentialit√©
- **A**uthentification
- **I**nt√©grit√©
- **D**isponibilit√©

::: {.notes}
On utilise aussi parfois DICP ou DICPA

Disponibilit√©, Int√©grit√©, Confidentialit√©, Preuve
:::

### Deux bonus

- Tra√ßabilit√©
- Non-r√©pudiation

### Confidentialit√©

::: {.callout}
Seules les personnes autoris√©es doivent avoir acc√®s aux informations qui leur sont destin√©es (notions de droits ou permissions). 

Tout acc√®s ind√©sirable doit √™tre emp√™ch√©.
:::

**M√©canismes associ√©s :** 

- gestion des droits (annuaires, r√¥les ...)
- cryptographie

::: {.notes}
On parle plut√¥t de chiffrement
:::

### Authentification

::: {.callout}
Les utilisateurs doivent prouver leur identit√© en r√©pondant √† un "challenge".
:::

**M√©canismes associ√©s :** 

- authentification faible (identifiant, mot de passe)
- authentification forte (donn√©es biom√©triques, multi-facteurs)

### Int√©grit√©

::: {.callout}
Les donn√©es doivent √™tre celles que l'on attend, et ne doivent pas √™tre alt√©r√©es de fa√ßons fortuites, illicites ou malveillantes.
:::

**M√©canismes associ√©s :** 

- signature √©lectronique
- checksum

:::{.notes}
**Signature √©lectronique :** garantir l'int√©grit√© d'un document, c'est-√†-dire s'assurer que le document n'a pas √©t√© alt√©r√© entre sa signature et sa consultation; authentifier son auteur, c'est-√†-dire s'assurer de l'identit√© de la personne signataire.

**Checksum :** bit de parit√©.
:::


### Disponibilit√©

::: {.callout}
L'acc√®s aux ressources du syst√®me d'information doit √™tre permanent et sans faille durant les plages d'utilisation pr√©vues.
:::

**M√©canismes associ√©s :** 

- redondance des serveurs
- virtualisation
- conteneurisation

:::{.notes}
Backup

Parler de la mise en production avant.
:::

### Tra√ßabilit√©

::: {.callout}
Garantit que les acc√®s et tentatives d'acc√®s aux √©l√©ments consid√©r√©s sont trac√©s et que ces traces sont conserv√©es et exploitables.
:::

**M√©canisme associ√© :** 

- journalisation

:::{.notes}
Logs (mieux que les prints)

Projet 2024-2025
:::

### La non-r√©pudiation

::: {.callout}
Aucun utilisateur ne doit pouvoir contester les op√©rations qu'il a r√©alis√©es dans le cadre de ses actions autoris√©es et aucun tiers ne doit pouvoir s'attribuer les actions d'un autre utilisateur.
:::

**M√©canismes associ√©s :** 

- tra√ßabilit√©
- authentification
- int√©grit√©

:::{.notes}
C'est pas moi

Mais c'est votre nom !

Ne laissez pas vos sessions ouvertes aux pauses (CTRL + ALT + F12)
:::


## Les failles informatiques

### Trop de failles !!!

- Failles physiques "bas niveau"
- Failles physiques "haut niveau"
- **Injection SQL**
- Injection de donn√©es
- **Faille XSS**
- Ex√©cution de code
- ...

:::{.notes}
- Failles physiques "bas niveau" : coupure √©lectrique, inondation salle serveur
- Failles physiques "haut niveau" : acc√®s physique √† une machine
:::


### De quoi faut-il se m√©fier ?

::: {.hide-html-render}
![](https://66.media.tumblr.com/5fca28d9ff6a46e62aaa6ec391077f26/tumblr_mseaykBEjV1sg0a6co1_500.gif)
:::

:::{.fragment}
**De vos utilisateurs**
:::

## Exemple de failles, les injections SQL


![](https://imgs.xkcd.com/comics/exploits_of_a_mom.png)

: Source : <https://xkcd.com/>{target="_blank"}


### Injection SQL

Consiste √† saisir du SQL pour ex√©cuter une autre requ√™te que celle pr√©vue.

Probl√®mes :

- Confidentialit√©
- Authentification
- Int√©grit√©
- Disponibilit√©

### Exemple : s'authentifier sans mot de passe

Requ√™te d'authentification

```{.sql}
SELECT * 
  FROM user 
 WHERE name = 'input_name' 
   AND mdp = 'input_mdp';
```

::::::{.fragment}
::: {.callout-note title="Vous saisissez"}
- Gennysson
- awsome_password
:::
::::::

:::{.fragment}
```{.sql}
SELECT * 
  FROM user 
 WHERE name = 'Gennysson' 
   AND mdp = 'awsome_password';
```
:::

:::{.notes}
Si dans votre cursor.execute vous avez ce code
:::

### Exemple : s'authentifier sans mot de passe

```{.sql}
SELECT * 
  FROM user 
 WHERE name = 'input_name' 
   AND mdp = 'input_mdp';
```

::::::{.fragment}
::: {.callout-warning title="Vous saisissez"}
- Gennysson
- `' OR 1=1; --`
:::
::::::

:::{.fragment}
```{.sql}
SELECT * 
  FROM user 
 WHERE name = 'Gennysson' 
   AND mdp = '' OR 1=1; --';
```
:::

### Exemple : supprimer une table

```{.sql}
SELECT * 
  FROM user 
 WHERE name = 'input_name' 
   AND mdp = 'input_mdp';
```

::::::{.fragment}
::: {.callout-warning title="Vous saisissez"}
- Gennysson
- `'; DROP TABLE user CASCADE; --`
:::
::::::

:::{.fragment}
```{.sql}
SELECT * 
  FROM user 
 WHERE name='Gennysson' 
   AND mdp=''; DROP TABLE user CASCADE; --;
```
:::

---

:::{.hide-html-render}
![](https://media.giphy.com/media/1Q6K09gcxYWcUxxraT/source.gif){width=50%}
:::

### Comment se prot√©ger ?

- √âchapper les caract√®res sp√©ciaux
- Utiliser une requ√™te pr√©par√©e

**La biblioth√®que que vous utiliserez ne fait que de l'√©chappement de caract√®res sp√©ciaux üò®**

:::{.notes}
La seconde solution est mieux que la premi√®re mais psycopg2 ne semble pas la proposer simplement.  
Donc il faut la conna√Ætre, mais savoir que c'est la premi√®re solution qui va √™tre faite.

√âchapper les caract√®res sp√©ciaux : par exemple, ¬´ ' ¬ª sera remplac√© par ¬´ \' ¬ª  
L'apostrophe ne sera donc pas interpr√©t√©e comme une fin de cha√Æne par le SGBD

Instruction "prepare" :  
1. Envoie la requ√™te √† trous √† la BDD  
2. Envoie pour remplir les trous
:::

### Cross Site Scripting

Consiste √† injecter du code provoquant des actions sur le navigateur. Cela peut permettre :

- Des redirections de page (phishing)
- Du vol d'information
- Des actions sur le site
- Rendre le site difficile √† utiliser

### Comment se prot√©ger ?

- Ne jamais ins√©rer des donn√©es brutes
- √âchapper les caract√®res sp√©ciaux
- V√©rifier vos donn√©es


::: {.callout-tip}
Les biblioth√®ques web le font souvent pour vous !
:::



### To sum up : injection

- Ne jamais faire confiance aux utilisateurs, v√©rifier / nettoyer leurs inputs
- Ne jamais faire confiance aux utilisateurs, v√©rifier / nettoyer leurs inputs
- Ne jamais faire confiance aux utilisateurs, v√©rifier / nettoyer leurs inputs


## Gestion des mots de passe

### Votre application doit-elle stocker des mots de passe en clair?

::::::{.fragment}
::: {.hide-html-render}
![](https://media.giphy.com/media/d10dMmzqCYqQ0/source.gif){width=100%}
:::
::::::

### Votre application doit-elle conna√Ætre le mot de passe d'un utilisateur pour l'authentifier ?

::::::{.fragment}
::: {.hide-html-render}
![](https://media.giphy.com/media/Y8hzdgPnZ6Hwk/source.gif){width=50%}
:::
::::::

### Comment on fait ?

::: {.hide-html-render}
![](https://media.giphy.com/media/kQOxxwjjuTB7O/source.gif){width=100%}
:::

### Hasher le mot de passe

- Hashage du mot de passe => cypher
- Stockage du cypher en base
- Quand besoin de comparer on hashe le mdp saisi
- Et on compare les cyphers

**Authentification sans persister les mots de passe !!!!**

:::{.notes}
C'est tellement simple et s√©curis√© !  
Mais pas tous les sites le font ...  
Un site qui vous renvoie votre mdp le garde en m√©moire (ou du moins le moyen de le d√©chiffrer)  

Dans la vraie vie, on rajoute un "sel" au mdp avant de le hacher.  
C'est une valeur al√©atoire calcul√©e pour chaque utilisateur que l'on va rajouter au mdp avant de le hacher  
Cela rend une attaque en force brute plus co√ªteuse.
:::

---

::: {.hide-html-render}
![](https://media.giphy.com/media/Pk4ldVR0sCHgA/source.gif)
:::

### Ajouter du sel pour plus de s√©curit√©

::: {.hide-html-render}
![](https://media.giphy.com/media/3o7P4F86TAI9Kz7XYk/giphy.gif)
:::

### Une base sans sel ajout√©

- Votre base mail/mdp fuite mais les mdp sont hach√©s
- Les attaquants doivent _bruteforce_ les mdp
- Ils commencent par les mdp les plus courants, et les hachent avec les algo de hash courants
- Puis ils comparent avec la base
- Forte chance d'avoir plusieurs correspondances

:::{.notes}
bruteforce : tester toutes les combinaisons possibles
:::


### Le sel c'est bon pour la s√©curit√©

Au lieu de hacher et stocker le mdp vous stockez et hachez le mdp 
ET un √©l√©ment li√© √† l'utilisateur de mani√®re d√©terministe (le sel).

Maintenant m√™me si 2 personnes ont le m√™me mdp, elles auront des hash
diff√©rents.

### Le sel c'est bon pour la s√©curit√©

- Votre base mail/mdp fuite mais les mdp sont hach√©s et sal√©s
- Les attaquants doivent *bruteforce* les mdp
- Ils commencent par les mdp les plus courants, et les hachent avec les algo de hash courants
- Puis ils comparent avec la base.
- Il y a pas de match car vos mdp sont sal√©s
- Et trouver un mdp ne permet de trouver les autres

---

![](https://i.imgflip.com/3acxa9.jpg)

### Exemple de hashage de mdp

```{.python}
import hashlib
 
def hash_password(password, idep):
    salt = idep
    return hashlib.sha256(salt.encode() + password.encode()).hexdigest()
    
print(hash_password("awsome_password", "Gennysson"))
```

### To sum up the security part

- Toujours v√©rifier les inputs
- Ne jamais faire confiance aux utilisateurs
- Plusieurs niveaux de s√©curit√©
- Pas besoin de stocker les mots de passe en clair
