---
title: "Les Webservices"
description: "[Slides](webservices-slides.html)"
author: "Ludovic Deneuville, R√©mi P√©pin"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Les Webservices](webservices.html)"
    slide-number: c/t                    ## collapsed/total
    slide-level: 3
    controls: true
    output-file: webservices-slides.html
from: markdown+emoji
lightbox: true
---

:construction:

## Le plan

- API
- Webservice
  - D√©finition
  - Exemples
  - Architecture microservices
- Hyper Text Transfer Protocol
  - D√©finition
  - Exemples

## API

### D√©finition

::: {.callout-note}
Interface entre deux ordinateurs ou deux programmes. 

C'est une application qui offre des services √† d'autres applications. 

L'application impl√©mente une API ou expose une API.
:::

## D√©finition

Termes assez vaste qui recouvre :

- Les biblioth√®ques / frameworks :
  [Pandas](https://pandas.pydata.org/docs/reference/index.html){target="_blank"}
  [Numpy](https://numpy.org/){target="_blank"}
- Des webservices
- Un moyen d'acc√©der aux ressources d'un hardware
  - [Nvidia API](https://developer.nvidia.com/nvapi){target="_blank"}

### API in a nutshell

- Expose des m√©thodes/fonctions aux utilisateurs
- R√©utilisation
- Contractualisation des inputs/outputs
- Bo√Æte noire

::: {.notes}
Pour reprendre l'exemple du dessus, le module d'authentification peut √™tre utilis√© aussi bien par les utilisateurs pour la version site marchand, que par les admins pour la partie administration.
:::

---

::: {.callout-note}
Une API rend un service aux utilisateurs sans qu'ils aient √† savoir comment elle fait. 

Ils connaissent juste ce qu'elle attend en entr√©e et ce qu'elle produit !
:::

## Les webservices

Une API particuli√®re

::: {.white-box}
![](https://www.testarchitect.com/images/gallery/cross/web-service.png)
:::

### Question

√Ä votre avis, X permet-il √† tout le monde d'acc√©der √† leurs bases de donn√©es directement ?

::: {.notes}
Bien s√ªr non !
:::

### Wait what ?!

- Pourtant de nombreux sites utilisent les donn√©es X !
- Comment font-ils ?


:::::: {.hide-html-render}
### Des id√©es ?

<iframe src="https://giphy.com/embed/8acGIeFnqLA7S" width="600" height="600" frameBorder="0" class="no-print giphy-embed" allowFullScreen></iframe>

::::::

### Solution : web scraper

Consiste √† √©crire une application qui se connecte √† un site, et qui va lire la page pour en tirer des informations

**Probl√®mes**

- Cr√©e du trafic artificiel (c√¥t√© site)
- Chaque changement dans le site casse notre application
- G√©rer le JavaScript üò±üò±üò±üò±

::: {.notes}
Dire que derri√®re un site il y a du HTML.  
Montrer un exemple ?
:::

### Autre solution : cr√©er un point d'entr√©e pour les machines

- Accessible depuis le web
- Fait pour les machines
- **Contr√¥le ce que l'on rend accessible**

::: {.callout}
Interface entre l'ext√©rieur et notre syst√®me
:::

### D√©mo

::: {.notes}
Exemple : [https://api.gouv.fr/documentation/api_data_gouv](https://api.gouv.fr/documentation/api_data_gouv)  
[https://anapioficeandfire.com/](https://anapioficeandfire.com/)
:::


### Les webservices

- Application web
- **Accessible via requ√™te HTTP/HTTPS**
- Sans interface graphique
- **Renvoie des donn√©es compr√©hensibles par les machines (JSON, XML...)**

::: {.notes}
Webservice : une API particuli√®re que nous allons utiliser
:::

### Plusieurs types

- REST : le plus courant, le type que vous allez manipuler, JSON
- SOAP : plus complet donc plus lourd que le REST, XML
- RPC : Remote Procedure Call

::: {.notes}
REST est un style architectural qui d√©finit un ensemble de contraintes et de principes
:::

---

Un web service est un module applicatif, accessible sur le protocole HTTP via une URL qui va r√©pondre √† une demande

Comme un site web, mais pour les machines

### Exemple

[Le trafic √† Rennes en temps r√©el](https://data.rennesmetropole.fr/api/records/1.0/search/?dataset=etat-du-trafic-en-temps-reel)

::: {.notes}
https://data.rennesmetropole.fr/explore/dataset/export-api-parking-citedia/api/
:::

### Architecture microservices

Site de e-commerce

- WS authentification
- WS gestion de compte
- WS paiement
- WS de recherche
- WS analyse des donn√©es
- WS gestion panier

### Architecture microservices

Chaque module est un webservice ind√©pendant, et c'est l'application c√¥t√© client qui va les contacter

::: {.callout-note}
Utile pour les grandes entreprises avec beaucoup de dev et de projets en parall√®le
:::

::: {.notes}
Un dessin pourrait peut-√™tre aider
:::

:::::: {.hide-html-render}
### Comment √ßa fonctionne ?

<iframe src="https://giphy.com/embed/a5viI92PAF89q"  width="900" height="500" frameBorder="0" class="no-print giphy-embed" allowFullScreen></iframe>

::::::

### La notion de client-serveur

- **LE MOD√àLE QUI R√âGIT LE WEB**
- Des machines qui attendent des demandes : **serveurs**
- Des machines qui font des demandes : **clients**
- Le client initie le contact, le serveur r√©pond


### Comparaison avec vie r√©elle

- Vous marchez dans la rue et vous avez envie d'un caf√© frapp√© Double shot espresso and Cream
- Vous rentrez dans un Starbucks et **demandez** votre caf√©
- Le **serveur** traite votre demande et vous donne votre caf√©
- Vous partez avec votre caf√©


## Hyper Text Transfer Protocol (HTTP)

### HTTP

Protocole de communication client-serveur d√©velopp√© pour le World Wide Web

N'est pas le seul : FTP, SMTP, IRC ...

Il existe des protocoles non client-serveur : BitTorrent

::: {.notes}
Avez vous une id√©e de requ√™te HTTP ?
::: 

### Avez-vous une id√©e de requ√™te HTTP ?

Demander une page web via votre navigateur cr√©e une requ√™te HTTP

::: {.notes}
Vous faites tout le temps des requ√™tes HTTP sans le savoir.
:::

### Les √©l√©ments d'une requ√™te

- La localisation de la ressource : URL (nom de domaine + chemin)
- La m√©thode employ√©e (GET, POST, UPDATE, DELETE ...)
- Les param√®tres de la requ√™te
- Le corps de la requ√™te

::: {.notes}
Les param√®tres sont derri√®re le ?  
Le corps vous ne le voyez pas, mais il est possible de le voir.
:::

### Les √©l√©ments d'une requ√™te

`GET https://pokeapi.co/api/v2/pokemon?limit=10&offset=200`

- m√©thode
- protocole
- adresse du ws
- endpoint
- param√®tres

::: {.notes}
Pour aller plus loin : IP, DNS
:::

### Les m√©thodes HTTP

- POST
- GET
- UPDATE
- DELETE

::: {.callout-important}
C'est le CRUD !
:::

::: {.notes}
Comme en SQL
:::

### Exemple

http://web-services.domensai.ecole/attack

- GET : r√©cup√©rer toutes les attaques
- POST : ajouter une attaque
- UPDATE : modifier une attaque en ajoutant son id en param√®tre
- DELETE : supprimer une attaque en ajoutant son id en param√®tre

### Pour r√©sumer

- Le HTTP est le protocole du web
- M√©thode
- URL
- Param√®tres dans URL ou corps

## Contacter/r√©aliser un webservice

### Contacter un webservice

Un outil : un client HTTP

- Un navigateur web (assez limit√©)
- Insomnia/Postman
- Vscode avec des plugins
- Python avec le plugin `requests`

### Contacter un webservice en python

```{.python}
import requests

# Construction de la requ√™te
url = "https://data.rennesmetropole.fr/api/records/1.0/search/"
parametres = {"dataset": "etat-du-trafic-en-temps-reel", "rows": 2}

# Lancement de la requ√™te
res = requests.get(url=url, params=parametres)

# Affichage du r√©sultat
print(res.json())
print("\nNombre de lignes : ", res.json()["parameters"]["rows"])
```

### Contacter un webservice en python

```{.python}
import json
import requests

url = "https://anapioficeandfire.com/api/"
end_point = "characters"
parametres = {"gender": "Female", "isAlive": True, "culture": "Braavosi"}
response = requests.get(url=url + end_point, params=parametres)

# Teste si le serveur a r√©pondu
if response.status_code != 200:
    raise Exception(f"Cannot reach (HTTP {response.status_code}): {response.text}")
print(json.dumps(response.json()))
```

### Contacter un webservice en python

- Tr√®s facile
- `res.json()` retourne un dictionnaire
- `get()` peut devenir `post()`, `put()`, etc.

### R√©aliser un webservice en python

- Peut sembler complexe üòµ
- Mais il existe des outils pour nous aider üòé
- Pas besoin d'√™tre un expert de l'informatique ! üê±‚Äçüíª


### 3 frameworks

- [FlaskRESTful](https://fastapi.tiangolo.com/){target="_blank"} : mature, l√©ger, flexible
- [Django](https://www.djangoproject.com/){target="_blank"} : mature, robuste, complet
- [FastApi](https://fastapi.tiangolo.com/){target="_blank"} : jeune, l√©ger, moderne

::: {.notes}
FastApi pour le TP2
:::

### FastApi : les bases

```{.python}
from fastapi import FastAPI

app = FastAPI()
@app.get("/")
async def root():
    return {"message": "Hello World"}


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

### FastApi

- Il est facile de coder vos endpoints
- La [documentation](https://fastapi.tiangolo.com/tutorial/first-steps/){target="_blank"} est extr√™mement bien faite
- Vous vous concentrez sur l'essentiel
