---
title: "Git et Création d'une IHM"
description: "TP 4"
author: "Rémi Pépin, Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
---

::: callout-note
Ancien TP4 dont une partie du contenu a été déplacé au TP1.
:::


## Bilan des trois premiers TP 

Si l'on reprend le modèle en couches présenté en cours, voici ce que l'on a fait depuis le début des TP :

![](img/TP4_couches.jpg)

### La couche service

Actuellement notre couche service est bien maigre. En effet notre application n'a aucune logique métier. On a bien des objets métiers que l'on persiste mais aucune réelle application derrière. La raison à ce manque provient du fait que cette couche est la partie la plus longue à développer car elle contient la logique métier de l'application. 

Et le but de ces TP n'est pas de vous montrer comment faire une petit application type jeu Pokémon en console. Ils ont pour vocations à vous montrer une architecture de base en couche et vous présenter comment la réaliser. Dans votre projet, il est possible que ce soit la couche service qui vous demande le plus de travail.

---

### La couche contrôleur

La notion de contrôleur apparait avec le design pattern *MVC* ([Model-View-Controler](https://fr.wikipedia.org/wiki/Mod%C3%A8le-vue-contr%C3%B4leur)). Mais c'est un patron de conception beaucoup trop complexe pour faire un simple affichage en console. 

À la place vous allez utiliser le patron *Model-View-Presenter* qui est plus simple car il reprend le principe de couches qui se succèdent.

Il n'y aura donc pas de couche **Controleur** mais une couche **View** qui fera office d'IHM et appelera directement les services nécessaires.

---

### La couche view

Le fonctionnement est le suivant lorsque vous lancez l'application : 

* vous arrivez sur une vue d'accueil qui propose différents choix
* selon le choix, zéro, un ou plusieurs services sont appelés
* puis vous arrivez vers une nouvelle vue (ou éventuellement resterez sur la même)

Exemple : 

* Vous êtes sur la **Vue d'accueil** et vous sélectionner `se connecter`
* Vous basculez vers la **Vue de connexion**
    * dans cette vue, on vous demande de saisir user et password
    * une fois la saisie terminée, le **Service des utilisateur** va être appelé
    * ce service a une méthode `verification_connexion()`
        * cette méthode va appeler la **DAO Utilisateur** pour vérifier que l'utilisateur et son mot de passe existent bien en base de données
* si la vérification est ok, vous basculez vers la **Vue Menu utilisateur** où va par exemple s'afficher la liste des actions autorisées
* ...

---

##  Une session pour les gouverner toutes

Là vous pouvez vous dire : 

* ok on va se balader de vues en vues, ça ça va
* mais imaginons l'exemple suivant :
    * on passe par la **Vue de connexion** et on se connecte avec l'utilisateur Michel
    * on arrive sur la **Vue Menu utilisateur** et on se balade dans les différentes vues
    * un peu plus tard, on arrive sur la **Vue d'ajout de Pokemon**, on sélectionne celui qui nous plait et on valide
    * cela va aboutir à l'appel d'une méthode **DAO** du type `ajouter_pokemon(utilisateur, pokemon)`
    * Cette méthode a 2 arguments
        * pokemon : ok facile à récupérer, on vient juste avant de le sélectionner
        * utilisateur : là c'est moins facile car la dernière fois qu'on avait l'objet utilisateur à portée c'était dans la Vue de connexion
* Est-ce que une fois connecté, on doit passer l'utilisateur en paramètre de toutes les méthodes que l'on va appeler ?
    * Heureusement NON, ce serait trop compliqué
    * :bulb: c'est ici que l'objet **Session** va nous être utile

Dans notre **Session**, nous allons pouvoir stocker des objets utiles, par exemple l'utilisateur actif. 

Ainsi, une fois connecté, on stocke l'utilisateur en session et on peut se servir de cet objet à tout moment !

Voici les liens entre notre `Session` et nos `Views` :

```{mermaid}
classDiagram

class Session{
	<<singleton>>
	user_name : str
	selected_pokemon : AbstractPokemon
}

class AbstractView{
	<<abstract>>
	+display_info()* None
	+make_choice()* AbstractView
}

class StartView{
	+display_info() None
	+make_choice() AbstractView
}

class ListPokemonView{
	+display_info() None
	+make_choice() AbstractView
}

class ListAttackView{
	+display_info() None
	+make_choice() AbstractView
}

Session <..AbstractView: "use"

AbstractView <|-- StartView
AbstractView <|-- ListPokemonView
AbstractView <|-- ListAttackView
```

Toute nos `Views` vont hériter de la classe `AbstractView`. Cette classe va contenir deux méthodes abstraites :

- `display_info()` : qui va juste déterminer l'affichage en console
- `make_choice()` : qui va gérer les choix de l'utilisateur et l'envoyer vers une autre page.

En plus de cela nous allons gérer tous les attributs utilisés par les `View` dans un objet `Session` qui sera un singleton ce qui nous assurera que chaque accès à cet objet retourne la même instance et donc les mêmes valeurs stockées.

Cette architecture vous permet de séparer vos différents menu en fichiers séparés et d'avoir un fonctionnement simple car chaque menu retourne un autre menu simplement.

:warning: La création de vos menus peut générer des problèmes de dépendances circulaires. En effet si la page A envoie sur la page B et la page B envoie sur la page A, en fonction de la façon dont vous gérez vos imports vous allez voir un problème de dépendances circulaires. Quand le problème se présentera voici 2 solutions possibles : 

* remplacer `from X import Y` en `import Y as name`
* déplacer vos imports dans la fonction qui en a besoin

##  InquirerPy 

Pour nous faciliter la gestion de la console nous allons utiliser la bibliothèque python [InquirerPy](https://inquirerpy.readthedocs.io/en/latest/). Elle permet de créer facilement des applications interactives en console. Le projet est bien documenté avec plusieurs [exemples](https://github.com/kazhala/InquirerPy/tree/master/examples) de code, faciles à transposer.

* [ ] Lancez le `main.py` et testez un peu l'application
* [ ] Regardez les fichiers du package **view** pour essayer de comprendre comment fonctionnent les vues. Le principe est toujours le même lorsque l'on arrive sur une nouvelle vue : 
    * on répond aux questions demandées
    * un traitement est éventuellement fait (appel à des services)
    * on bascule vers une autre vue


### Mes premières `View`

**✍Hand on 3**

Répartissez vous le travail entre membre du groupe pour implémenter les `Views` suivantes :

* Affichage Pokémon:
  * [ ] `PokemonListView` : qui permet de visualiser 30 Pokémons sommairement. Il est possible de sélectionner un pokémon pour aller sur `PokemonDetailsView`.  Vous pouvez permettre un retour arrière sur la `StartView` si vous le souhaitez.
  * [ ] `PokemonDetailsView` : qui affiche les détails du Pokémon sélectionné comme ses statistiques et ses attaques. Renvoie sur la `StartView` ou `PokemonListeView` en fonction du choix de l'utilisateur.
* Affichage attaque:
  * [ ] `AttackListView` :  qui permet de visualiser 50 attaques sommairement et d'en sélectionner une pour aller sur `AttackDetailsView`.  Vous pouvez permettre un retour arrière sur la `StartView`.
  * [ ] `AttackDetailsView` : qui affiche les détails de l'attaque sélectionnée, comme par exemple ses caractéristiques (name, power, description), mais également quels sont les Pokémons qui peuvent l'apprendre. Renvoie sur la `StartView` ou `AttackListView` en fonction du choix de l'utilisateur.
* [ ] `CreatePokemonView` : qui permet de créer un Pokémon et le mettre en session. Après validation de l'utilisateur on retourne sur `StartView`



Quelques astuces :

- `PokemonService` dispose d'une méthode `get_pokemon_from_webservice(limit:int, offset:int)` pour récupérer des pokémons de la base
- `AttackService` dispose d'une méthode `get_attacks_from_webservice(limit:int, offset:int)` pour récupérer des attaques de la base
- de nombreux exemples sont disponibles sur la [doc InquirerPy](https://inquirerpy.readthedocs.io/en/latest/pages/prompts/list.html)


Quand vous avez terminé une classe, faites un commit, puis poussez sur le dépôt distant.

---

Merci d'avoir participé et Vive les Pokemons !