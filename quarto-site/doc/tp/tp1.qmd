---
title: "Git, Example of Application"
description: "Lab 1"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
---



The practical labs will be carried out on one of the two datalabs :

- <https://onyxia.lab.groupe-genes.fr/>{target="_blank"}
- <https://datalab.sspcloud.fr/>{target="_blank"} (create an account using `firstname.lastname@eleve.ensai.fr`)

We will be using the following tools:

- Python 3.13
- Visual Studio Code
- Git
- PostgreSQL
- DBeaver




## Accounts and Configuration {.unnumbered}

### GitHub account {.unnumbered}

::: {.callout-note}
GitHub is a web-based platform that provides hosting for software development and version control using Git. 

It's widely used by developers to collaborate on projects.
:::

- [ ] Create a [GitHub](https://github.com/){target="_blank"} account, if you don't already have one



### Git Config{.unnumbered}

::: {.callout-tip}
To avoid having to identify yourself every time you want to push code onto GitHub, we're going to:

- create a token on GitHub
- declare this token on the datalab

See this [tutorial](https://docs.sspcloud.fr/en/content/version-control.html){target="_blank"} for more information.
:::

- [ ] Log on to the datalab of your choice
- [ ] Go to `My account` > `Git` tab

You must have an active [Personal Access Token](https://github.com/settings/tokens){target="_blank"}

If not :

- [ ] In GitHub, Generate a new token (classic)
  - Expiration: 90 days
  - tick repo and workflow
  - [Generate token]{.green-button}
- [ ] Copy the token (ghp_xxxxxxxxxx)
- [ ] Paste it in the datalab


## Objectives {.unnumbered}

The objectives of this first tutorial are as follows:

- Use of *Git*
- Getting to grips with *VS Code*
- Understand how an application works

This tutorial combines explanations and code phases.

The explanations in this tutorial should not take precedence over those of your instructor. Use them as a knowledge base for later, but always prefer oral explanations.



## Repositories creation

::: {.callout-caution}
For this first tutorial, you will [**work with your project team**]{.underline} on a single remote repository.

One member of the team will create a repository on GitHub and then all the members (including the creator of the GitHub repository) will create their local repositories by cloning this remote repository.
:::

### Remote repository

::: {.callout-important}
A single team member creates this remote repository.
:::

- [ ] Connect on [GitHub](https://github.com/){target="_blank"}
- [ ] Create a *fork* of the repository [ENSAI-2A-complement-info-TP](https://github.com/ludo2ne/ENSAI-2A-complement-info-TP){target="_blank"}
  - A fork is a copy of a repository, allowing a user to develop independently without affecting the original
- [ ] Add your team members
  - On the repository page > :gear: Settings > Collaborators > [Add people]{.green-button}
- [ ] Send the address of the remote repository to your team


### Local repositories

All team members will now create a local repository on a VSCode service in the datalab.

- [ ] Launch a VSCode-python service
  - Important: in tab *Network access*, enable Port **9876**
  - It will be usefull later to expose your webservice
- [ ] Once VSCode has been launched, open a new terminal
  - Top left, icon with 3 horizontal bars > Terminal > New
  - or use shortcut CTRL + SHIFT + C
- [ ] Clone the remote repository using the token
  - `git clone https://${GIT_PERSONAL_ACCESS_TOKEN}@github.com/<user_name>/<repo_name>.git`
  - **GIT_PERSONAL_ACCESS_TOKEN**
- [ ] Position yourself in your repo
  - File > Open Folder > `/home/onyxia/work/<repo_name>` > OK

:::{.callout-note title="Environment Variables"}
An environment variable is a system-defined value used to configure how applications run or to securely store information like file paths, keys, or access tokens.

It is like a key-value pair in a dictionary. For example, `GIT_PERSONAL_ACCESS_TOKEN` is a variable whose value stores your GitHub personal access token.

```{.bash}
export MY_VAR_KEY=my_var_value   # Create or replace
echo $MY_VAR_KEY                 # Display
printenv                         # Display all
printenv | grep GIT              # Display all containing the word GIT
```
:::



## Repository content

::: {.callout-note}
Focus on some files.
:::

### README

The README file is essential for every project. It contains all the information needed to **describe, install and use** the application.

You will now follow the README instructions to :

- [ ] Install required packages
- [ ] Fill in the environment variables 

::: {.callout-tip}
You notice that you need to connect to a PostgreSQL database.

- [ ] In the datalab, launch a new PostgreSQL service
  - Ressources tab > Persistent volume size: 1Gi
- [ ] While the service is starting, copy the properties and fill in the .env file
:::

### VSCode settings

Most of these settings concern the automatic formatting of code when you save a file:

- Formatter: [Ruff](https://docs.astral.sh/ruff/formatter/){target="_blank"}
- `"editor.formatOnSave": true`: apply format when you save a file
- `"editor.insertSpaces": true,: replace tabulation by spaces

Another important property :

- `"PYTHONPATH": "${workspaceFolder}/src"`: Python code is in folder *src*



## Application example

To understand how a layered application is built, we'll look at a [project template](https://github.com/ludo2ne/ENSAI-2A-projet-info-template){target="_blank"}.


You may be asked to design 2 types of application:

- A CLI application
  - the user navigates through menus
- A webservice
  - the application exposes endpoints
  - the user can query these endpoints and retrieve the results


### CLI application

- [ ] Follow README instructions to run the application

You arrive at the home menu. The principle of this type of application is to let you navigate from one view to another. If necessary, the view will call up *services* in the background.

- [ ] Create a new account


::: {.callout-note}
Below is a sequence diagram explaining the process.

You will find the same information in the log file.

```{mermaid}
sequenceDiagram
    participant CLI
    participant Vue as InscriptionVue
    participant Service as JoueurService
    participant Dao as JoueurDao

    CLI->>Vue: Enter pseudo
    Vue->>Service: pseudo_deja_utilise()
    Service->>Dao: lister_tous()
    Dao-->>Service: All players
    Service-->>Vue: True or False
    Vue->>CLI: continue if True

    CLI->>Vue: Enter pwd, mail...
    Vue->>Service: creer()
    Service->>Dao: creer()
    Dao-->>Service: True
    Service-->>Vue: Joueur object
    Vue->>CLI: Success
```

:::



You'll notice that the application asks for a password that's a little too long. 

- [ ] Find and change the password required length to 16 characters
  - You will find it in one of the classes above
- [ ] Read the [inquirerPy](https://inquirerpy.readthedocs.io/en/latest/pages/validator.html){target="_blank"} to add a special character

::: {.callout-tip title="You can do better"}
In software development, hardcoding fixed values is discouraged because it reduces flexibility and security. 

Instead, using variables or configuration settings allows for easier adjustments and better adaptability across different environments.
:::

- [ ] Create an environment variable called `PASSWORD_MIN_LENGTH`
- [ ] Use it ! :rugby_football:
  - with this code `os.environ["PASSWORD_MIN_LENGTH"]` after importing os



::: {.callout-tip}
There are many ways of restricting user input.

It is also possible to create custom rules.
:::


- [ ] After returning to the home page, choose `Se connecter`
  - You will arrive at a new *view* with a new *menu*
  - :bulb: to go faster, you can use user "a", password "a"
- [ ] Display the players
- [ ] Open the log file in the `logs` folder


::: {.callout-note}
In the logs, you can see the flow of operations:

- You navigate from view to view
- Some views call *services*, which in turn call *DAOs*
:::


- [ ] Log out and stop the application


### A webservice

We'll come back to webservices in more detail in TP3.

- [ ] Following the instructions in the README, run the webservice

::: {.callout-tip title="How to query it"}
Inside the Datalab VSCode service, You can query your webservice by running this command in another terminal: `curl http://localhost:9876/hello/Alice`

However, you may remember that at the beginning we opened port 9876 to the outside world, i.e. the whole Internet.

So anyone who knows the address can query this web service from any machine.

To get the address:

- [ ] In the Datalab, go to *My Services* tab
- [ ] Open once again the VSCode service
- [ ] You will find a link
:::



- [ ] In your browser, test the *GET* (read) requests
- [ ] Check the logs to see the methods called
- [ ] Stop the webservice

::: {.callout-caution}
For other types of http request (PUT, POST, DELETE), the browser is not enough.

You will see how to make these requests in a later tutorial.
:::




## Git

::: {.callout-note}
You're now going to do a few basic things with Git :

- Add files to the repository
- Create save points
- Send your local modifications to remote repositories
- Update your local repository
:::

### Git routine


- [ ] Create a new file in the *src* folder using your own first name and paste this code
  ```{.python filename="<firstname>.py"}
  a, b = 0, 5

  for i in range(b):
      print(" " * a, end="")
      a += 1
      print("Hello <firstname>")
  ```
- [ ] In Git Bash, use the *status*, *add*, *commit*, *push* and *pull* commands to send your changes to the remote repository.

::: {.callout-tip collapse="true" title="Aide"}
[The sequence of Git commands](https://ludo2ne.github.io/Git-tuto/doc/tp-ensai.html#add-commit-pull-et-push){target=‘_blank’} should become automatic.

If you get this message when you *push*, you need to start with *pull*.
```{.txt}
To https://github.com/ludo2ne/ENSAI-2A-complement-info-TP.git
Merge branch 'main' of https://github.com/ludo2ne/ENSAI-2A-complement-info-TP
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/ludo2ne/ENSAI-2A-complement-info-TP.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first merge the remote changes (e.g.,
hint: 'git pull') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```
:::

### Creating conflict

::: {.callout-important}
Only one team member will do it!
:::

- [ ] For all `<firstname.py>` files, first name in the code.
  - do not change the file names, only the code inside
    - `print("Hello <firstname>")` :arrow_right: `print("Hello Mary-<firstname>")`
  - And it *add*, *commit* and *push*

### Solve conflits

- [ ] Then the other members each modify their own file
  - `print("Hello <firstname>")` :arrow_right: `print("Hello Anna-<firstname>")`
  - And they *add*, *commit*, *pull* and *push*.

Normally a conflict arises during *pull*. This is because there is a version conflict


| Version                      | Code                                     |
|------------------------------|------------------------------------------|
| Original version             | `print("Hello <firstname>")`             |
| Your modification            | `print("Hello Anne-<firstname>")`        |
| Version on remote repository | `print("Hello Marie-<firstname>")`       |


```{.python}
<<<<<<< HEAD
print("Bonjour Anna-<firstname>")         # Your code - current change
=======
print("Bonjour Mary-<firstname>")         # Code in the remote repository - incoming change
>>>>>>>
```

- [ ] You can choose to impose your version
  - either by clicking on *Accept Current Change*
  - Or by deleting `print(‘Hello Mary-<firstname>’)`, as well as `<<<<<<<`, `=======` and `>>>>>>>`.
- [ ] *add*, *commit* *pull* and *push*


::: {.callout-important}
Having a conflict isn't a big deal!

Having a conflict isn't a big deal!

Having a conflict isn't a big deal!

Conflict ≠ Error

This simply happens when Git encounters 2 versions and it doesn't have a :crystal_ball: or a :game_die: to choose which is the right one.

To avoid conflicts, get organised with your team to avoid working on the same files at the same time as much as possible.
:::




## Create your project repository

A team member :

- [ ] Creates a remote repository on GitHub ([new Repository](https://github.com/new){target="_blank"})
  - Repository name: for example *ENSAI-Projet-info-2A*.
  - Public or Private, as you wish
  - Check *Add a README file*.
  - .gitignore : *Python*
  - Choose a license : Apache, GNU, MIT...
- [ ] Invite your teammates

::: {.callout-important title="Mandatory"}
- [ ] Also invite your tutor and teacher (username: *ludo2ne*)
:::

Next, each team member :

- [ ] Creates a local clone of the repository
- [ ] Does a test to check that they can push code, for example by creating:
  - *doc/tracking/2025.09.04-week1.md*: the first weekly point
  - *src/main.py*: the file to launch your application
  - *requirements.txt*: the file listing the packages

::: {.callout-caution}
Afterwards, you'll make sure that your depot is "tidy", in the same way as described in the previous section.
:::

### .env file

This file will contain environment variables that will be used, for example, to connect to the PostgreSQL database.

- [ ] Make sure that this file remains in your local repository and is never sent to GitHub.

::: {.callout-tip collapse="true"}
Just one member of the team needs to modify the appropriate file, push, and then the others pull.
:::

## End of the Lab {.unnumbered}

The aim of this tutorial was to get you up to speed on using Git, and to help you discover and understand how a layered application works.


::: {.callout-important title="The same goes for all labs"}
When you have finished coding, don't forget to :

- Push your code to GitHub
- Pause or delete your datalab services
:::