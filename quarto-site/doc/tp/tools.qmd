---
title: "Tools for labs and projects"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
---


## Instructions

- In the lab instructions, [**you have to replace**]{.underline} `<...>` with an appropriate value.

::: {.callout-tip title="Example"}
- `git commit -m "<explicit message>"` 
- :arrow_right: `git commit -m "fix: log in error"`
:::

- Don't skip a step that didn't work, telling yourself that it doesn't matter
  - This may cause problems later on


## Datalabs

::: {.callout-important}
You require resources to start your services, the datalabs are available for that purpose. 

Once you have completed your tasks, make sure to [free up these resources]{.underline} by deleting or pausing your services.
:::

- SSPCloud (INSEE): <https://datalab.sspcloud.fr/>{target="_blank"}
- GENES: <https://onyxia.lab.groupe-genes.fr/>{target="_blank"}


### Custom service

If the catalogue services do not fully meet your needs, you can use customised services.

::: {.callout-note}
URLs to launch custom VSCode-python services for:

- [SSPCloud](https://datalab.sspcloud.fr/launcher/ide/vscode-python?name=vscode-python&version=2.3.19&s3=region-79669f20&init.personalInit=«https%3A%2F%2Fraw.githubusercontent.com%2Fludo2ne%2FENSAI-2A-Projet-info%2Frefs%2Fheads%2Fmain%2Fscripts%2Finit-vscode.sh»&networking.user.enabled=true&networking.user.ports[0]=9876&autoLaunch=true){target="_blank"}
- [GENES Datalab](https://onyxia.lab.groupe-genes.fr/launcher/ide/vscode-python?name=vscode-python&version=2.3.19&s3=region-46d082f3&init.personalInit=«https%3A%2F%2Fraw.githubusercontent.com%2Fludo2ne%2FENSAI-2A-Projet-info%2Frefs%2Fheads%2Fmain%2Fscripts%2Finit-vscode.sh»&networking.user.enabled=true&networking.user.port=9876&autoLaunch=true){target="_blank"}
:::

#### Explanations

In these labs, we will need a customised VSCode service, different from the one offered in the catalogue:

- by installing additional Python packages
- by modifying certain extensions
  - using :heavy_plus_sign: Ruff instead of :heavy_minus_sign: Flake8 to format the code
- by opening a specific port to deploy an API


::: {.callout-important}
Opening the port to deploy the API must be done before launching the service.

After that, it is too late, and you will have to delete it and start over.
:::

#### Ways to customise a service

- Launch the catalogue service, then modify it by executing commands manually
- Use an initialisation script that will run immediately after the catalogue service is launched
  - In the form before Launch: Initialization scripts
  - [Example](https://raw.githubusercontent.com/ludo2ne/ENSAI-2A-Projet-info/refs/heads/main/scripts/init-vscode.sh){target="_blank"}
- Create and use a Docker image based on the original service
  - In the form before Launch: Service > Use a custom image



## VSCode

### Open Folder

File > Open Folder > `/home/onyxia/work/<repo_name>` > OK

::: {.callout-caution}
Open Folder allows you to determine the root folder you are currently in.

To find out the current folder, look at the top left of the [explorer]{.underline} for the parent folder.

This choice is very important because imports between Python modules use relative paths.
:::

### Autocompletion

*code-server* (VSCode version used by datalabs) does not support Pylance, which normally provides autocompletion. 2 options for adding autocompletion:


#### Option 1

- [ ] Create a virtual environment
  - `python -m venv venv`
- [ ] CTRL + SHIFT + P
  - Python: Select interpreter
  - choose *venv*

::: {.callout-tip title="venv 101" collapse="true"}
When you install Python packages globally, everything gets mixed together. 

If one project needs Django 3.2 and another needs Django 5.0, they'll conflict. 

Over time, your global Python also gets messy, with packages you don't remember installing, and sharing your project becomes painful :arrow_right: the classic "it works on my machine" problem.

A **venv** solves this by creating a self-contained environment just for your project. 

- create: `python -m venv venv`
- activate: `source venv/bin/activate`

Inside this bubble, you can install any packages you want in any version you want, completely isolated from other projects.

- save dependencies for sharing: `pip freeze > requirements.txt`
- exit the venv: `deactivate`

To recreate the environment elsewhere:

```{.bash}
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```


:::

#### Option 2

- [ ] install extension **BasedPyright**

To remove warnings:

- [ ] Create a file at the root of your project: `pyrightconfig.json`

```{.json filename="pyrightconfig.json"}
{
  "typeCheckingMode": "off",
  "reportMissingParameterType": "none",
  "reportImplicitRelativeImport": "none"
}
```

- [ ] to hide inlay hints

```{.json filename=".vscode/settings.json"}
{
  "basedpyright.analysis.inlayHints.callArgumentNames": false,
  "basedpyright.analysis.inlayHints.variableTypes": false,
  "basedpyright.analysis.inlayHints.functionReturnTypes": false
}
```

## Git

[Git tuto](https://ludo2ne.github.io/Git-tuto/){target="_blank"}

| Command                                                  | Description                                                          |
|----------------------------------------------------------|----------------------------------------------------------------------|
| `git clone https://....git`                              | Creates a copy of a remote repository in your local directory.       |
| `git add .`                                              | Stages all changes for the next commit.                              |
| `git commit -m "<explicit message>"`                     | Commits the staged changes to the local repository.                  |
| `git push`                                               | Uploads local changes to a remote repository.                        |
| `git pull`                                               | Merge changes from a remote to the local repository.                 |
| `git switch <branch>`                                    | Switches to the specified branch.                                    |


### Use a token

If you don't want to enter your **GitHub** credentials every time you interact with a repository, you can use a personal access token. 

This is particularly useful as it persists even after you've paused and resumed your **VSCode** service.


- **Prerequisite:** You must have already created a **Personal Access Token** in GitHub and declared it on the datalab (see Lab 1 for instructions)
- **When cloning:** Instead of using the standard clone URL, you embed the token directly into the command
  - replace `git clone https://github.com/<username>/<reponame>.git`
  - with `git clone https://$GIT_PERSONAL_ACCESS_TOKEN@github.com/<username>/<reponame>.git`
- **To verify:** After cloning, you can check that the remote URL now includes the token variable using the following command:
  - `git remote -v`
  - GIT_PERSONAL_ACCESS_TOKEN is replaced by its value: *ghp_...*

Now, thanks to the token, you no longer need to enter your GitHub credentials, saving you time and effort.


## VM ENSAI

In previous years, tutorials and projects were carried out on ENSAI VMs. You can therefore use it as a backup.

The necessary tools are still available there for development:

- Visual Studio Code
- Python 3.10
- Git
- a PostgreSQL database

::: {.callout-important}
All students have access to a database that can only be accessed from ENSAI VMs. For more information, [click here](https://ludo2ne.github.io/ENSAI-2A-remise-a-niveau/docs/outils/DBeaver.html){target="_blank"}
:::

## Personal computer

::: {.callout-warning}
The biggest challenge if you want to work on your personal machine will be to **setup a local PostgreSQL database.**

That is why it is strongly advised not to work on your personal computer if you do not feel capable of carrying out these installations completely on your own.

This could take a lot of time and energy, and it is not the role of project managers to help you with these installations.
:::

To complete the practical work and project on your personal computer, you must install:

- Visual Studio Code or another IDE
- Python
- Git
- PostgreSQL