[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Projet informatique 2e année",
    "section": "",
    "text": "Présentation du projet aux tutrices et tuteurs\nPrésentation du projet aux élèves\nNotice élèves\n\n\n\nLes élèves de deuxième année de l’ENSAI participent à la réalisation du projet informatique par groupes de 4 ou 5 élèves.\nCe projet permet d’effectuer un approfondissement et une mise en pratique des connaissances acquises lors des enseignements informatiques de 1ère année.\nLe travail demandé consiste à construire une application permettant de répondre à la problématique d’un sujet proposé. Ce travail se décompose en 2 grandes phases :\n\nÉtude préalable et Conception générale de l’application\n\n\ndécrire la solution envisagée\nplanifier les grandes phases de la réalisation\ndécrire les exigences fonctionnelles par la modélisation\n\n\nRéalisation\n\n\nmise en place de la base de données\ndéveloppements, tests, documentation"
  },
  {
    "objectID": "index.html#le-projet-info-2a",
    "href": "index.html#le-projet-info-2a",
    "title": "Projet informatique 2e année",
    "section": "",
    "text": "Présentation du projet aux tutrices et tuteurs\nPrésentation du projet aux élèves\nNotice élèves\n\n\n\nLes élèves de deuxième année de l’ENSAI participent à la réalisation du projet informatique par groupes de 4 ou 5 élèves.\nCe projet permet d’effectuer un approfondissement et une mise en pratique des connaissances acquises lors des enseignements informatiques de 1ère année.\nLe travail demandé consiste à construire une application permettant de répondre à la problématique d’un sujet proposé. Ce travail se décompose en 2 grandes phases :\n\nÉtude préalable et Conception générale de l’application\n\n\ndécrire la solution envisagée\nplanifier les grandes phases de la réalisation\ndécrire les exigences fonctionnelles par la modélisation\n\n\nRéalisation\n\n\nmise en place de la base de données\ndéveloppements, tests, documentation"
  },
  {
    "objectID": "index.html#le-cours-de-compléments-dinformatique",
    "href": "index.html#le-cours-de-compléments-dinformatique",
    "title": "Projet informatique 2e année",
    "section": "Le cours de Compléments d’informatique",
    "text": "Le cours de Compléments d’informatique\n\n\n\n\n\n\nNote\n\n\n\nLe but de ce cours est de vous aider à mener à bien le projet informatique en vous apportant les compétences et les outils nécessaires.\n\n\nCours 2023-2024\n\nNotions évoquées\n\nGit\nRappels POO\nTests unitaires\nWebservices\nCommuniquer avec une base de données\nUtiliser les logs\n\n\n\nLes TP\n4 TP de 3h permettent de mettre en applications les notions vues en cours. il y a également dans ces TP de nombreux éléments réutilisables en projet.\nLe code des TP est disponible sur ce dépôt"
  },
  {
    "objectID": "index.html#bibliographie",
    "href": "index.html#bibliographie",
    "title": "Projet informatique 2e année",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nMise en production des projets de data science, Romain Avouac & Lino Galiana (ENSAE)\nRefactoring.Guru"
  },
  {
    "objectID": "doc/cours/tests-unitaires.html",
    "href": "doc/cours/tests-unitaires.html",
    "title": "Les tests unitaires",
    "section": "",
    "text": "Source : CommitStrip\n\n\n\n\n\nCrash test de voiture\nTest de conformité\nTest qualité en industrie\nTest statistique\n\n\n\n\n\nPour vérifier que votre programme fonctionne\nPour détecter des erreurs\nPour éviter les régressions (quand vous modifiez du code)\n\nAucun test n’est parfait, mais cela permet quand même d’écarter de nombreuses erreurs.\n\nDéjà tester une fonctionnalité d’un dev dont le cas nominal plante.\n\n\n\n\nUn test ressemble à une expérience scientifique.\nIl examine une hypothèse exprimée en fonction de trois éléments :\n\nles données en entrée\nl’objet à tester\nles résultats attendus\n\nCet examen est effectué sous conditions contrôlées pour pouvoir tirer des conclusions et, dans l’idéal, être reproduit.\n\n\n\n\nPourcentage de fonctions testées\nIndicateur de qualité\nTendance, plutôt qu’une valeur fiable\n\nPréférez faire peu de tests, mais des tests utiles !\n\nNombre de fonctions testées sur le nombre total de fonctions.\nTendance car facile de tester toutes les méthodes élémentaires pour augmenter mécaniquement sa couverture et de mettre de côté les tests sur les méthodes plus compliquées.\n\n\n\n\nIl existe de très nombreux tests différents, voici les principaux :\n\nTest unitaire : teste une fonction pour vérifier son bon fonctionnement\nTest fonctionnel : teste les cas d’utilisation du logiciel\nTest de charge : évaluent la capacité d’un système à gérer un volume élevé de données ou de transactions\nTest d’intégration : vérifie que différents composants ou modules d’un système interagissent correctement ensemble\nTest d’intrusion : vérifie la sécurité du logiciel en recherchant des vulnérabilités et en simulant des attaques potentielles\n…"
  },
  {
    "objectID": "doc/cours/tests-unitaires.html#les-tests",
    "href": "doc/cours/tests-unitaires.html#les-tests",
    "title": "Les tests unitaires",
    "section": "",
    "text": "Source : CommitStrip\n\n\n\n\n\nCrash test de voiture\nTest de conformité\nTest qualité en industrie\nTest statistique\n\n\n\n\n\nPour vérifier que votre programme fonctionne\nPour détecter des erreurs\nPour éviter les régressions (quand vous modifiez du code)\n\nAucun test n’est parfait, mais cela permet quand même d’écarter de nombreuses erreurs.\n\nDéjà tester une fonctionnalité d’un dev dont le cas nominal plante.\n\n\n\n\nUn test ressemble à une expérience scientifique.\nIl examine une hypothèse exprimée en fonction de trois éléments :\n\nles données en entrée\nl’objet à tester\nles résultats attendus\n\nCet examen est effectué sous conditions contrôlées pour pouvoir tirer des conclusions et, dans l’idéal, être reproduit.\n\n\n\n\nPourcentage de fonctions testées\nIndicateur de qualité\nTendance, plutôt qu’une valeur fiable\n\nPréférez faire peu de tests, mais des tests utiles !\n\nNombre de fonctions testées sur le nombre total de fonctions.\nTendance car facile de tester toutes les méthodes élémentaires pour augmenter mécaniquement sa couverture et de mettre de côté les tests sur les méthodes plus compliquées.\n\n\n\n\nIl existe de très nombreux tests différents, voici les principaux :\n\nTest unitaire : teste une fonction pour vérifier son bon fonctionnement\nTest fonctionnel : teste les cas d’utilisation du logiciel\nTest de charge : évaluent la capacité d’un système à gérer un volume élevé de données ou de transactions\nTest d’intégration : vérifie que différents composants ou modules d’un système interagissent correctement ensemble\nTest d’intrusion : vérifie la sécurité du logiciel en recherchant des vulnérabilités et en simulant des attaques potentielles\n…"
  },
  {
    "objectID": "doc/cours/tests-unitaires.html#les-tests-unitaires",
    "href": "doc/cours/tests-unitaires.html#les-tests-unitaires",
    "title": "Les tests unitaires",
    "section": "Les tests unitaires",
    "text": "Les tests unitaires\nNous allons utiliser le package pytest pour réaliser nos tests en Python.\n\nUn bon test unitaire\n\nTeste une seule fonctionnalité\nIsolé\nReproductible\nDéterministe\n\n\n\nIsolé : indépendant des autres tests\n\nsi vous testez une méthode A, qui elle-même appelle d’autres méthodes B, C, D…\nle test ne doit se faire que sur la méthode A\nil faut mocker le comportement des autres méthodes\n\nDéterministe : donne toujours le même résultat\n\n\n\n\nMéthode à tester\n\n\noperation_mathematique.py\n\nclass OperationMathematiques:\n    def diviser_cinq_par(self, nombre) -&gt; float:\n        \"\"\"Divise le nombre 5 par un nombre donné.\n        Parameters\n        ----------\n        nombre : float or int\n            Le nombre par lequel 5 sera divisé.\n        Returns\n        -------\n        float or None\n            Le résultat de la division de 5 par le nombre donné.\n            Si le nombre est égal à 0, la méthode retourne None.\n        \"\"\"\n        if nombre != 0:\n            return 5 / nombre\n        else:\n            return None\n\n\n\nClasse de test\nCréons une classe de test.\nPour tester le cas nominal, nous :\n\nchoisissons un nombre en entrée\nappelons la méthode diviser_cinq_par()\nvérifions que la valeur retournée est égale à la valeur attendue\n\n\n\nCas Nominal\n\n\ntest_operation_mathematique.py\n\nimport pytest\nfrom mathematiques.operation_mathematique import OperationMathematiques\n\nclass TestOperationMathematiques():\n    def test_diviser_cinq_par_nombre_non_nul(self):\n        # GIVEN\n        nombre = 2\n\n        # WHEN\n        resultat = OperationMathematiques().diviser_cinq_par(nombre)\n\n        # THEN\n        assert resultat == 2.5\n\n\nEst-ce suffisant ?\n\n\n\nAutres cas\nMais ce n’est pas suffisant !\n\nLa méthode a également un autre retour possible : None\nIl faut aussi tester ce cas\n\n\n\ntest_operation_mathematique.py\n\n    def test_diviser_cinq_par_zero(self):\n        # GIVEN\n        nombre = 0\n\n        # WHEN\n        resultat = OperationMathematiques().diviser_cinq_par(nombre)\n\n        # THEN\n        assert resultat is None\n\n\n\nEt si…\nNous appelons la méthode avec ce paramètre : diviser_cinq_par(\"a\") ?\nVous pouvez aussi écrire un test pour vérifier que votre méthode renvoie bien une exception TypeError dans ce cas.\n\n\ntest_operation_mathematique.py\n\n    def test_diviser_cinq_string(self):\n        # GIVEN\n        nombre = \"a\"\n\n        # WHEN / THEN\n        with pytest.raises(TypeError):\n            OperationMathematiques().diviser_cinq_par(nombre)\n\nMais il est quand même préférable de vérifier dans votre méthode que le paramètre est bien de type numérique et de décider quoi faire si ce n’est pas le cas.\n\n\nCe qu’il faut retenir\nLes tests unitaires\n\nvérifient qu’une méthode fait ce qu’elle doit faire\nil faut tester les cas nominaux, mais également les cas à la marge et les erreurs\nun test unitaire teste UNE et UNE seule chose\n\nil faut autant de tests unitaires que de retours possibles"
  },
  {
    "objectID": "doc/cours/tests-unitaires.html#les-test-driven-development-tdd",
    "href": "doc/cours/tests-unitaires.html#les-test-driven-development-tdd",
    "title": "Les tests unitaires",
    "section": "Les Test Driven Development (TDD)",
    "text": "Les Test Driven Development (TDD)\n\nQuand tester ?\n\nAu début !\n\n\n\n\n\n\nTip\n\n\n\nPlus on teste tôt ➡️ plus les tests sont efficaces et peu coûteux !\n\n\n\n\n\nTDD\nLa meilleure pratique :\n\nCréer les tests\nCoder la fonction\n\n\n\nLogique\nCela paraît un peu étrange, mais en fait pas tant que ça.\nLorsque vous codez une fonction, vous savez avant de commencer :\n\nquels seront les paramètres en entrée\nquels résultats vous attendez en sortie\ndonc vous savez déjà quoi tester !\n\n\n\nPratique du TDD\n\n✅ Amélioration de la qualité du code\n✅ Réduction des bugs\n❌ puis ✅ Temps\n❌ Maintenance des tests\n\n\n\n\n\n\n\nImportant\n\n\n\nAvantages &gt;&gt;&gt; Incovénients\n\n\n\nLa pratique du TDD a le gros avantage que cela nous force à écrire des tests et de prendre le temps de bien faire les choses. Pour adhérer au TDD il faut vraiment se faire violence au début, mais au final cette pratique est très bénéfique.\nSinon, si l’on écrit la fonction en premier, une fois que l’on a terminé, il y a 9 chances sur 10 que l’on se dise : “c’est bon ça marche, pas la peine de tester…”. Et ça c’est pas bien !!!"
  },
  {
    "objectID": "doc/cours/tests-unitaires-slides.html#les-tests",
    "href": "doc/cours/tests-unitaires-slides.html#les-tests",
    "title": "Les tests unitaires",
    "section": "Les Tests",
    "text": "Les Tests\n\nSource : CommitStrip"
  },
  {
    "objectID": "doc/cours/tests-unitaires-slides.html#les-tests-unitaires",
    "href": "doc/cours/tests-unitaires-slides.html#les-tests-unitaires",
    "title": "Les tests unitaires",
    "section": "Les tests unitaires",
    "text": "Les tests unitaires\nNous allons utiliser le package pytest pour réaliser nos tests en Python."
  },
  {
    "objectID": "doc/cours/tests-unitaires-slides.html#les-test-driven-development-tdd",
    "href": "doc/cours/tests-unitaires-slides.html#les-test-driven-development-tdd",
    "title": "Les tests unitaires",
    "section": "Les Test Driven Development (TDD)",
    "text": "Les Test Driven Development (TDD)"
  },
  {
    "objectID": "doc/cours/webservices.html",
    "href": "doc/cours/webservices.html",
    "title": "Les Webservices",
    "section": "",
    "text": "🚧"
  },
  {
    "objectID": "doc/cours/dao-securite.html",
    "href": "doc/cours/dao-securite.html",
    "title": "DAO et Sécurité",
    "section": "",
    "text": "🚧"
  },
  {
    "objectID": "doc/tp/tp1.html",
    "href": "doc/tp/tp1.html",
    "title": "Git, Exemple d’Application",
    "section": "",
    "text": "Important\n\n\n\nLes TP sont prévus pour être réalisés en étant connecté à votre VM ENSAI, soit depuis les clients légers des salles info, soit via https://view.ensai.fr/. Vous y disposez de tous les outils nécessaires :\n\nPython 3.10 : la version de Python installée à l’ENSAI\n\nainsi que les packages nécessaires\n\nVisual Studio Code : votre éditeur de code\nGit : pour gérer vos dépôts\nPostgreSQL : une base de données\n\nDBeaver : pour consulter, modifier cette base de données\n\n\nÀ moins que vous ne maîtrisiez des outils tels Docker pour créer votre base de données, il est fortement déconseillé de coder sur votre propre machine que ce soit en TP ou en projet. Vous allez perdre un temps considérable en installation et configuration. Et même si vous êtes très très doués certaines parties ne pourront de toute manière pas fonctionner."
  },
  {
    "objectID": "doc/tp/tp1.html#à-faire-à-la-maison",
    "href": "doc/tp/tp1.html#à-faire-à-la-maison",
    "title": "Git, Exemple d’Application",
    "section": "À faire à la maison",
    "text": "À faire à la maison\nUn prérequis de ce TP est que votre configuration Git soit opérationnelle.\n\n\n\n\n\n\nTip\n\n\n\nSi vous avez besoin de vous rafrîchir la mémoire sur Git, suivez ce lien.\n\n\n\nCompte GitHub\n\nCréez un compte GitHub, si vous n’en avez pas déjà un\n\n\n\nConfig Git\n\nOuvrez Git Bash\nExécutez cette commande : git config -l\n\nSi les valeurs user.name et user.email sont bien renseignées, tout est ok.\nSi ce n’est pas le cas, exécutez une à une les 5 commandes git config.\n\n\nClé SSH\n\nExécutez cette commande : cat ~/.ssh/id_rsa.pub (toujours dans Git Bash)\n\nSi le fichier existe et que cela renvoie un réultat commençant par ssh-rsa, cela signifie que vous avez bien défini une clé SSH sur votre machine.\nDans le cas contraire, créez une clé SSH\nNous allons maintenant vérifier si vous avez bien déclaré cette clé publique sur GitHub, ou sinon l’ajouter\n\nCopiez la clé publique : cat ~/.ssh/id_rsa.pub | clip\nAllez sur la page pour déclarer une nouvelle clé SSH (Settings &gt; SSH and GPG keys &gt; New)\n\nTitle : VM ENSAI\nKey : Collez votre clé\nAdd SSH key\n\n\nSoit votre clé publique est maintenant déclarée à GitHub, ou au pire, GitHub vous dira qu’il connait déjà cette clé."
  },
  {
    "objectID": "doc/tp/tp1.html#objectifs",
    "href": "doc/tp/tp1.html#objectifs",
    "title": "Git, Exemple d’Application",
    "section": "Objectifs",
    "text": "Objectifs\nLes objectifs de ce premier TP sont les suivants :\n\nUtilisation de Git\nPrise en main de VS Code\nComprendre comment fonctionne une application\n\nCe TP mêle explications et phases de code.\nLes explications de ce TP ne doivent pas prendre le pas sur celles de votre intervenant. Prenez les comme une base de connaissance pour plus tard, mais préférez toujours les explications orales."
  },
  {
    "objectID": "doc/tp/tp1.html#création-des-dépôts",
    "href": "doc/tp/tp1.html#création-des-dépôts",
    "title": "Git, Exemple d’Application",
    "section": "1 Création des dépôts",
    "text": "1 Création des dépôts\n\n\n\n\n\n\nNote\n\n\n\nPour ce premier TP, vous allez travailler avec votre équipe projet sur un seul et même dépôt distant.\nUn membre de l’équipe va créer un dépôt sur GitHub et ensuite tous les membres (le créateur du dépôt GitHub inclus) vont créer leurs dépôt locaux en clonant ce dépôt distant.\n\n\n\n1.1 Le dépôt distant\n\n\n\n\n\n\nImportant\n\n\n\nUn seul membre de l’équipe crée ce dépôt distant.\n\n\n\nConnectez-vous sur GitHub\nCréez un fork du dépôt ENSAI-2A-complement-info-TP\n\nUn fork est une copie d’un dépôt, permettant à un utilisateur de développer indépendamment sans affecter l’original\n\nAjoutez les membres de votre équipe\n\nSur la page du dépôt &gt; ⚙️ Settings &gt; Collaborators &gt; Add people\n\nEnvoyez à vos camarades, l’adresse du dépôt distant\n\n\n\n1.2 Les dépôts locaux\nMaintenant, chaque membre de l’équipe va créer sur sa propre machine, son clone du dépôt.\nCommençons par créer un dossier pour ranger votre dépôt local :\n\nOuvrez Git Bash\nExécutez cette commande : mkdir -p /p/Cours2A/UE3-Complements-info/TP1 && cd $_\n\nElle crée l’arborescence demandée (mkdir)\nPuis elle vous positionne dans ce dossier (cd)\n\nClonez le dépôt distant avec SSH\n\nLorsque vous êtes sur la page GitHub du dépôt, cliquez sur Code, puis sur l’onglet SSH\nCopiez l’url qui commence par git@github.com...\nDans Git Bash : git clone &lt;url&gt; (en remplaçant &lt;url&gt;)\n\n\nVotre clone est prêt, vous pouvez vérifier sa présence via l’explorateur Windows (WIN + E, puis allez dans le dossier P:\\Cours2A\\UE3-Complements-info\\TP1).\n\nFermez Git Bash\n\nSi tout s’est bien passé\nVous allez retrouver ensuite le même Git Bash, qui est intégré dans VS Code"
  },
  {
    "objectID": "doc/tp/tp1.html#visual-studio-code",
    "href": "doc/tp/tp1.html#visual-studio-code",
    "title": "Git, Exemple d’Application",
    "section": "2 Visual Studio Code",
    "text": "2 Visual Studio Code\n\n2.1 Ouvrir le dépôt\nUn dépôt est un ensemble de dossiers et de fichiers. Pour consulter et éditer ces fichiers, vous allez utiliser Visual Studio Code, un éditeur très populaire.\n\n\n\n\n\n\nNote\n\n\n\nAu lieu de VS Code, vous pouvez tout à fait ouvrir vos fichiers avec le bloc-notes, mais vous vous rendrez rapidement compte que c’est beaucoup moins pratique.\n\n\n\nOuvrez Visual Studio Code\nOuvrez votre dépôt local\n\nFile &gt; Open Folder\nAllez dans le dossier P:\\Cours2A\\UE3-Complements-info\\TP1\nCliquez une seule fois sur 📁 ENSAI-2A-complement-info-TP\nPuis sur le bouton Sélectionner un dossier\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nVérifiez que le dossier parent dans l’Explorer VS Code est ENSAI-2A-complement-info-TP\n\nL’Explorer, à gauche, permet d’explorer l’arborsence des fichiers et dossiers\n\n\n⚠️ Si le dossier parent n’est pas le bon, recommencez l’Open Folder où vous aurez de gros soucis par la suite !!!\n\n\n\n\n2.2 Contenu du dépôt\nCe dépôt contient les éléments suivants :\n\n\n\n\n\n\n\nÉlément\nDescription\n\n\n\n\n.vscode\nContient les paramètres VS Code pour ce projet\n\n\nsrc\nDossier contenant les fichiers Python rangés dans une arborescence respectant la programmation en couches\n\n\n.gitignore\nListe des fichiers à ne pas versionner avec git\n\n\nLICENSE\nDéfinit les droits d’utilisation du dépôt\n\n\nREADME.md\nContient des informations utiles pour présenter, installer et utiliser l’application\n\n\nrequirements.txt\nListe les packages Python nécessaires\n\n\n\n\n\n2.3 La config VSCode\n\n\n\n\n\n\nTip\n\n\n\nVS Code est hautement paramétrable, aussi bien au niveau User qu’au niveau Workspace (i.e. considérons que Workspace = dépôt).\n\n\n\nOuvrez le fichier .vscode/settings.json\n\nCe fichier contient du paramétrage pour le dépôt, par exemple :\n\nLe formattage automatique lorsque vous sauvegardez un fichier Python\n\nLe formateur utilisé est Black\nLa taille des lignes est limitée à 100 caractères\nLes tabulations sont remplacées par 4 espaces\n\nLe dossier source se nomme src\n\nPour importer des modules, ce dossier src sera la racine\n\nle terminal par défaut est Git Bash"
  },
  {
    "objectID": "doc/tp/tp1.html#git",
    "href": "doc/tp/tp1.html#git",
    "title": "Git, Exemple d’Application",
    "section": "3 Git",
    "text": "3 Git\n\n\n\n\n\n\nNote\n\n\n\nVous allez maintenant faire quelques manipulations basiques avec Git :\n\nAjouter des fichiers au dépôts\nCréer des points de sauvegarde\nEnvoyer vos modifications locales vers les dépôts distant\nMettre à jour votre dépôt local\n\n\n\n\n3.1 Routine Git\n\nOuvrez le Git Bash intégré dans VS Code\n\nTerminal &gt; New Terminal (ou CTRL + ù)\n\nLancez le programme principal pour vérifier que tout fonctionne bien\n\npython src/__main__.py\n\nCréez un nouveau fichier dans le dossier src en complétant avec votre propre prénom et collez ce code\n\n\n&lt;prenom&gt;.py\n\na, b = 0, 5\n\nfor i in range(b):\n    print(\" \" * a, end=\"\")\n    a += 1\n    print(\"Bonjour &lt;prenom&gt;\")\n\nDans Git Bash, utilisez les commandes status, add, commit, push et pull pour envoyer vos modifications vers le dépôt distant\n\n\n\n\n\n\n\nAide\n\n\n\n\n\nL’enchainement des commandes Git devra devenir un automatisme.\nSi lors du push, vous avez ce message, c’est qu’il faut commencer par pull.\nTo https://github.com/ludo2ne/ENSAI-2A-complement-info-TP.git\nMerge branch 'main' of https://github.com/ludo2ne/ENSAI-2A-complement-info-TP\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'https://github.com/ludo2ne/ENSAI-2A-complement-info-TP.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first merge the remote changes (e.g.,\nhint: 'git pull') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n\n\n\n\n3.2 Résoudre un conflit\n\nPour tous les fichier &lt;prenom.py&gt;, un seul membre de l’équipe commence par modifier le prenom dans le code\n\nne pas modifier les noms des fichiers, uniquement le code à l’intérieur\n\nprint(\"Bonjour &lt;prenom&gt;\") ➡️ print(\"Bonjour Marie-&lt;prenom&gt;\")\n\nEt il add, commit et push\n\nEnsuite les autres membres modifient chacun leur propre fichier\n\nprint(\"Bonjour &lt;prenom&gt;\") ➡️ print(\"Bonjour Anne-&lt;prenom&gt;\")\nEt ils add, commit pull et push\n\n\nNormalement un conflit survient lors du pull. En effet il y a un conflit de version\n\n\n\n\n\n\n\nVersion\nCode\n\n\n\n\nVersion originale\nprint(\"Bonjour &lt;prenom&gt;\")\n\n\nVotre modification\nprint(\"Bonjour Anne-&lt;prenom&gt;\")\n\n\nVersion sur le dépôt distant\nprint(\"Bonjour Marie-&lt;prenom&gt;\")\n\n\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nprint(\"Bonjour Anne-&lt;prenom&gt;\")          # Votre modification - current change\n=======\nprint(\"Bonjour Marie-&lt;prenom&gt;\")         # La modification du dépôt distant - incoming change\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\nVous choisissez d’imposer votre version\n\nSoit en cliquant sur *Accept Current Change\nSoit en supprimant print(\"Bonjour Marie-&lt;prenom&gt;\"), ainsi que les &lt;&lt;&lt;&lt;&lt;&lt;&lt;, ======= et &gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\nadd, commit pull et push\n\n\n\n\n\n\n\nImportant\n\n\n\nAvoir un conflit, ce n’est pas grave ! Avoir un conflit, ce n’est pas grave ! Avoir un conflit, ce n’est pas grave !\nConflit ≠ Erreur\nCela arrive simplement quand Git rencontre 2 versions et il n’a pas de 🔮, ni de 🎲 pour choisir laquelle est la bonne.\nPour éviter les conflits, organisez-vous avec votre équipe pour éviter autant que possible de travailler sur les mêmes fichiers en même temps."
  },
  {
    "objectID": "doc/tp/tp1.html#un-exemple-dapplication",
    "href": "doc/tp/tp1.html#un-exemple-dapplication",
    "title": "Git, Exemple d’Application",
    "section": "4 Un exemple d’application",
    "text": "4 Un exemple d’application\nPour comprendre comment est construit une application, vous allez étudier un exemple simple.\nSuivez les instructions du README pour :\n\nCloner le dépôt\nOuvrir le dépôt avec VS Code\nInstaller les packages\nSaisie de vos Variables d’environnement\n\n\n\n\n\n\n\nLe fichier README\n\n\n\nLe README est disponible :\n\nen bas de la page GitHub du dépôt distant (mis en forme)\nsur votre dépôt local, fichier README.md (version brute)\n\n\n\n2 types d’applications peuvent vous être demandés en projet :\n\nUne application de Menu\n\nl’utilisateur navigue dans des menus\n\nUn webservice\n\nl’application expose des endpoints\nl’utilisateur peut interroger ces endpoints et récupérer les résultats\n\n\n\n4.1 Une application de Menu\n\nToujours en suivant les instructions du README, lancez le main\n\nVous arrivez sur le menu d’accueil. Le principe de ce type d’application est de vous faire naviguer d’une vue à l’autre. Si nécessaire, la vue appelera en arrière plan des services.\n\n\n\n\n\n\nNote\n\n\n\nQuelques exemples plus concrets :\n\nVue de Connexion\n\nVous rentrez votre nom d’utilisateur et votre mot de passe et validez\nLa vue appelle alors un service qui va vérifier les informations saisies\n\nSi valide, vous êtes connecté et redirigé vers la vue du joueur connecté\nSinon, vous êtes redirigé vers l’accueil\n\n\n\n\nVue liste des joueurs\n\nLes joueurs sont stockés en base de données\nLorsqu’elle est chargée la vue n’a pas accès à la liste des joueurs\nLa vue appelle un service qui fournit cette liste\n\nCe service va lui même appeler une méthode DAO pour interroger la base de données (TP4)\n\nLa liste remonte jusque la vue qui affiche la liste des joueurs\n\n\n\n\n\nRechercher le code du menu d’accueil dans la couche view\n\nSi vous observez le code, cette classe ne fait qu’une seule chose : vous rediriger vers une nouvelle vue\n\nSélectionnez le choix Ré-initialiser la base de données\n\nCela permet de créer les tables dans la base de données\nEt d’insérer des données\nSi vous explorez le code, vous verrez que cela exécute les scripts sql du dossier data\n\nSélectionnez Créer un compte et saisissez les éléments demandés\n\nObservez le code inscription_vue.py pour voir comment sont vérifiées les saisies\n\n\n\n\n\n\n\n\nTip\n\n\n\nIl existe de nombreuses possibilités pour restreindre l’utilisateur dans ses saisies.\nIl est également possible de créer des règles personnalisées.\n\n\n\nAprès être revenu à l’accueil, choisissez Se connecter\n\nVous arrivez sur une nouvelle vue avec un nouveau menu\n💡 pour aller plus vite, vous pouvez utiliser l’utilsateur « a », mot de passe « a »\n\nAffichez les joueurs\nOuvrez le fichier de log dans le dossier logs\n\n\n\n\n\n\n\nNote\n\n\n\nDans les logs, vous pouvez observer le cheminement des opérations :\n\nVous naviguez de vues en vues\nCertaines vues appellent de services qui eux mêmes appellent des DAO.\n\n\n\n\nDéconnectez-vous et arrêtez l’application\n\n\n\n4.2 Un webservice\nNous reviendrons plus en détail sur les webservices lors du TP3.\n\nEn suivant les instructions du README, lancez le webservice\nDans votre navigateur, testez les requêtes GET (lecture)\nConsultez les logs pour voir les méthodes appelées\nArrêtez le webservice\n\n\n\n\n\n\n\nNote\n\n\n\nPour les autres types de requêtes http (PUT, POST, DELETE), le navigateur ne suffit pas.\nVous verrez comment réaliser ces requêtes dans un prochain TP."
  },
  {
    "objectID": "doc/tp/tp1.html#créez-votre-répo-projet",
    "href": "doc/tp/tp1.html#créez-votre-répo-projet",
    "title": "Git, Exemple d’Application",
    "section": "5 Créez votre répo projet",
    "text": "5 Créez votre répo projet\nUn membre de l’équipe :\n\nCrée un dépôt distant sur GitHub (new Repository)\n\nRepository name : par exemple ENSAI-Projet-info-2A\nPublic ou Privé, comme vous voulez\nCochez Add a README file\n.gitignore : Python\nChoose a license : au choix Apache, GNU ou MIT\n\nInvite ses camarades\n\n\n\n\n\n\n\nObligatoire\n\n\n\n\nInvitez également votre tutrice ou tuteur, ainsi que l’enseignant (pseudo : ludo2ne)\n\n\n\nEnsuite, chaque membre de l’équipe :\n\nCrée un clone local du dépôt dans P:/Cours2A/UE3-Projet-info\nFait un test pour vérifier qu’il peut pousser du code, par exemple en créant :\n\ndoc/suivi/2024.09.05-semaine1.md : le premier point hebdo\nsrc/main.py : le fichier pour lancer votre application\nrequirements.txt : le fichier listant les packages\n\n\n\n\n\n\n\n\nCaution\n\n\n\nPar la suite, vous veillerez à ce que votre dépôt soit « bien rangé », de la même manière que celui vu dans la partie précédente."
  },
  {
    "objectID": "doc/tp/tp1.html#conclusion",
    "href": "doc/tp/tp1.html#conclusion",
    "title": "Git, Exemple d’Application",
    "section": "Conclusion",
    "text": "Conclusion\nLe but de ce TP était de vous remettre en jambe concernant l’utilisation de Git, ainsi que de vous faire découvrir et comprendre comment fonctionne une application découpée en couche."
  },
  {
    "objectID": "doc/tp/tp3.html",
    "href": "doc/tp/tp3.html",
    "title": "Webservices et formats de données",
    "section": "",
    "text": "😱 Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl mélange explications complètes et manipulations pour être au maximum autosuffisant.\nVous n’allez surement pas terminer le sujet, ce n’est pas grave. Il est là pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels à un webservice à la main avec Insomnia\nFaire des appels à un webservice avec la bibliothèque python requests\nDécouvrir la page swagger d’un webservice\nManipuler différents formats de données\nCréer un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/tp/tp3.html#avant-de-commencer",
    "href": "doc/tp/tp3.html#avant-de-commencer",
    "title": "Webservices et formats de données",
    "section": "",
    "text": "😱 Comme vous pouvez le constater, le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer.\nIl mélange explications complètes et manipulations pour être au maximum autosuffisant.\nVous n’allez surement pas terminer le sujet, ce n’est pas grave. Il est là pour vous aider lors du projet informatique.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nFaire des appels à un webservice à la main avec Insomnia\nFaire des appels à un webservice avec la bibliothèque python requests\nDécouvrir la page swagger d’un webservice\nManipuler différents formats de données\nCréer un webservice avec le framework python fastAPI"
  },
  {
    "objectID": "doc/tp/tp3.html#appeler-un-webservice-à-la-main",
    "href": "doc/tp/tp3.html#appeler-un-webservice-à-la-main",
    "title": "Webservices et formats de données",
    "section": "1 Appeler un webservice à la main",
    "text": "1 Appeler un webservice à la main\nLa première partie de ce TP ne nécessite pas d’écrire du code, mais seulement de faire des requêtes à un webservice en utilisant le logiciel Insomnia installé sur votre machine.\n\n1.1 Webservices\n\n\n\n\n\n\nNote\n\n\n\nWebservice : le terme webservice est un terme vaste et il serait compliqué d’en donner une définition courte (article wikipedia).\nDans le cadre du projet un webservice désigne une application accessible via le protocole HTTP (HyperText Transfer Protocol) qui respecte généralement l’architecture REST (REpresentational State Transfer).\nMais il en existe d’autre comme SOAP (Simple Objet- Access Protocol) ou RPC (Remote Procedure Call)\n\n\nEn d’autres termes, un webservice est une application accessible via le web que l’on va pouvoir requêter soit :\n\npour obtenir des ressources\npour modifier les ressources accessibles.\n\nUn webservice peut seulement avoir pour but d’être une point d’accès unique et normalisé à des données (comme une interface à une base de données), mais il peut également être une manière de contrôler un système d’informations (lancer des travaux, les mettre en attente, récupérer des résultats…)\nLes webservices utilisent le protocole HTTP qui est le protocole du web (et pas d’internet). C’est celui que vous utilisez sans le savoir avec votre navigateur web. Requêter un webservice se fait presque comme requêter une page web.\nPour cela il vous faut :\n\nl’adresse de la ressource, son Uniforme Resource Identifier (URI)\n\nc’est une notion plus générale que les Uniforme Resource Locator (URL)\n\nune méthode (GET, POST, PUT, DELETE, liste des méthodes)\net potentiellement des données\n\n\n\n1.2 Premières requêtes GET\n\nLancez le programme Insomnia (recherchez dans le menu démarrer)\nCréez une collection de requête\n\nbouton Create à droite\npuis cliquez sur votre collection\n\nCréez une nouvelle requête\n\nen appuyant sur CTRL+N\ndonnez lui un nom\nvérifiez que c’est bien une requête de type GET\n\n\nDans la barre d’adresse, testez les requêtes des webservices ci-dessous :\n\nRegardez la réponse dans la partie droite de votre écran\nQuelles sont les similarités entre les réponses ?\n\n\n1.2.1 Carbon intensity\nWebservice sur les émissions carbone du Royaume-Uni\n\nDocumentation\n\nLes endpoints\nLes schémas\n\n\nRequêtes à tester :\n\napi.carbonintensity.org.uk/intensity\napi.carbonintensity.org.uk/intensity/date/{date}\n\nen remplaçant {date} par la date de votre choix au format YYYY-MM-DD\n\n\n\n\n1.2.2 Rennes Métropole en accès libre\nWebservice Rennes Métropole en accès libre\nRécupérez les données de divers datasets :\n\nhttps://data.rennesmetropole.fr/api/explore/v2.1/catalog/datasets/&lt;dataset_id&gt;/records\n\nRemplacez &lt;dataset_id&gt; par une des valeurs ci-après\n\nmenus-cantines\neco-counter-data\nresultats-des-elections-municipales-2020-a-acigne\nAjouter à la fin de l’URI le paramètre rows\n\npour faire varier le nombre de lignes que vous recevez\najouter simplement &rows=X avec X le nombre de lignes\n\n\n\n\n1.2.3 Webservice de votre projet\n\nExplorez quelques méthodes utiles du webservice de votre projet informatique (voyez cela avec votre tuteur).\n\n\n\n\n1.3 Requêtes avancées\nAprès avoir exploré quelques webservices externes, vous allez travaillez avec un webservice hébergé à l’ENSAI spécialement créé pour ces TP.\nToujours avec Insomnia :\n\nFaites une requête avec la méthode GET sur la ressource suivante. Qu’obtenez-vous ?\n\nweb-services.domensai.ecole/attack\n\nFaites une requête avec la méthode GET sur la ressource suivante. Qu’obtenez-vous ?\n\nweb-services.domensai.ecole/attack/{identifier}\nen remplaçant {identifier} par le nom ou l’id d’une attaque que vous venez de récupérer\n\nFaites une requête avec la méthode GET sur la ressource suivante. Qu’obtenez-vous ?\n\nweb-services.domensai.ecole/attack?type_attack_id={id_type}\nen remplaçant {id_type} par un entier entre 1 et 4.\n\nFaites une requête avec la méthode GET sur la ressource suivante\n\nweb-services.domensai.ecole/attack?type_attack_name={type attack}\nen remplaçant {type attack} par special attack ou physical attack ou fixed damage ou status attack\n\nFaites une requête de type POST sur la ressource suivante\n\nweb-services.domensai.ecole/attack\nCliquez sur Body, puis JSON, coller le texte ci-dessous, puis remplacez les valeurs des attributs pour créer votre propre attaque\n\n{\n  \"name\": \"An awesome name\",\n  \"attack_type\": \"physical attack\"/\"physical attack\"/\"fixed damage\"/\"status attack\",\n  \"power\": 0,\n  \"accuracy\": 0,\n  \"element\": \"An awesome element\",\n  \"description\": \"An awesome description\"\n}\nFaites une requête avec la méthode GET sur la ressource suivante\n\nweb-services.domensai.ecole/attack/{identifier}\nen remplaçant {identifier} par le nom ou l’id de l’attaque que vous venez de créer\n\n\n\n\n1.4 Swagger\nDans votre navigateur web allez sur la page http://web-services.domensai.ecole/docs.\nCela vous amène sur la page swagger du webservice. Cette page recense tous les endpoints du webservice, et comment les utiliser. Essayez via l’interface de :\n\nmodifier une attaque\nsupprimer une attaque\nafficher une liste de pokémon\najouter un pokémon"
  },
  {
    "objectID": "doc/tp/tp3.html#webservice-en-python",
    "href": "doc/tp/tp3.html#webservice-en-python",
    "title": "Webservices et formats de données",
    "section": "2 Webservice en Python",
    "text": "2 Webservice en Python\nAujourd’hui, les plus grands consommateurs de webservices sont les machines. Nous allons voir comment automatiser des appels à un webservice en Python.\n\n\n\n\n\n\nNote\n\n\n\nAujourd’hui beaucoup d’applications web (par exemple Facebook, Netflix, Dailymotion, Uber) utilisent ce que l’on appelle des architectures “micro services”.\nLes échanges entre leurs composants applicatifs (par exemple entre leur interface homme machine (IHM) et leurs services internes) se font via des webservices à but unique. Cela permet d’avoir des modules découplés les uns des autres car ils communiquent uniquement via des requêtes HTTP, ou avec des systèmes de gestion d’évènements. Ils ont seulement à savoir comment ils doivent communiquer les uns avec les autres et pas le fonctionnement interne des autres modules.\nCela demande de bien documenter ses webservices et de gérer ÉNORMÉMENT d’applications en parallèle. Amazon, Google, Facebook peuvent se le permettre, par contre une petite entreprise de 10 employés non.\n\n\n\n2.1 La bibliothèque requests\nLe principe va rester le même que faire une requête à la main avec Insomnia. Vous allez utiliser la bibliothèque requests pour avoir seulement à remplir les parties intéressantes de vos requêtes.\nPour faire une requête GET vous allez simplement faire :\nimport requests\n\nresponse = requests.get(\"http://mon-webservice.com\") \nExécuter cette ligne de code va :\n\nEnvoyer la requête GET au serveur que vous contactez\nStockez le résultat dans la variable response\n\nCette variable response est un objet, et comme tout objet elle a des attributs et des méthodes, par exemple :\n\nresponse.text : le corps du résultat sous forme de string en laissant requests inférer l’encodage (cela fonctionne souvent)\n\nProblème : vous avez un string, et ce n’est pas le meilleur format de données à manipuler\n\nresponse.json() : le corps du résultat comme un dictionnaire.\n\nC’est ce que vous allez faire le plus souvent car le format json est un format simple à manipuler\n\nresponse.encoding : l’encoding de votre requête (utile en cas de problème d’encoding)\nresponse.status_code : le statut de la requête. les principaux sont :\n\n200 : retour général pour dire que tout c’est bien passé\n201 : ressource créée avec succès\n202 : requête acceptée, sans garantie du résultat (par exemple dans un système asynchrone)\n400 : erreur de syntaxe dans la requête\n401 : erreur, une authentification est nécessaire\n403 : la ressource est interdite (droits insuffisants)\n404 : ressource non trouvée\n405 : une mauvaise méthode http a été utilisée\n500 : erreur côté serveur\n503 : service temporairement indisponible\n\n\nPour résumer, les résultats :\n\n2xx indiquent un succès\nun résultat 4xx ou 5xx un problème\n\n\n\n2.2 Exemples d’utilisation\nLe principe sera toujours le même :\n\nVous lancez la requête\nVous vérifiez si le statut est OK\nVous récupérez le json et traitez le résultat (affichage, convertion en dataframe…)\n\n\nModèleMenus-cantines\n\n\nimport requests\nimport json\n\nresponse = requests.get(\"http://mon-webservice.com\")\n\nif response.status_code != 200:\n    raise Exception(\n        \"Cannot reach (HTTP {}): {}\".format(response.status_code, response.text)\n    )\nelse:    \n    print(json.dumps(response.json(), indent=2))       # JSON Pretty print\n\n\nimport requests\nimport pandas as pd\n\nurl = \"https://data.rennesmetropole.fr/api/explore/v2.1/catalog/datasets/menus-cantines/records?limit=20\"\nreq = requests.get(url)\n\nif req.status_code == 200:\n    raw_menus = req.json()\n    records = raw_menus.get(\"results\")\n\n    if records:\n        menus = pd.DataFrame(records)\n        print(menus)\n    else:\n        print(\"No records found.\")\nelse:\n    print(f\"Failed to retrieve data. Status code: {req.status_code}\")\n\n\n\n\n\n2.3 Mise à jour de votre dépôt git\n\n\n\n\n\n\nCaution\n\n\n\nSi vous n’avez pas le dépôt sur votre machine, créez un clone en suivant la section Clone du dépôt du TP2.\n\n\n\nOuvrez Visual Studio Code\nOuvrez votre dépôt local\n\nFile &gt; Open Folder\nAllez dans le dossier P:\\Cours2A\\UE3-Complements-info\\TP2\nCliquez une seule fois sur 📁 ENSAI-2A-complement-info-TP\nPuis sur le bouton Sélectionner un dossier\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nVérifiez que le dossier parent dans l’Explorer VS Code est ENSAI-2A-complement-info-TP\n\nL’Explorer, à gauche, permet d’explorer l’arborsence des fichiers et dossiers\n\n\n⚠️ Si le dossier parent n’est pas le bon, recommencez l’Open Folder où vous aurez de gros soucis par la suite !!!\n\n\n\nOuvrez le Git Bash intégré dans VS Code\n\nTerminal &gt; New Terminal (ou CTRL + ù)\nPassez sur la branche du TP3 et mettez-là à jour\n\nsi vous ne l’avez pas fait à la fin du dernier TP, commencer par un add et un commit\ngit checkout tp3-base\ngit pull\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPour pour vérifier que tout fonctionne :\n\nlancez les tests unitaires du package business_object\n\ndans le terminal : python -m pytest -v src/tests/test_business_object/\n\nlancez le main : python src/__main__.py\n\nS’il vous manque des packages, suivez les instructions du README.\n\n\n\n\n2.4 Mes premières requêtes en Python\n\nOuvrez le fichier /src/client/attack_client.py\nComplétez la méthode get_attack(int) qui :\n\nprend en paramètre un id d’attaque\nva chercher toutes les informations disponibles sur cette attaque\nretourne un objet de type AbstractAttack\n\n\n\n\n\n\n\n\nTip\n\n\n\nPour vous aider, observez la méthode instantiate_attack() de la classe AttackFactory (business_object).\nRegardez le fonctionnement de cette méthode et utilisez la.\n\n\n\nCréez la méthode get_all_attacks()\n\nretourne la liste de tous les attaques disponibles sous la forme d’une liste d’objets AbstractAttack\n\nVérifiez que vos 2 méthodes fonctionnent\n\nLancez les tests unitaitres du package test_client\n\n\n\n\n2.5 Les requêtes plus complexes\nPour le moment nous nous sommes concentrés sur les requêtes GET (simple lecture des données).\nMais il est bien sûr possible d’en faire d’autre. Par exemple pour les requêtes POST, PUT ou DELETE. Voici la syntaxe :\npost = requests.post(\"http://example.org\", json = {'key':'value'})\nput = requests.put(\"http://example.org\", json = {'key':'value'})\ndelete = requests.delete(\"http://example.org\")\nComme vous le voyez, les syntaxes sont très proches de la syntaxe de la méthode GET. Nous avons seulement ajouté pour certaines requêtes des données. C’est ce que vous avez fait plus tôt avec Insomnia. Pour passer des paramètres à votre requête je vous conseille néanmoins de préférer ce genre de syntaxe :\nurl = \"http://example.org\"\ndata = {'key':'value'}\npost = requests.post(url, json = data)\nFonctionnellement, c’est la même chose, mais il vaut mieux définir les éléments hors de la requête pour ne pas se perdre.\nIl est également possible de passer des entêtes http en ajoutant l’attribut headers à la fonction utilisée.\nheaders = {'accept': 'application/xml'}\nrequests.get('http://example.org', headers=headers)\n\n\n2.6 Requêtes avancées en python\nDans le module attack_client.py implémentez les méthodes suivantes :\n\ncreate_attack(AbstractAttack)\n\nprend une AbstractAttack en paramètre\ncrée une nouvelle ressource dans notre webservice\n\nupdate_attack(AbstractAttack)\n\nprend une AbstractAttack en paramètre\nmodifie la ressource associée dans notre webservice\n\ndelete_attack(AbstractAttack)\n\nprend une AbstractAttack en paramètre\nsupprime la ressource associée dans notre webservice\n\nTestez vos méthodes"
  },
  {
    "objectID": "doc/tp/tp3.html#codez-un-webservice-en-python",
    "href": "doc/tp/tp3.html#codez-un-webservice-en-python",
    "title": "Webservices et formats de données",
    "section": "3 Codez un webservice en Python",
    "text": "3 Codez un webservice en Python\n\n\n\n\n\n\nNote\n\n\n\nJusqu’à maintenant vous avez utilisé des webservices existants. Maintenant vous allez créer votre propre webservice.\n\n\nAvec les outils à disposition aujourd’hui, il est facile de faire un webservice soit même.\nIl y a trois leaders sur le marché actuellement pour faire un webservice REST en Python :\n\nDjango REST\nFlaskRESTful\nFastAPI\n\nChacun à ses avantages et inconvénients. Django est sûrement le plus complet mais le plus lourd, Flask et FastApi sont plus légers et rapides à mettre en place. Le gros avantage de FastApi est la simplicité pour créer une page swagger de documentation.\nVoici le code minimal d’un webservice REST avec FastAPI (documentation officielle)\nfrom fastapi import FastAPI\n\n# On instancie le webservice\napp = FastAPI()\n\n# Création d'un enpoint qui répond à la méthode GET à l'adresse \"/\" qui va retourne le message \"Hello World\"\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n\n# Lancement de l'application sur le le port 80\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=80)\nAppeler la ressource “/” du webservice va retourner le json : {\"message\": \"Hello World\"}\nVoici un exemple plus complet inspiré de la documentation officielle (vous voulez créer un webservice pour exposer vos todos)\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom starlette import status\nimport uvicorn\n\n# On instancie le webservice\napp = FastAPI()\n\nclass Todo(BaseModel):\n    id : int\n    content : str\n\ntodos = {1 : Todo(1,\"Step 1 : Learn python\")\n        , 2 : Todo(2,\"Step 2 : Work on the IT project\")\n        , 3 : Todo(3,\"Step 3 : ???\")\n        , 4 : Todo(4,\"Step 4 : Profit\")}\n\n# Définition du endpoint get /todo\n@app.get(\"/todo\")\nasync def get_all_todo():\n    return todos.values()\n\n# Définition du endpoint get /todo/{id_doto}\n@app.get(\"/todo/{id_toto}\")\nasync def get_todo_by_id(id_toto : int = Path(..., description = \"The `id` of the todo you want to get\")):\n    if todos.get[id_toto] :\n        return todos.get[id_toto]\n    else :\n        return JSONResponse(status_code=status.HTTP_404_NOT_FOUND)\n\n# Définition du endpoint post /todo\n@app.post(\"/todo\", todo, status_code=201)\nasync def post_todo(todo:Todo):\n    if not todos.get(todo.id):\n        return JSONResponse(status_code=status.HTTP_409_CONFLICT)\n    else :\n        todos[todo.id] = todo\n        return todo\n\n# Lancement de l'application sur le le port 8XXX avec XXX les 3 derniers numéros de votre id\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8XXX)\nCe code va créer un web service qui va répondre aux requêtes suivantes :\n\nGET host/todo : retourne toutes les tâches à faire\nGET host/todo/{todo_id} : retourne la tâche derrière l’id en paramètre\nPOST host/todo/ : ajoute la tâche passée en corps de la rêquete\n\nFastAPI sérialise pour vous les objets que vous retournez. Donc pas besoin de mettre en forme vos données. Néanmoins, pour plus de clarté, vous pouvez utiliser des classes BaseModel. Ce sont des classes qui ne vont contenir que des attributs que vous pouvez déclarer sans constructeur :\nclass Todo(BaseModel):\n    id : int\n    content : str\nCes classes peuvent être utilisées en sortie de votre webservice, comme en entrée (ligne 33). FastApi va faire pour vous tout une série de contrôle sur les types des variables et renvoyer une erreur au client si sa requête n’est pas bien formatée.\nFondamentalement un webservice est une application comme les autres, mais au lieu d’avoir une interface graphique comme on en a l’habitude en tant qu’humain, l’interface est une interface HTTP qui va accepter des requêtes et envoyer des résultats. Ainsi le diagramme de séquence des différentes couches qui vont être impliquées dans une requête GET pour récupérer une ressource va ressembler à cela nous reprenons le modèle 3 couches vu en cours.\n\n\n\n\n\nsequenceDiagram\n    participant U as User\n    participant R as Webservice\n    participant S as Service\n    participant D as DAO\n    participant B as Base de données\n    U -&gt;&gt; R : HTTP requête\n    R -&gt;&gt; S : get_by_id()\n    S -&gt;&gt; D : find_by_id()\n    D -&gt;&gt; B : requête SQL (psycopg)\n    B -&gt;&gt; D : curseur SQL (psycopg)\n    D -&gt;&gt; S : instance objet metier\n    S -&gt;&gt; R : instance objet metier\n    Note over S,R: l'objet est potentiellement altéré\n    R -&gt;&gt; U : Réponse HTTP\n\n\n\n\n\n\n\n3.1 Mon premier webservice\n\nOuvrez le fichier app.py\nLancez ce fichier\nTestez les requêtes suivantes :\n\nGET http://localhost/hello\nGET http://localhost/hello/everybody\n\nArrétez le webservice\n\nCliquez dans le terminal de VSCode puis CTRL + C\n\n\nEn utilisant la liste de personnages définie dans le fichier app.py, ajoutez les endpoints suivants :\n\nGET localhost:80/character : retournera un json contenant une liste des personnages\nPUT localhost:80/character/{id} qui modifiera le nom du personnage à l’index {id} à partir d’un body\nDELETE localhost:80/character/{id} qui supprimera l’élément à l’index {id}\n\nPour tester les endpoints nécessitant un body json, vous pouvez utiliser :\n{\n  \"nom\":\"Agneta\",\n  \"age\": 30\n}"
  },
  {
    "objectID": "doc/tp/tp2.html",
    "href": "doc/tp/tp2.html",
    "title": "Python, POO, Tests Unitaires et Documentation",
    "section": "",
    "text": "Ce TP mêle explications et phases de code.\nLes explications de ce TP ne doivent pas prendre le pas sur celles de votre intervenant. Prenez les comme une base de connaissance pour plus tard, mais préférez toujours les explications orales.\n\n\n\n\n\n\nNotions abordées\n\n\n\n\nRappels sur la POO\nTests Unitaires\nObjets métier\nPatron de conception strategy"
  },
  {
    "objectID": "doc/tp/tp2.html#avant-de-commencer",
    "href": "doc/tp/tp2.html#avant-de-commencer",
    "title": "Python, POO, Tests Unitaires et Documentation",
    "section": "",
    "text": "Ce TP mêle explications et phases de code.\nLes explications de ce TP ne doivent pas prendre le pas sur celles de votre intervenant. Prenez les comme une base de connaissance pour plus tard, mais préférez toujours les explications orales.\n\n\n\n\n\n\nNotions abordées\n\n\n\n\nRappels sur la POO\nTests Unitaires\nObjets métier\nPatron de conception strategy"
  },
  {
    "objectID": "doc/tp/tp2.html#ce-que-vous-allez-coder",
    "href": "doc/tp/tp2.html#ce-que-vous-allez-coder",
    "title": "Python, POO, Tests Unitaires et Documentation",
    "section": "1 Ce que vous allez coder",
    "text": "1 Ce que vous allez coder\nNotre jeu s’inspirera de Pokémon Unite (aucune connaissance du jeu, ni de Pokémon n’est nécessaire).\nEn quelques mots, il y aura des Pokemons qui s’affronteront lors de Battles en lançant des Attacks.\n\n1.1 Objets métier\nVous allez créer les objets métier pour un jeu Pokémon.\n\n\n\n\n\n\nObjet métier (business object)\n\n\n\nUn objet métier est une représentation d’une entité spécifique dans le contexte d’une application métier. Il encapsule les données et les comportements associés à cette entité et est souvent utilisé pour modéliser des concepts du monde réel dans le domaine de l’application.\nCela conduit à avoir des objets contenant essentiellement des attributs et très peu de méthodes autre que des getter et setter.\n\n\nPour prendre un autre exemple, voici des objets métier pour une application simple qui gère la location de vélos :\n\nVelo : Représente un vélo (id, type, modèle…)\nClient : Représente une personne (id, nom, prénom…)\nLocation : Représente une transaction de location (id, Client, Velo, debut, fin, montant…)\n\n\n\n1.2 Les objets métier de l’appli\n\nPokemon : qui ont diverses caractéristiques et statistiques\n\nun nom\nun niveau\nun type\n\nici les types sont : Attaquant, Défenseur, Polyvalant, Soutient et Rapide (et non pas : Feu, Eau, Plante…)\n\ndes statistiques contenues dans un objet Statistic défini ci-dessous\n\nStatistic : pour éviter de surcharger la classe Pokemon, leurs stats sont stockées dans un objet de la classe Statistic\n\nhp : health points\nattack, defense, speed… : qui serviront déterminer la force de ses attaques\n\nAttack : différents types d’attaques dont disposeront les Pokemons (partie 3)\nBattle : servira à faire s’affronter 2 Pokemons pour déterminer l’issue du combat (partie 4)\n\n\n\n1.3 Diagramme de classes\nVoici un diagramme de classes très simplifié des classes principales à coder lors de ces TP.\n\n\n\n\n\nclassDiagram\n  class Pokemon {\n    # _name : str\n    # _level : int\n    # _type : str\n    # _current_stat : Statistic\n    + get_pokemon_attack_coef() float\n  }\n \n  class Statistic {\n    - __hp : int\n    - __attack : int\n    - __defense : int\n    - __sp_atk : int\n    - __sp_def : int\n    - __speed : int\n  }\n\n  class Attack{\n    # _name : str\n    # _power : int\n    # _description : str\n    + compute_damage(Pokemon, Pokemon) int\n  }\n\n  class Battle{\n    - first_monstie : Pokemon\n    - second_monstie : Pokemon\n    - winner : Pokemon\n  }\n\n  Pokemon o-- Statistic : possesses\n  Pokemon o-- Attack : uses\n  Battle o..\"2\" Pokemon : call"
  },
  {
    "objectID": "doc/tp/tp2.html#clone-du-dépôt",
    "href": "doc/tp/tp2.html#clone-du-dépôt",
    "title": "Python, POO, Tests Unitaires et Documentation",
    "section": "2 Clone du dépôt",
    "text": "2 Clone du dépôt\nLe code du TP se trouve sur GitHub, vous allez créer un clone local.\n\nOuvrez Git Bash\nCréez un dossier pour stocker votre clone\n\nÀ la main ou avec cette commande : mkdir -p /p/Cours2A/UE3-Complements-info/TP2 && cd $_\n\nElle crée l’arborescence demandée (mkdir)\nPuis elle vous positionne dans ce dossier (cd)\n\n\nClonez le dépôt distant\n\ngit clone https://github.com/ludo2ne/ENSAI-2A-complement-info-TP.git\n\nFermez Git Bash si tout s’est bien passé\n\n\n2.1 Ouverture dans VSCode\n\nOuvrez Visual Studio Code\nOuvrez votre dépôt local\n\nFile &gt; Open Folder\nAllez dans le dossier P:\\Cours2A\\UE3-Complements-info\\TP1\nCliquez une seule fois sur 📁 ENSAI-2A-complement-info-TP\nPuis sur le bouton Sélectionner un dossier\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nVérifiez que le dossier parent dans l’Explorer VS Code est ENSAI-2A-complement-info-TP\n\nL’Explorer, à gauche, permet d’explorer l’arborsence des fichiers et dossiers\n\n\n⚠️ Si le dossier parent n’est pas le bon, recommencez l’Open Folder où vous aurez de gros soucis par la suite !!!\n\n\n\nOuvrez le Git Bash intégré dans VS Code\n\nTerminal &gt; New Terminal (ou CTRL + ù)"
  },
  {
    "objectID": "doc/tp/tp2.html#modélisation-et-implémentation",
    "href": "doc/tp/tp2.html#modélisation-et-implémentation",
    "title": "Python, POO, Tests Unitaires et Documentation",
    "section": "3 Modélisation et implémentation",
    "text": "3 Modélisation et implémentation\nDans un premier temps, nous allons travailler uniquement sur les Pokemons (la classe Statistic est déjà codée).\nAvant d’écrire du code, nous allons réfléchir à la meilleure conception possible pour réaliser nos Pokémons. Notre conception essaiera au maximum de respecter la règle suivante : faible couplage, forte cohésion.\nEn d’autre termes nous allons essayer de faire :\n\ndes classes les plus disjointes possibles (faible couplage) pour qu’une modification dans une classe ne nous demande pas de modifier les autres\ntout en essayant d’avoir dans chaque classe les tâches les plus liées possibles (forte cohésion).\n\n\n3.1 Première approche : le « if/elif/else »\n\nOuvrez le code de la classe Pokemon\n\nNous nous interessons à la méthode get_pokemon_attack_coef() qui va servir à déterminer la puissance de l’attaque en fonction du type de Pokémon.\n\nExpliquez pourquoi une implémentation à base de if/elif/else pour les types est une mauvaise idée ?\n\nImaginez s’il y avait plusieurs blocs de code similaires dans notre application, et que nous devions ajouter un nouveau type\n\n\n\n\n3.2 La puissance de la POO\nAu lieu d’externaliser les comportements de nos Pokemons, nous allons mettre tous leurs comportements spécifiques dans des classes filles d’une super classe Pokemon. Ceci est rendu possible grâce à deux propriétés des objets en POO :\n\nhéritage : il est possible de spécialiser une classe existante en modifiant son comportement, ou en ajoutant de nouveaux\npolymorphisme : deux fonctions peuvent avoir le même nom mais avoir des comportements différents\n\nEn plus, comme chacun de nos Pokemons va forcement être d’un type, aucun ne sera simplement de la classe Pokemon, cela nous permet de rendre cette classe abstraite. En définissant clairement notre classe abstraite nous allons avoir :\n\nUn plan pour toutes les classes qui en héritent. Cela à pour avantages de :\n\nDonner des informations sur la structuration du code\n\nPermettre de générer automatiquement les méthodes à définir\nLimiter les bug. Si on oublie une méthode, le code plante au démarrage, ce qui évite des comportements non prévus difficiles à détecter\n\nUne interface unique pour tous les types de Pokemons. Quelque soit le type du Pokemon, il sera considéré comme un AbstractPokemon partout dans le code.\n\n\n\nTransformez la classe Pokemon en classe abstraite AbstractPokemon\n\nrenommez également le fichier en abstract_pokemon.py\n\nTransformez la méthode get_pokemon_attack_coef() en méthode abstraite\nCréez les classes Attacker, Defender et AllRounder qui héritent de AbstractPokemon\nDans ces 3 classes, implémentez la méthode get_pokemon_attack_coef()\n\nVous devriez arriver à la fin à une arborescence proche de celle-ci :\nENSAI-2A-COMPLEMENTS-INFO-TP\n    └── src\n        └── business_object\n            ├── pokemon\n            │   ├── abstract_pokemon.py\n            │   ├── attacker.py\n            │   ├── defender.py\n            │   └── all_rounder.py\n            └── statistic.py\n\n\n\n\n\n\nAide\n\n\n\n\n\nPour faire une classe abstraite, utilisez le package abc.\nVoici, pour vous inspirer, un exemple de ce qui est attendu :\n\n\nabstract_personnage.py\n\nfrom abc import ABC, abstractmethod\n\nclass AbstractPersonnage(ABC):\n    def __init__(self, phrase_attaque:str, phrase_defense:str):\n        self._phrase_attaque = phrase_attaque\n        self._phrase_defense = phrase_defense\n       \n    @abstractmethod  # décorateur qui définit une méthode comme abstraite\n    def degat_attaque(self) -&gt; int:\n        pass\n\n\n\nmagicien.py\n\nfrom abstract_personnage import AbstractPersonnage\n\nclass Magicien(AbstractPersonnage):\n    def __init__(self):\n        super().__init__(\"Lance une boule de feu\", \"Utilise une barrière magique\")\n       \n    def degat_attaque(self) -&gt; int:\n        return 10\n\n\n\n\nPour vous aider, voici le diagramme de classes :\n\n\n\n\n\nclassDiagram\n  class AbstractPokemon {\n    &lt;&lt;abstract&gt;&gt;\n    # _name : str\n    # _level : int\n    # _type : str\n    # _current_stat : Statistic\n    + get_pokemon_attack_coef() float\n  }\n \n  class Statistic {\n    - __hp : int\n    - __attack : int\n    - __defense : int\n    - __sp_atk : int\n    - __sp_def : int\n    - __speed : int\n  }\n \n  AbstractPokemon &lt;|-- Attacker\n  AbstractPokemon &lt;|-- Defender\n  AbstractPokemon &lt;|-- AllRounder\n  AbstractPokemon o-- Statistic\n\n\n\n\n\n\n\n\n3.3 Testez votre code\n\nTestez la méthode get_pokemon_attack_coef() pour les classes AttackerPokemon et AllRounderPokemon.\n\npython -m unittest\n\n\nPour cela vous allez utiliser le package unittest de python.\nCe package permet de réaliser des tests unitaires dans des classes séparées. L’avantage par rapport à doctest, c’est que les tests ne “polluent” pas vos classes, et qu’il est possible de patcher certains comportements des classes.\nUn exemple de test est donné dans la classe testDefenderPokemon. Pour rappel, un test se décompose en 3 parties :\n\nGIVEN : création des objets nécessaires à la réalisation du test\nWHEN : appel de la méthode à tester\nTHEN : vérification du résultat\n\nLes classes de test seront organisées de la manière suivante, en reproduisant l’architecture de votre application :\nENSAI-2A-COMPLEMENTS-INFO-TP\n    └── src\n        ├── business_object\n        │   ├── pokemon\n        │   │   ├── abstract_pokemon.py\n        │   │   ├── attacker.py\n        │   │   ├── defender.py\n        │   │   └── all_rounder.py\n        │   └── statistic.py\n        └── test\n            └── test_business_object\n                └── test_pokemon\n                    ├── test_attacker.py\n                    ├── test_defender.py\n                    └── test_all_rounder.py\n\n\n\n\n\n\nSi vous rencontrez des problèmes d’imports\n\n\n\n\nVérifiez que le dossier parent dans l’explorer de VSCode est : ENSAI-2A-complement-info-TP\nUtilisez des chemins complets d’import plutôt que des chemins relatifs\n\nla racine des chemins est paramétrée au niveau du dossier src\nexemple : from business_object.pokemon.abstract_pokemon import AbstractPokemon\n\nCréez des fichiers __init__.py (vide)\n\ndans TOUS les dossiers que vous créez\nc’est un peu pénible mais ça peut débloquer la situation\n\n\n\n\n\nPouvez-vous tester la méthode level_up() directement sur un AbstractPokemon ?"
  },
  {
    "objectID": "doc/tp/tp2.html#lagrégation-lautre-façon-dajouter-de-la-souplesse-dans-le-code",
    "href": "doc/tp/tp2.html#lagrégation-lautre-façon-dajouter-de-la-souplesse-dans-le-code",
    "title": "Python, POO, Tests Unitaires et Documentation",
    "section": "4 L’agrégation, l’autre façon d’ajouter de la souplesse dans le code",
    "text": "4 L’agrégation, l’autre façon d’ajouter de la souplesse dans le code\nMaintenant que nos Pokémons sont faits, nous allons y ajouter les attaques.\nNotre système va devoir respecter certaines contraintes :\n\nPlusieurs types d’attaques vont coexister, chacune avec un mode de calcul de dégâts différent :\n\nDes attaques à dégâts variables séparées en 2 types :\n\nattaques “physiques” qui utilisent l’attaque et la défense des Pokémons\nattaques “spéciales” qui utilisent l’attaque spé et la défense spé des Pokémons\n\nDes attaques à dégâts fixes qui font un nombre fixe de dégâts.\n\nUn pokémon peut avoir plusieurs attaques et le type de l’attaque doit être transparent pour le pokémon.\n\n\n\n4.1 Attaques à dégâts fixes\nNous allons commencer par les attaques à dégâts fixes. Comme il y aura un autre type d’attaques, toutes les attaques hériterons de la classe abstraite AbstractAttack déjà créée. Cette classe possède la méthode abstraite compute_damage() qui devra être implémentée dans les classes filles.\n\n\n\n\n\nclassDiagram\n\n  class AbstractAttack{\n    &lt;&lt;abstract&gt;&gt;\n    # _power : int\n    # _name : str\n    # _description : str\n    + compute_damage(APkm, APkm)$  int\n  }\n\n   class FixedDamageAttack{\n    + compute_damage(APkm,APkm )  int\n   }\n \n   AbstractAttack &lt;|-- FixedDamageAttack\n\n\n\n\n\n\n\nImplémentez la classe FixedDamageAttack\n\nainsi que sa méthode compute_damage() qui retournera simplement la puissance (power) de l’attaque\n\nCréez des tests unitaires pour vérifier que tout fonctionne correctement\n\n\n\n4.2 Attaques à dégâts variables\nNous allons ensuite coder les attaques à dégâts variables. Elles utilisent la formule suivante :\n\\[Damage = \\big ( \\frac{(\\frac{2*Level}{5}+2)* Power *Att}{Def*50} +2\\big) *random* other\\_multipliers\\]\navec :\n\n\\(Att\\)​ : égal soit à l’attaque ou l’attaque spé du Pokemon attaquant\n\\(Def\\)​​ : égal soit à la défense ou défense spé du Pokemon défenseur\n\\(Power\\)​ : la valeur de puissance de l’attaque\n\\(random\\)​​ :une valeur comprise dans l’intervalle [0.85; 1]\n\\(other\\_ multipliers\\) : les autres multiplicateurs possibles, comme le coefficient d’attaque des pokémons.\n\nLa seule différence entre attaque physique et spéciale vient des coefficients \\(Att\\) et \\(Def\\), le reste de la formule des dégâts est identique. Nous allons donc utiliser le patron de conception template method, dont voici la modélisation UML dans notre cas :\n\n\n\n\n\nclassDiagram\n\n  class AbstractAttack{\n    &lt;&lt;abstract&gt;&gt;\n    # _power : int\n    # _name : str\n    # _description : str\n    + compute_damage(APkm, APkm)$  int\n  }\n\n   class FixedDamageAttack{\n    + compute_damage(APkm,APkm )  int\n   }\n\n  class AbstractFormulaAttack{\n    &lt;&lt;abstract&gt;&gt;\n    -get_attack_stat(APkm)$  float\n    -get_defense_stat(APkm)$  float\n    +compute_damage(APkm,APkm)  int\n  }\n \n  class PhysicalFormulaAttack{\n    -get_attack_stat(APkm)  float\n    -get_defense_stat(APkm)  float\n  }\n \n  class SpecialFormulaAttack{\n    -get_attack_stat(APkm)  float\n    -get_defense_stat(APkm)  float\n  }\n \n   AbstractAttack &lt;|-- FixedDamageAttack\n   AbstractAttack &lt;|-- AbstractFormulaAttack\n   AbstractFormulaAttack &lt;|-- SpecialFormulaAttack\n   AbstractFormulaAttack &lt;|-- PhysicalFormulaAttack\n\n\n\n\n\n\nLa classe AbstractFormulaAttack va contenir les méthodes :\n\ncompute_damage(). Cette méthode va contenir la formule de calcul des dégâts\n\nmais en appelant les méthodes get_attaque_stat() et get_defense_stat() pour savoir quelle statistique utiliser\n\nget_attack_stat() et get_defense_stat() (abstraites). Ces méthodes devront être implémentées dans les classes filles pour déterminer quelles statistiques utiliser.\n\n\n\nImplémentez les 3 nouvelles classes et créez des tests pour vérifier que tout fonctionne correctement"
  },
  {
    "objectID": "doc/tp/tp2.html#architecture-finale",
    "href": "doc/tp/tp2.html#architecture-finale",
    "title": "Python, POO, Tests Unitaires et Documentation",
    "section": "5 Architecture finale",
    "text": "5 Architecture finale\n\n\n\n\n\n\nBonus\n\n\n\nSi vous avez le temps !\n\n\nNous allons maintenant rattacher les bouts pour créer notre architecture finale :\n\n\n\n\n\nclassDiagram\n  class AbstractPokemon {\n    &lt;&lt;abstract&gt;&gt;\n    # _current_stat : Statistique\n    # _level : int\n    # _name : str\n    # _attack_list : List~AbstractAttack~\n    +get_pokemon_attack_coef()$  float\n    +level_up() None\n  }\n \n  class Statistique {\n    - hp : int\n    - attaque : int\n    - defense : int\n    - spe_atk : int\n    - spe_def : int\n    - vitesse : int\n  }\n   \n  class BattleService {\n    + resolve_battle(APkm, APkm) : Battle\n    + get_order(APkm, APkm)\n    + choose_attack(APkm) : AAttack\n  }  \n  \n  class Battle{\n    - first_monstie : APkm\n    - second_monstie : APkm\n    - winner : APkm\n    - rounds : List&lt;Round&gt;\n  }\n\n  class Round{\n    attacker: APkm\n    defender: APkm\n    dealt_damage: int\n    attack_description: str\n  }\n  BattleService ..&gt;\"2\" AbstractPokemon : use\n  AbstractPokemon &lt;|-- Attacker\n  AbstractPokemon &lt;|-- Defender\n  AbstractPokemon &lt;|-- AllRounder\n  Statistique *-- AbstractPokemon\n\n  Battle .. BattleService\n  Battle .. Round\n \n  class AbstractAttack{\n    &lt;&lt;abstract&gt;&gt;\n    # _power : int\n    # _name : str\n    # _description : str\n    +compute_damage(APkm, APkm)$ int\n  }\n\n  class FixedDamageAttack{\n    + compute_damage(APkm,APkm )  int\n  }\n\n  class AbstractFormulaAttack{\n    &lt;&lt;abstract&gt;&gt;\n    -get_attack_stat(APkm)$  float\n    -get_defense_stat(APkm)$  float\n    + compute_damage(APkm,APkm ) int\n  }\n \n  class PhysicalFormulaAttack{\n   -get_attack_stat(APkm)$  float\n   -get_defense_stat(APkm)$  float\n  }\n \n  class SpecialFormulaAttack{\n    -get_attack_stat(APkm)  float\n    -get_defense_stat(APkm)  float\n  }\n \n  AbstractAttack &lt;|-- FixedDamageAttack\n  AbstractAttack &lt;|-- AbstractFormulaAttack\n  AbstractFormulaAttack &lt;|-- SpecialFormulaAttack\n  AbstractFormulaAttack &lt;|-- PhysicalFormulaAttack\n  BattleService &gt;.. AbstractAttack  : use\n  AbstractPokemon o--&gt;\"0..*\" AbstractAttack\n\n\n\n\n\n\n\n\nImplémentez le diagramme de classes ci-dessus\nTestez votre code en écrivant de nouveaux tests unitaires\n\nCette architecture permet de décorréler les attaques des pokémons et de spécifier le comportement des attaques au fur et à mesure des héritages. Les avantages sont :\n\nPour la classe AbstractPokemon, toutes les attaques sont des AbstractAttack. Tant qu’elles exposent la méthode compute_damage() notre programme va fonctionner. On peut ainsi facilement ajouter de nouveaux types d’attaques sans problème.\nUn Pokémon peut avoir des attaques de tous les types\nNous pouvons ajouter un système d’état comme la paralysie ou le poison assez facilement. Il faut pour cela modifier la classe AbstractAttack et les classes qui en héritent. Cela sera potentiellement long, mais ne demande pas de toucher à la partie “Pokémon” de notre architecture.\nUne personne pourrait se concentrer sur la création des Pokémons alors qu’une autre pourrait se concentrer sur celles des attaques sans difficulté. Les deux parties du code sont relativement indépendantes, la seule zone de couplage sont les classes AbstractPokemon et AbstractAttack, qui servent avant tout à définir ce qui doit être fait par les classes filles et ce qui est accessible à l’extérieur.\n\nLe fait d’externaliser le comportement des attaques dans des classes spécifiques puis de les lier aux Pokémons via une relation d’agrégation assez souple qui permet de changer dynamiquement les attaques d’un Pokémon est le patron de conception strategy.\n\n\n\n\n\n\n\nCorrection\n\n\n\nVous avez la possibilité de consulter la correction soit :\n\nen changeant votre dépôt local de branche\nen consultant la branche adéquat sur le dépôt distant\n\nVoici quelques commandes git utiles pour changer de branche :\n# Lister toutes les branches\ngit branch -a\n\n# Avant de changer de branche, créez un point de sauvegarde de votre travail\ngit add .\ngit commit -m \"&lt;message&gt;\"\n\n# changer de branche\ngit checkout &lt;nouvelle_branche&gt;   # dans le terminal, la branche courante est indiquée entre ()\ngit checkout -                    # pour retourner à la branche précédente"
  },
  {
    "objectID": "doc/projet/anciens-sujets.html",
    "href": "doc/projet/anciens-sujets.html",
    "title": "Anciens sujets",
    "section": "",
    "text": "Tuteur : Cyriel Mallart\n\n\nTu veux parler musique avec des gens qui comprennent tes goûts ? Avec (NomDeVotreWebService), c’est facile ! Enregistre-toi, dis-nous ce que tu écoutes, et on t’envoie des gens qui vibrent au même rythme que toi !\nVous allez créer dans ce projet une API qui met en relation des gens, basée sur leurs goûts musicaux. Un.e utilisateur.ice s’inscrira, sélectionnera et enregistrera ses morceaux, artistes et genres préférés. L’API Deezer vous donnera accès à toutes les caractéristiques de ces morceaux. A partir de cela, vous utiliserez une touche d’IA pour trouver celui ou celle qui a le profil le plus similaire, et lui enverrez une petite notification pour mettre tout le monde en contact. Si ça ne matche pas, ou si l’utilisateur.ice veut découvrir de nouvelles personnes, on trouve le profil similaire le plus proche en excluant les gens déjà en contact ou refusés.\n\n\n\n\ngestion de plusieurs utilisateurs\nenregistrement des morceaux, artistes, genres, etc. utiles en base de données\nappels à l’API Deezer pour obtenir les informations sur les morceaux\nobtention, stockage et mise à jour des profils similaires\ngestion des notifications de mise en contact : accepté, refusé, notification à tous les utilisateur.ices impliquée.e.s\n\n\n\n\n\nauthentification par mot de passe\ngestion des “contacts” d’un utilisateur : déletion, signalement, création de groupes\nrecommendation de nouveaux morceaux basés sur ceux des contacts\nplaylists crées par fusion des morceaux des utilisateurs, export\nsélection ergonomique des morceaux (suggestions, autocomplétion, …)\nalgorithme de recommendation plus élaboré\n…\ntout autre idée qui vous semble logique, intéressante, sous réserve qu’elle soit faisable techniquement dans les temps impartis\n\n\n\n\n\nBackend : FastAPI\nFront end : Jinja2 (templates HTML dans FastAPI). D’autres choix sont possibles (React.js, Vue.js, …) si vous les maîtrisez, mais attention, votre tuteur ne pourra vous suivre que sur React.js, et la courbe d’apprentissage est raide.\nBDD : MongoDB (NoSQL) , Neo4j (NoSQL, graphe) ou Postgres (SQL, disponible à l’ENSAI)\nAPI Deezer : https://developers.deezer.com/api\n\n\n\n\n\nCréer une appli de messagerie : le but de ce projet est uniquement une mise en contact où l’on partagera une adresse mail par exemple\nSe casser la tête sur un algorithme super-classe : les performances de l’algorithme de recommendation ne sont pas le point important ici, ne passez pas tout votre projet dessus. Si vous avez envie d’essayer une idée d’algorithme, allez-y, même si elle ne fonctionne pas bien au final. Sinon, votre tuteur pourra vous aider sur un algorithme de base\nUne interface réctive super-évoluée avec des graphiques et des previews de morceaux : on attend une interface basique et simple, c’est-à-dire, des pages HTML statique écrit en noir sur fond blanc avec un ou deux boutons.\n\n\n\n\n\nTuteur : Colin Leverger Objectif\nVous êtes un groupe d’étudiants de l’ENSAI en deuxième année, et souhaitez développer une application en ligne de commande pour faciliter vos futures recherches de stage. Votre startup s’appelle ……… et votre application ………. .\nVotre application permettra à un utilisateur de rechercher des stages de son choix sur un ou plusieurs sites de recherche de stage (Hellowork, welcometothejungle, …). Les stages peuvent être publiés dans différentes spécialités (informatique, data analyse, machine learning, …). S’il est authentifié, l’utilisateur pourra sauvegarder dans l’application les stages qui l’intéressent dans sa « liste d’envies », et pourquoi pas répondre aux offres plus facilement (automatiquement, ou au minimum récupérer les contacts vers les employeurs). La navigation et les recherches de tout utilisateur seront historisées.\nDeux types d’utilisateurs authentifiés pourront cohabiter : utilisateur « élève » et utilisateur « professeur ». Un « administrateur » de l’app pourra également gérer l’application et les utilisateurs. Un utilisateur non authentifié sera par défaut dans la catégorie « élève ». On peut imaginer que les besoins des professeurs et des élèves seront différents…\nL’application permettra aux utilisateurs authentifiés de gérer leurs comptes, préférences, mots de passe, listes, et à tous les utilisateurs d’exporter/importer leurs recherches courantes (dans le format texte que vous jugerez bon).\nLes utilisateurs pourront également géo localiser les stages par rapport à leur position actuelle (temps de trajet,…).\nFonctionnalités requises (numérotées, mais non ordonnées)\n\nF1 : la recherche de résultats sur un site que vous choisirez (Hellowork, welcometothejungle, …)\nF2 : authentification et gestion du profil utilisateur/profil administrateur\nF3 : gestion de l’import/export de données au format choisi\nF4 : gestion de l’historique des recherches\nF5 : recherche par catégorie/filtre de recherches\n\nFonctionnalités optionnelles\n\nFO1 : lancer des recherches sur plusieurs sites en parallèle\nFO2 : géo localisation de l’utilisateur et des annonces/distance entre l’utilisateur et l’annonce\nFO3 : alertes automatiques si de nouvelles annonces de stage remplissant les critères sont publiées\nFO4 : … à vous de jouer !\nNOTE : ce sujet regorge de « … ». En effet, une participation active est vivement recommandée et vos idées, pour rendre votre projet unique, sont les bienvenues !\n\nFonctionnalités non notées (et déconseillées)\n\nles statistiques/modèles complexes que vous pourrez imaginer (une moyenne, OK, mais un modèle expo logarithmique quantique d’ordre 10, non)\nl’interface graphique type GUI (AUCUN point bonus sur une très jolie interface !)\n\n\n\n\nTuteur : Maxence Lagalle\n\n\nGreenStream est une API REST qui permet de réduire l’impact carbone d’un service de VOD (Netflix, Amazon Prime, Disney+…). Pour le consommateur, elle calcule l’impact carbone d’une vidéo à partir de sa durée et de sa résolution, en utilisant le modèle “1byte” de The Shift Project ou d’autres modèles d’estimation. Pour le fournisseur de VOD, elle aide à choisir des serveurs dans la meilleure zone géographique des fournisseurs Cloud en fonction de l’impact carbone de la production d’électricité. Ces données sur l’impact carbone sont fournies par l’API ElectricityMaps. GreenStream est un projet innovant et écologique, qui accompagne dans la transition vers des services de VOD plus vert et plus responsables.\nElectricityMaps est partenaire de GreenStream et offre un accès à la version payante de son API pour toute la durée du projet.\n\n\n\n\nEstimation de l’empreinte carbone d’une vidéo selon le modèle “1byte” de The Shift Project\n\nPrise en compte de la localisation géographique du fournisseur de VOD et de l’utilisateur\nPrise en compte de la durée et de la qualité de la vidéo, du type de connexion et du matériel utilisé pour regarder la vidéo\nUtilisation des données d’impact carbone en temps réel fournies par l’API ElectricityMaps\n\nRecommandation du meilleur service Cloud pour diffuser une vidéo à un utilisateur\n\nChoix du service Cloud à l’impact carbone le plus faible en fonction de la zone géographique de l’utilisateur\nDétermination des services Cloud éligibles en fonction de la localisation de l’utilisateur (ceux dans le même pays ou un pays limitrophe)\nUtilisation des données de prévision de l’impact carbone pour la durée de la vidéo fournies par l’API ElectricityMaps\n\nGestion de l’offre des fournisseurs Cloud\n\nImplémentation de la liste des zones géographiques proposées par au moins deux fournisseurs Cloud (AWS, GCP, Azure…)\nUtilisation d’une base de données SQL pour stocker les informations sur les services Cloud disponibles\n\nInformation sur l’état du service GreenStream\n\nFourniture d’un service permettant de s’assurer que GreenStream fonctionne correctement et que son lien avec ElectricityMaps est actif\n\n\n\n\n\n\nSimulation de l’impact carbone d’un changement de comportement\n\nCréation d’un service qui permet à l’utilisateur de simuler l’impact carbone qu’il aurait s’il changeait certains paramètres de sa consommation de vidéos, tels que la qualité, la durée, le type de connexion ou le matériel utilisé\nUtilisation du modèle “1byte” ou d’autres modèles d’estimation pour calculer l’empreinte carbone selon les différents scénarios\n\nUtilisation de modèles d’estimation de l’empreinte carbone plus sophistiqués\n\nPrise en compte d’une consommation électrique variable selon les fournisseurs Cloud\nUtilisation d’autres modèles d’estimation publiés, tels que le modèle “Carbon Footprint of Video Streaming” de Carbon Trust ou d’autres modèles à rechercher\n\nIntégration de critères avancés dans la recommandation du service Cloud\n\nPrise en compte du coût financier des services Cloud et d’un arbitrage entre le coût et l’empreinte carbone\nUtilisation d’un graphe de connexions entre les zones pour déterminer la liste des services Cloud éligibles pour diffuser une vidéo à un utilisateur\n\nSuivi de la consommation totale du service et de son empreinte carbone\n\nEnregistrement SQL de la consommation de vidéos : durée, zone géographique de l’utilisateur, service Cloud associé, empreinte carbone\nAccès aux données brutes ou à une synthèse statistique via l’API\n\nFonctionnement en mode dégradé\n\nUtilisation de données historiques d’intensité carbone de la production d’électricité en cas de défaillance de l’API ElectricityMaps\n\n\nL’initiative est fortement encouragée dans ce projet, et d’autres idées de fonctionnalités avancées ou d’amélioration des fonctionnalités de base peuvent être proposées par les élèves.\n\n\n\n\nTuteur : Thierry Mathé\n\n\nLe ministère des Finances met à disposition un fichier des prix des carburants dans les stations françaises. Ce fichier au format XML contient entre autre pour chaque station, ses coordonnées, son adresse, ses heures d’ouvertures, le prix des carburants disponibles (mais l’enseigne de la station n’y figure pas). Le but du projet de créer une API (application programming interface) qui exploite les données contenues dans ce fichier. Cette API devra permettre de :\n\nConsulter la liste des stations se trouvant à proximité d’un point donné il sera aussi possible de préciser le carburant.\nCréer et mettre à jour des listes de stations qu’il sera possible de consulter par exemple pour voir les prix sur les stations se trouvant sur un trajet régulier.\n\nA chaque requête, l’API doit s’assurer qu’elle utilise bien les dernières données disponibles et au besoin télécharger les nouvelles données disponibles sur le site (mises à jour toutes les 10 minutes) : https://donnees.roulez-eco.fr/opendata/instantane\n\n\n\n\n\nLes paramètres donnés à cette requête sont les coordonnées (longitude et latitude) d’un point, une distance en km et un type de carburant. L’API va alors extraire l’ensemble des stations se trouvant dans la zone ainsi définie et disponsant du carburant indiqué.\nLa réponse sera données au format JSON et contiendra:\n\nles parmètres de la requête\nla date et l’heure d’exécution\nle nombre de stations trouvées\nla liste des stations : pour chaque station on aura:\n\nl’id, les coordonnées et l’adresse de la station\nle prix du carburant\n\n\n\n\n\nLa gestion des listes de stations doit permettre de :\n\nCréer une liste: le paramètre en entrée est un nom donné par l’utilisateur. La requête revoie un identifiant qui devra être passé comme paramètre pour toutes les autres actions,\nConsulter la liste des listes crées: aucun paramètre, la requête renvoie les couple identifiant-nom des listes défines,\nAjouter une une plusieurs stations à un liste: les paramètres en entrée sont l’identifiant de la liste et le ou les identifiants des stations à ajouter,\nSupprimer une liste: le paramètre à donner est l’identifiant de la liste,\nConsulter la liste: le paramètre à donner est l’identifiant de la liste. La requête revoie les informations au format JSON qui contiennent:\n\nl’identifiant et le nom de la requête\nla date et l’heure d’exécution\nle nombre de stations contenues dans la liste\nla liste des stations. Pour chaque station on aura:\n\nl’id, les coordonnées et l’adresse de la station\nle prix du carburant\n\n\n\n\n\n\n\nVoici quelques idées de fonctions avancées pour les groupes qui auraient effectué l’ensemble des fonction de bases. Toutes autres idées pourra bien sûr être proposées en cours de projet.\n\n\n\nPossibilité de passer comme parmètre une adresse au lieu de coordonnées\nPossibilité de préciser l’heure de passage et de ne conserver que les stations ouvertes à cette heure.\n\n\n\n\n\nPossilité de retirer une ou plusieur stations d’une liste\nImposer une identification pour consulter les listes. Chaque utilisateurs n’aurait alors accés qu’à ses liste.\n\n\n\n\n\n\nTuteur : Aloïs DE OLIVEIRA\n\n\nLeague Of Legends (connu sous le sigle LoL) est un jeu video, plus précisément un Multiplayer Online Battle Arena (MOBA), développé par Riot. LoL comptait plus de 100M de joueurs actifs en 2022 et le chiffre n’est pas voué à diminuer dans les prochaines années. Cet engouement force Riot à se renouveler en créant de nouveaux champions, de nouveaux items, des ajustements sur l’équilibrage du jeu (appelés patch). Les joueurs apprécient donc fortement les outils leur permettant d’avoir des analyses simples mais rapides afin de les accompagner et aider dans leurs choix.\nCe sujet ne nécessite pas de connaître le jeu ou d’y avoir déjà joué. Au contraire, il vous arrivera souvent de devoir dans un premier temps comprendre un nouveau contexte métier et vos données en entrée.\n\n\n\n\n\nVous êtes mobilisés afin de mettre en place une solution capable de fournir aux joueurs les premières informations essentielles. Ces analyses seront simples mais nécessiteront d’analyser tout l’historique des parties que vous aurez à votre disposition, et donc que vous stockerez. Votre solution a pour but d’être pensée dans une logique d’amélioration continue. Ainsi un code documenté utilisant les principes de la Programmation Orientée Objet (POO) est attendu.\n\n\n\nLoL met à disposition une API afin de permettre aux personnes qui le souhaitent de pouvoir utiliser leurs données. Une explication du fonctionnement de l’API de LoL et de l’obtention des données sera effectuée.\n\n\n\n\nLors de ce projet, vous aurez des fonctionnalités obligatoires et avancées. Il est nécessaire de se focaliser sur ces premières et d’entreprendre les secondes que lorsque vous avez une base solide pour répondre à l’ensemble des fonctionnalités obligatoires.\n\n\n\nNiveau base de données\n\n\n\nCréation d’une base de données de votre choix (SQL/NoSQL) qui vous servira à stocker l’historique des parties. Le modèle de données est important, il doit être adapté afin de faciliter toutes modifications.\nCréation d’un pipeline de données. L’ensemble des étapes de la collecte au chargement, en passant par la transformation doivent être le plus réutilisable possible.\nL’ensemble des tâches doit être effectué en Python (de la création, à l’insertion et aux éventuelles modifications).\n\nNiveau API\nPour la réalisation de ce projet, vous devrez réaliser une API (à l’aide FastAPI ou Flask) qui vous permettra de renvoyer les différents résultats souhaités. Ces résultats seront à retourner sous format json. Il existera différentes classes, décrites ci-dessous, avec chacune ses méthodes. Toutes les méthodes présentes dans les descriptions des classes sont à titre indicatif. N’hésitez pas à être force de proposition.\n\n\n\n\nCela ne nécessitera aucune connexion.\nCette classe devra comporter certaines méthodes permettant de fournir des statistiques globales sur le jeu, telles que :\n\nAfficher les statistiques d’un champion : le nombre de games jouées, le winrate, le gold lead à Xmin, etc.\nTrier les champions (globalement ou par lane) selon le critère au choix parmi : nombre de games jouées, le winrate, etc.\n\n\n\n\n\n\nCela nécessitera de se connecter à un compte user.\nCette classe héritera de l’ensemble des méthodes propres à la classe invité.\nCette classe devra comporter certaines méthodes permettant de fournir des statistiques liées au compte en question, telles que :\n\nAfficher les statistiques globales/par lane/par champion du compte : le nombre de games jouées, le winrate, le kda, etc.\n\n\n\n\n\n\nCela nécessitera de se connecter à un compte admin. 1 seul sera nécessaire.\nCette classe héritera de l’ensemble des méthodes précédentes.\nCette classe aura pour but de permettre à l’admin de pouvoir gérer les comptes et les données.\n\n\n\n\n\nLes fonctionnalités avancées sont triées selon le niveau de difficulté , cependant vous êtes totalement libres sur les fonctionnalités avancées que vous souhaitez réalisées.\n\n\nJusqu’ici vous utilisez les données mises à disposition sans enrichissement. Cette fonctionnalité aura pour but de permettre à l’admin de pouvoir ajouter des nouvelles parties récentes.\nLes différents points attendus sont :\n\nGestion de la clé (permettant l’accès à l’API de Riot) : au choix entre en brute en paramètre d’entrée ou permettre d’aller la récupérer directement sur le site depuis l’API.\nRécupération des données depuis l’API de Riot selon certains critères de sélection.\nAjout des données dans vos bases de données.\nAjout de la fonctionnalité au sein de votre API.\n\nLes critères de sélection seront libres et donc proposés par votre groupe, en fonction de ce que l’API vous permettra de faire.\n\n\n\nLe workflow Gitflow vous permet de faciliter la gestion des branches et la séparation des différentes tâches.\nUtilisez le framework Gitflow pour la gestion de votre projet.\n\n\n\nConteneuriser votre application aura pour but de faciliter son déploiement et son partage. En effet, cela permettra de réunir le code et ses composants (frameworks, bibliothèques, etc) dans un conteneur. Il sera alors possible d’exécuter le conteneur sans se soucier des différentes dépendances (l’installation des bibliothèques avec la bonne version par exemple).\nUtilisez l’outil Docker pour conteneuriser votre application.\n\n\n\nPour le moment, vous ne faites remonter que des statistiques descriptives. Ici il s’agit de mettre à profit l’ensemble des données disponibles pour permettre à l’utilisateur de prédire l’équipe gagnante en fonction des 5 champions de chaque équipe. L’enjeu de cette fonctionnalité n’est pas de vous faire trouver le meilleur modèle de prédiction mais d’ajouter une fonctionnalité à votre API basé sur ce modèle. Vous ne serez donc aucunement noté sur la qualité des prédictions.\nLes différents points attendus sont :\n\nChoix d’un modèle de prédiction : vous ne serez certes pas noté sur la qualité des prédictions mais une courte réflexion sur le choix du modèle est attendue.\nEntrainement dudit modèle : vous êtes libres sur le choix des librairies.\nSérialisation du modèle : vous devez sauvegarder votre modèle.\nAjout de la fonctionnalité au sein de votre API.\n\n\n\n\n\n\nTuteur : Sophie HERBERT, ENSAI 2021\n\n\nRecommander des produits meilleurs pour la santé selon plusieurs critères !\nVous allez explorer la célèbre API Open Food Facts qui regroupe des produits alimentaires divisés en plusieurs catégories (Viandes, Snacks, Aliments d’origine végétale etc.) et pour lesquels nous avons un grand nombre de variables renseignées par la communauté : nutriscore, nova score, ecoscore, taux de protéine, taux de sucre, énergie en kcal… L’objectif de l’application est d’utiliser un échantillon de ces données en vous concentrant sur quelques produits de quelques catégories que vous aurez choisis, de les afficher tel un catalogue et de pouvoir les trier selon le critère sélectionné : le moins de sucre possible, le meilleur eco-score, la plus faible valeur énergétique… En allant sur une fiche « Produit », vous afficherez le meilleur produit de la même catégorie selon ce critère. Un système d’identification devra être mis en place. Si l’utilisateur est identifié, pourquoi pas sauvegarder ses articles dans un panier virtuel ?\n\n\n\nLes fonctionnalités requises :\n\nF1 : affichage simple en console d’un catalogue de produits alimentaires par catégorie de produit\nF2 : ordonner les produits selon un critère nutritionnel\nF3 : sélection d’une fiche « Produit » recommandant un autre produit de la même catégorie avec un critère meilleur que le produit consulté (si meilleur il y a)\nF4 : système d’authentification et de gestion du profil (changement de mot de passe…)\n\n\n\n\n\nF5 : sauvegarde de produits dans un panier\n…\n\nDes fonctionnalités optionnelles pourront être développées à votre guise et selon votre inspiration sur le sujet ! Les données Open Food Facts étant très riches, d’autres axes d’analyses peuvent être creusés… Note : l’interface GUI, la mise en place de modèles statistiques, la gestion des valeurs manquantes ne seront pas inclues dans la notation.\n\n\n\n\n\n\n\n\n\nCe projet a pour objectif de créer une application qui facilite la recherche d’emploi dans le secteur de la technologie en utilisant l’API REST gratuite de Adzuna , qui fournit des informations sur les offres d’emploi dans divers secteurs à travers le monde. L’application permettra aux utilisateurs de rechercher des emplois, de filtrer les résultats, de suivre leur progression dans leurs candidatures et de recevoir des alertes pour les nouvelles offres correspondant à leurs compétences.\n\n\n\n\nIntégrer les données de l’API Adzuna dans une application conviviale.\nPermettre aux utilisateurs de rechercher des offres d’emploi par mots-clés, localisation et catégories.\nFournir des fonctionnalités de suivi des candidatures, y compris la gestion de CV et de lettres de motivation.\nEnvoyer des alertes aux utilisateurs pour les nouvelles offres correspondant à leurs critères.\nMettre en place un système de profil pour les chercheurs d’emploi.\n\n\n\n\nLes fonctionnalités requises :\n\nF1 : Intégrer les données de l’API Adzuna pour afficher des offres d’emploi dans divers secteurs.\nF2 : Permettre aux utilisateurs de rechercher des emplois en utilisant divers critères.\nF3 : Permettre aux utilisateurs de créer des profils de chercheurs d’emploi.\n\n\n\n\n\nF4 : Fournir des fonctionnalités de suivi des candidatures et de gestion de documents(CVs, lettres de motivation…).\nF5 : Envoyer des alertes aux utilisateurs pour les nouvelles offres correspondant à leurs compétences.\nF6:…\n\n❗ Vous avez la liberté de développer des fonctionnalités optionnelles selon votre inspiration. Aucune interface graphique n’est demandée dans ce sujet, toute interaction avec l’application devra se faire via l’invité commande ( terminal / cmd ). Si vous souhaitez tout de même le faire, cela ne saurait se substituer aux fonctionnalités demandées.\n\n\n\n\n\n\n\n\n\nCe projet vous propose d’explorer les données mises à disposition par OpenData Paris. En particulier, vous allez jouer avec les données présentant la disponibilité des Velib’ en temps réel. La solution proposera des services pour permettre aux utilisateurs de trouver plus facilement un vélo, ou pour aider la ville de Paris à mieux gérer son parc de vélos. Pour cela, vous aurez besoin de capturer et de stocker les données disponibles sur l’API d’OpenData Paris (et leur historique!) dans une base de données, puis de créer à votre tour une API pour y mettre à disposition vos services.\n\n\n\n\nF1 : obtenir le nom de la station la plus proche ayant au moins un vélo disponible à partir de coordonnées géographique. Vous pouvez utiliser l’API d’Etalab pour obtenir des coordonnées géographiques à partir de d’une adresse.\nF2 : obtenir le nom de la station la moins fréquentée sur une période de temps données.\nF3 : obtenir le numéro de l’arrondissement le plus fréquenté sur une période de temps données.\n\n\n\n\n\nF01 - Recherche de vélo en temps réel : Un utilisateur utilise la F1 pour trouver un vélo proche de lui. En arrivant sur place: mauvaise surprise, le vélo lui ai passé sous le nez. Pour éviter ce genre de désagréaments, le nom de la station la plus proche sera actualisé en temps réel. Pour cela, vous pouvez améliorer la F1 en proposant une connexion basé sur un WebSocket.\nFO2 - Déploiement : Pour faciliter le déploiement de votre solution, conteneurisez-la en utilisant Docker Compose.\nFO3 - CRUD : Permettez aux utilisateurs de communiquer directement avec votre base de données. Pour cela, complétez votre API en proposant des nouvelles routes permettant de :\n\nrécupérer toutes les informations d’une station\nsupprimer toutes les informations d’une station\nmettre à jour le nom d’une station\najouter une nouvelle station\n\n\n\n\n\nPour répondre aux fonctionnalités demandés, vous aurez certainement besoin de vous armer de:\n\nune librairie pour construire des APIs (conseillé: FastAPI)\nune solution de base de données (conseillé: SQLite)\nun outil de versioning de code en équipe (Gitlab ou Github)"
  },
  {
    "objectID": "doc/projet/anciens-sujets.html#section",
    "href": "doc/projet/anciens-sujets.html#section",
    "title": "Anciens sujets",
    "section": "",
    "text": "Tuteur : Cyriel Mallart\n\n\nTu veux parler musique avec des gens qui comprennent tes goûts ? Avec (NomDeVotreWebService), c’est facile ! Enregistre-toi, dis-nous ce que tu écoutes, et on t’envoie des gens qui vibrent au même rythme que toi !\nVous allez créer dans ce projet une API qui met en relation des gens, basée sur leurs goûts musicaux. Un.e utilisateur.ice s’inscrira, sélectionnera et enregistrera ses morceaux, artistes et genres préférés. L’API Deezer vous donnera accès à toutes les caractéristiques de ces morceaux. A partir de cela, vous utiliserez une touche d’IA pour trouver celui ou celle qui a le profil le plus similaire, et lui enverrez une petite notification pour mettre tout le monde en contact. Si ça ne matche pas, ou si l’utilisateur.ice veut découvrir de nouvelles personnes, on trouve le profil similaire le plus proche en excluant les gens déjà en contact ou refusés.\n\n\n\n\ngestion de plusieurs utilisateurs\nenregistrement des morceaux, artistes, genres, etc. utiles en base de données\nappels à l’API Deezer pour obtenir les informations sur les morceaux\nobtention, stockage et mise à jour des profils similaires\ngestion des notifications de mise en contact : accepté, refusé, notification à tous les utilisateur.ices impliquée.e.s\n\n\n\n\n\nauthentification par mot de passe\ngestion des “contacts” d’un utilisateur : déletion, signalement, création de groupes\nrecommendation de nouveaux morceaux basés sur ceux des contacts\nplaylists crées par fusion des morceaux des utilisateurs, export\nsélection ergonomique des morceaux (suggestions, autocomplétion, …)\nalgorithme de recommendation plus élaboré\n…\ntout autre idée qui vous semble logique, intéressante, sous réserve qu’elle soit faisable techniquement dans les temps impartis\n\n\n\n\n\nBackend : FastAPI\nFront end : Jinja2 (templates HTML dans FastAPI). D’autres choix sont possibles (React.js, Vue.js, …) si vous les maîtrisez, mais attention, votre tuteur ne pourra vous suivre que sur React.js, et la courbe d’apprentissage est raide.\nBDD : MongoDB (NoSQL) , Neo4j (NoSQL, graphe) ou Postgres (SQL, disponible à l’ENSAI)\nAPI Deezer : https://developers.deezer.com/api\n\n\n\n\n\nCréer une appli de messagerie : le but de ce projet est uniquement une mise en contact où l’on partagera une adresse mail par exemple\nSe casser la tête sur un algorithme super-classe : les performances de l’algorithme de recommendation ne sont pas le point important ici, ne passez pas tout votre projet dessus. Si vous avez envie d’essayer une idée d’algorithme, allez-y, même si elle ne fonctionne pas bien au final. Sinon, votre tuteur pourra vous aider sur un algorithme de base\nUne interface réctive super-évoluée avec des graphiques et des previews de morceaux : on attend une interface basique et simple, c’est-à-dire, des pages HTML statique écrit en noir sur fond blanc avec un ou deux boutons.\n\n\n\n\n\nTuteur : Colin Leverger Objectif\nVous êtes un groupe d’étudiants de l’ENSAI en deuxième année, et souhaitez développer une application en ligne de commande pour faciliter vos futures recherches de stage. Votre startup s’appelle ……… et votre application ………. .\nVotre application permettra à un utilisateur de rechercher des stages de son choix sur un ou plusieurs sites de recherche de stage (Hellowork, welcometothejungle, …). Les stages peuvent être publiés dans différentes spécialités (informatique, data analyse, machine learning, …). S’il est authentifié, l’utilisateur pourra sauvegarder dans l’application les stages qui l’intéressent dans sa « liste d’envies », et pourquoi pas répondre aux offres plus facilement (automatiquement, ou au minimum récupérer les contacts vers les employeurs). La navigation et les recherches de tout utilisateur seront historisées.\nDeux types d’utilisateurs authentifiés pourront cohabiter : utilisateur « élève » et utilisateur « professeur ». Un « administrateur » de l’app pourra également gérer l’application et les utilisateurs. Un utilisateur non authentifié sera par défaut dans la catégorie « élève ». On peut imaginer que les besoins des professeurs et des élèves seront différents…\nL’application permettra aux utilisateurs authentifiés de gérer leurs comptes, préférences, mots de passe, listes, et à tous les utilisateurs d’exporter/importer leurs recherches courantes (dans le format texte que vous jugerez bon).\nLes utilisateurs pourront également géo localiser les stages par rapport à leur position actuelle (temps de trajet,…).\nFonctionnalités requises (numérotées, mais non ordonnées)\n\nF1 : la recherche de résultats sur un site que vous choisirez (Hellowork, welcometothejungle, …)\nF2 : authentification et gestion du profil utilisateur/profil administrateur\nF3 : gestion de l’import/export de données au format choisi\nF4 : gestion de l’historique des recherches\nF5 : recherche par catégorie/filtre de recherches\n\nFonctionnalités optionnelles\n\nFO1 : lancer des recherches sur plusieurs sites en parallèle\nFO2 : géo localisation de l’utilisateur et des annonces/distance entre l’utilisateur et l’annonce\nFO3 : alertes automatiques si de nouvelles annonces de stage remplissant les critères sont publiées\nFO4 : … à vous de jouer !\nNOTE : ce sujet regorge de « … ». En effet, une participation active est vivement recommandée et vos idées, pour rendre votre projet unique, sont les bienvenues !\n\nFonctionnalités non notées (et déconseillées)\n\nles statistiques/modèles complexes que vous pourrez imaginer (une moyenne, OK, mais un modèle expo logarithmique quantique d’ordre 10, non)\nl’interface graphique type GUI (AUCUN point bonus sur une très jolie interface !)\n\n\n\n\nTuteur : Maxence Lagalle\n\n\nGreenStream est une API REST qui permet de réduire l’impact carbone d’un service de VOD (Netflix, Amazon Prime, Disney+…). Pour le consommateur, elle calcule l’impact carbone d’une vidéo à partir de sa durée et de sa résolution, en utilisant le modèle “1byte” de The Shift Project ou d’autres modèles d’estimation. Pour le fournisseur de VOD, elle aide à choisir des serveurs dans la meilleure zone géographique des fournisseurs Cloud en fonction de l’impact carbone de la production d’électricité. Ces données sur l’impact carbone sont fournies par l’API ElectricityMaps. GreenStream est un projet innovant et écologique, qui accompagne dans la transition vers des services de VOD plus vert et plus responsables.\nElectricityMaps est partenaire de GreenStream et offre un accès à la version payante de son API pour toute la durée du projet.\n\n\n\n\nEstimation de l’empreinte carbone d’une vidéo selon le modèle “1byte” de The Shift Project\n\nPrise en compte de la localisation géographique du fournisseur de VOD et de l’utilisateur\nPrise en compte de la durée et de la qualité de la vidéo, du type de connexion et du matériel utilisé pour regarder la vidéo\nUtilisation des données d’impact carbone en temps réel fournies par l’API ElectricityMaps\n\nRecommandation du meilleur service Cloud pour diffuser une vidéo à un utilisateur\n\nChoix du service Cloud à l’impact carbone le plus faible en fonction de la zone géographique de l’utilisateur\nDétermination des services Cloud éligibles en fonction de la localisation de l’utilisateur (ceux dans le même pays ou un pays limitrophe)\nUtilisation des données de prévision de l’impact carbone pour la durée de la vidéo fournies par l’API ElectricityMaps\n\nGestion de l’offre des fournisseurs Cloud\n\nImplémentation de la liste des zones géographiques proposées par au moins deux fournisseurs Cloud (AWS, GCP, Azure…)\nUtilisation d’une base de données SQL pour stocker les informations sur les services Cloud disponibles\n\nInformation sur l’état du service GreenStream\n\nFourniture d’un service permettant de s’assurer que GreenStream fonctionne correctement et que son lien avec ElectricityMaps est actif\n\n\n\n\n\n\nSimulation de l’impact carbone d’un changement de comportement\n\nCréation d’un service qui permet à l’utilisateur de simuler l’impact carbone qu’il aurait s’il changeait certains paramètres de sa consommation de vidéos, tels que la qualité, la durée, le type de connexion ou le matériel utilisé\nUtilisation du modèle “1byte” ou d’autres modèles d’estimation pour calculer l’empreinte carbone selon les différents scénarios\n\nUtilisation de modèles d’estimation de l’empreinte carbone plus sophistiqués\n\nPrise en compte d’une consommation électrique variable selon les fournisseurs Cloud\nUtilisation d’autres modèles d’estimation publiés, tels que le modèle “Carbon Footprint of Video Streaming” de Carbon Trust ou d’autres modèles à rechercher\n\nIntégration de critères avancés dans la recommandation du service Cloud\n\nPrise en compte du coût financier des services Cloud et d’un arbitrage entre le coût et l’empreinte carbone\nUtilisation d’un graphe de connexions entre les zones pour déterminer la liste des services Cloud éligibles pour diffuser une vidéo à un utilisateur\n\nSuivi de la consommation totale du service et de son empreinte carbone\n\nEnregistrement SQL de la consommation de vidéos : durée, zone géographique de l’utilisateur, service Cloud associé, empreinte carbone\nAccès aux données brutes ou à une synthèse statistique via l’API\n\nFonctionnement en mode dégradé\n\nUtilisation de données historiques d’intensité carbone de la production d’électricité en cas de défaillance de l’API ElectricityMaps\n\n\nL’initiative est fortement encouragée dans ce projet, et d’autres idées de fonctionnalités avancées ou d’amélioration des fonctionnalités de base peuvent être proposées par les élèves.\n\n\n\n\nTuteur : Thierry Mathé\n\n\nLe ministère des Finances met à disposition un fichier des prix des carburants dans les stations françaises. Ce fichier au format XML contient entre autre pour chaque station, ses coordonnées, son adresse, ses heures d’ouvertures, le prix des carburants disponibles (mais l’enseigne de la station n’y figure pas). Le but du projet de créer une API (application programming interface) qui exploite les données contenues dans ce fichier. Cette API devra permettre de :\n\nConsulter la liste des stations se trouvant à proximité d’un point donné il sera aussi possible de préciser le carburant.\nCréer et mettre à jour des listes de stations qu’il sera possible de consulter par exemple pour voir les prix sur les stations se trouvant sur un trajet régulier.\n\nA chaque requête, l’API doit s’assurer qu’elle utilise bien les dernières données disponibles et au besoin télécharger les nouvelles données disponibles sur le site (mises à jour toutes les 10 minutes) : https://donnees.roulez-eco.fr/opendata/instantane\n\n\n\n\n\nLes paramètres donnés à cette requête sont les coordonnées (longitude et latitude) d’un point, une distance en km et un type de carburant. L’API va alors extraire l’ensemble des stations se trouvant dans la zone ainsi définie et disponsant du carburant indiqué.\nLa réponse sera données au format JSON et contiendra:\n\nles parmètres de la requête\nla date et l’heure d’exécution\nle nombre de stations trouvées\nla liste des stations : pour chaque station on aura:\n\nl’id, les coordonnées et l’adresse de la station\nle prix du carburant\n\n\n\n\n\nLa gestion des listes de stations doit permettre de :\n\nCréer une liste: le paramètre en entrée est un nom donné par l’utilisateur. La requête revoie un identifiant qui devra être passé comme paramètre pour toutes les autres actions,\nConsulter la liste des listes crées: aucun paramètre, la requête renvoie les couple identifiant-nom des listes défines,\nAjouter une une plusieurs stations à un liste: les paramètres en entrée sont l’identifiant de la liste et le ou les identifiants des stations à ajouter,\nSupprimer une liste: le paramètre à donner est l’identifiant de la liste,\nConsulter la liste: le paramètre à donner est l’identifiant de la liste. La requête revoie les informations au format JSON qui contiennent:\n\nl’identifiant et le nom de la requête\nla date et l’heure d’exécution\nle nombre de stations contenues dans la liste\nla liste des stations. Pour chaque station on aura:\n\nl’id, les coordonnées et l’adresse de la station\nle prix du carburant\n\n\n\n\n\n\n\nVoici quelques idées de fonctions avancées pour les groupes qui auraient effectué l’ensemble des fonction de bases. Toutes autres idées pourra bien sûr être proposées en cours de projet.\n\n\n\nPossibilité de passer comme parmètre une adresse au lieu de coordonnées\nPossibilité de préciser l’heure de passage et de ne conserver que les stations ouvertes à cette heure.\n\n\n\n\n\nPossilité de retirer une ou plusieur stations d’une liste\nImposer une identification pour consulter les listes. Chaque utilisateurs n’aurait alors accés qu’à ses liste.\n\n\n\n\n\n\nTuteur : Aloïs DE OLIVEIRA\n\n\nLeague Of Legends (connu sous le sigle LoL) est un jeu video, plus précisément un Multiplayer Online Battle Arena (MOBA), développé par Riot. LoL comptait plus de 100M de joueurs actifs en 2022 et le chiffre n’est pas voué à diminuer dans les prochaines années. Cet engouement force Riot à se renouveler en créant de nouveaux champions, de nouveaux items, des ajustements sur l’équilibrage du jeu (appelés patch). Les joueurs apprécient donc fortement les outils leur permettant d’avoir des analyses simples mais rapides afin de les accompagner et aider dans leurs choix.\nCe sujet ne nécessite pas de connaître le jeu ou d’y avoir déjà joué. Au contraire, il vous arrivera souvent de devoir dans un premier temps comprendre un nouveau contexte métier et vos données en entrée.\n\n\n\n\n\nVous êtes mobilisés afin de mettre en place une solution capable de fournir aux joueurs les premières informations essentielles. Ces analyses seront simples mais nécessiteront d’analyser tout l’historique des parties que vous aurez à votre disposition, et donc que vous stockerez. Votre solution a pour but d’être pensée dans une logique d’amélioration continue. Ainsi un code documenté utilisant les principes de la Programmation Orientée Objet (POO) est attendu.\n\n\n\nLoL met à disposition une API afin de permettre aux personnes qui le souhaitent de pouvoir utiliser leurs données. Une explication du fonctionnement de l’API de LoL et de l’obtention des données sera effectuée.\n\n\n\n\nLors de ce projet, vous aurez des fonctionnalités obligatoires et avancées. Il est nécessaire de se focaliser sur ces premières et d’entreprendre les secondes que lorsque vous avez une base solide pour répondre à l’ensemble des fonctionnalités obligatoires.\n\n\n\nNiveau base de données\n\n\n\nCréation d’une base de données de votre choix (SQL/NoSQL) qui vous servira à stocker l’historique des parties. Le modèle de données est important, il doit être adapté afin de faciliter toutes modifications.\nCréation d’un pipeline de données. L’ensemble des étapes de la collecte au chargement, en passant par la transformation doivent être le plus réutilisable possible.\nL’ensemble des tâches doit être effectué en Python (de la création, à l’insertion et aux éventuelles modifications).\n\nNiveau API\nPour la réalisation de ce projet, vous devrez réaliser une API (à l’aide FastAPI ou Flask) qui vous permettra de renvoyer les différents résultats souhaités. Ces résultats seront à retourner sous format json. Il existera différentes classes, décrites ci-dessous, avec chacune ses méthodes. Toutes les méthodes présentes dans les descriptions des classes sont à titre indicatif. N’hésitez pas à être force de proposition.\n\n\n\n\nCela ne nécessitera aucune connexion.\nCette classe devra comporter certaines méthodes permettant de fournir des statistiques globales sur le jeu, telles que :\n\nAfficher les statistiques d’un champion : le nombre de games jouées, le winrate, le gold lead à Xmin, etc.\nTrier les champions (globalement ou par lane) selon le critère au choix parmi : nombre de games jouées, le winrate, etc.\n\n\n\n\n\n\nCela nécessitera de se connecter à un compte user.\nCette classe héritera de l’ensemble des méthodes propres à la classe invité.\nCette classe devra comporter certaines méthodes permettant de fournir des statistiques liées au compte en question, telles que :\n\nAfficher les statistiques globales/par lane/par champion du compte : le nombre de games jouées, le winrate, le kda, etc.\n\n\n\n\n\n\nCela nécessitera de se connecter à un compte admin. 1 seul sera nécessaire.\nCette classe héritera de l’ensemble des méthodes précédentes.\nCette classe aura pour but de permettre à l’admin de pouvoir gérer les comptes et les données.\n\n\n\n\n\nLes fonctionnalités avancées sont triées selon le niveau de difficulté , cependant vous êtes totalement libres sur les fonctionnalités avancées que vous souhaitez réalisées.\n\n\nJusqu’ici vous utilisez les données mises à disposition sans enrichissement. Cette fonctionnalité aura pour but de permettre à l’admin de pouvoir ajouter des nouvelles parties récentes.\nLes différents points attendus sont :\n\nGestion de la clé (permettant l’accès à l’API de Riot) : au choix entre en brute en paramètre d’entrée ou permettre d’aller la récupérer directement sur le site depuis l’API.\nRécupération des données depuis l’API de Riot selon certains critères de sélection.\nAjout des données dans vos bases de données.\nAjout de la fonctionnalité au sein de votre API.\n\nLes critères de sélection seront libres et donc proposés par votre groupe, en fonction de ce que l’API vous permettra de faire.\n\n\n\nLe workflow Gitflow vous permet de faciliter la gestion des branches et la séparation des différentes tâches.\nUtilisez le framework Gitflow pour la gestion de votre projet.\n\n\n\nConteneuriser votre application aura pour but de faciliter son déploiement et son partage. En effet, cela permettra de réunir le code et ses composants (frameworks, bibliothèques, etc) dans un conteneur. Il sera alors possible d’exécuter le conteneur sans se soucier des différentes dépendances (l’installation des bibliothèques avec la bonne version par exemple).\nUtilisez l’outil Docker pour conteneuriser votre application.\n\n\n\nPour le moment, vous ne faites remonter que des statistiques descriptives. Ici il s’agit de mettre à profit l’ensemble des données disponibles pour permettre à l’utilisateur de prédire l’équipe gagnante en fonction des 5 champions de chaque équipe. L’enjeu de cette fonctionnalité n’est pas de vous faire trouver le meilleur modèle de prédiction mais d’ajouter une fonctionnalité à votre API basé sur ce modèle. Vous ne serez donc aucunement noté sur la qualité des prédictions.\nLes différents points attendus sont :\n\nChoix d’un modèle de prédiction : vous ne serez certes pas noté sur la qualité des prédictions mais une courte réflexion sur le choix du modèle est attendue.\nEntrainement dudit modèle : vous êtes libres sur le choix des librairies.\nSérialisation du modèle : vous devez sauvegarder votre modèle.\nAjout de la fonctionnalité au sein de votre API.\n\n\n\n\n\n\nTuteur : Sophie HERBERT, ENSAI 2021\n\n\nRecommander des produits meilleurs pour la santé selon plusieurs critères !\nVous allez explorer la célèbre API Open Food Facts qui regroupe des produits alimentaires divisés en plusieurs catégories (Viandes, Snacks, Aliments d’origine végétale etc.) et pour lesquels nous avons un grand nombre de variables renseignées par la communauté : nutriscore, nova score, ecoscore, taux de protéine, taux de sucre, énergie en kcal… L’objectif de l’application est d’utiliser un échantillon de ces données en vous concentrant sur quelques produits de quelques catégories que vous aurez choisis, de les afficher tel un catalogue et de pouvoir les trier selon le critère sélectionné : le moins de sucre possible, le meilleur eco-score, la plus faible valeur énergétique… En allant sur une fiche « Produit », vous afficherez le meilleur produit de la même catégorie selon ce critère. Un système d’identification devra être mis en place. Si l’utilisateur est identifié, pourquoi pas sauvegarder ses articles dans un panier virtuel ?\n\n\n\nLes fonctionnalités requises :\n\nF1 : affichage simple en console d’un catalogue de produits alimentaires par catégorie de produit\nF2 : ordonner les produits selon un critère nutritionnel\nF3 : sélection d’une fiche « Produit » recommandant un autre produit de la même catégorie avec un critère meilleur que le produit consulté (si meilleur il y a)\nF4 : système d’authentification et de gestion du profil (changement de mot de passe…)\n\n\n\n\n\nF5 : sauvegarde de produits dans un panier\n…\n\nDes fonctionnalités optionnelles pourront être développées à votre guise et selon votre inspiration sur le sujet ! Les données Open Food Facts étant très riches, d’autres axes d’analyses peuvent être creusés… Note : l’interface GUI, la mise en place de modèles statistiques, la gestion des valeurs manquantes ne seront pas inclues dans la notation.\n\n\n\n\n\n\n\n\n\nCe projet a pour objectif de créer une application qui facilite la recherche d’emploi dans le secteur de la technologie en utilisant l’API REST gratuite de Adzuna , qui fournit des informations sur les offres d’emploi dans divers secteurs à travers le monde. L’application permettra aux utilisateurs de rechercher des emplois, de filtrer les résultats, de suivre leur progression dans leurs candidatures et de recevoir des alertes pour les nouvelles offres correspondant à leurs compétences.\n\n\n\n\nIntégrer les données de l’API Adzuna dans une application conviviale.\nPermettre aux utilisateurs de rechercher des offres d’emploi par mots-clés, localisation et catégories.\nFournir des fonctionnalités de suivi des candidatures, y compris la gestion de CV et de lettres de motivation.\nEnvoyer des alertes aux utilisateurs pour les nouvelles offres correspondant à leurs critères.\nMettre en place un système de profil pour les chercheurs d’emploi.\n\n\n\n\nLes fonctionnalités requises :\n\nF1 : Intégrer les données de l’API Adzuna pour afficher des offres d’emploi dans divers secteurs.\nF2 : Permettre aux utilisateurs de rechercher des emplois en utilisant divers critères.\nF3 : Permettre aux utilisateurs de créer des profils de chercheurs d’emploi.\n\n\n\n\n\nF4 : Fournir des fonctionnalités de suivi des candidatures et de gestion de documents(CVs, lettres de motivation…).\nF5 : Envoyer des alertes aux utilisateurs pour les nouvelles offres correspondant à leurs compétences.\nF6:…\n\n❗ Vous avez la liberté de développer des fonctionnalités optionnelles selon votre inspiration. Aucune interface graphique n’est demandée dans ce sujet, toute interaction avec l’application devra se faire via l’invité commande ( terminal / cmd ). Si vous souhaitez tout de même le faire, cela ne saurait se substituer aux fonctionnalités demandées.\n\n\n\n\n\n\n\n\n\nCe projet vous propose d’explorer les données mises à disposition par OpenData Paris. En particulier, vous allez jouer avec les données présentant la disponibilité des Velib’ en temps réel. La solution proposera des services pour permettre aux utilisateurs de trouver plus facilement un vélo, ou pour aider la ville de Paris à mieux gérer son parc de vélos. Pour cela, vous aurez besoin de capturer et de stocker les données disponibles sur l’API d’OpenData Paris (et leur historique!) dans une base de données, puis de créer à votre tour une API pour y mettre à disposition vos services.\n\n\n\n\nF1 : obtenir le nom de la station la plus proche ayant au moins un vélo disponible à partir de coordonnées géographique. Vous pouvez utiliser l’API d’Etalab pour obtenir des coordonnées géographiques à partir de d’une adresse.\nF2 : obtenir le nom de la station la moins fréquentée sur une période de temps données.\nF3 : obtenir le numéro de l’arrondissement le plus fréquenté sur une période de temps données.\n\n\n\n\n\nF01 - Recherche de vélo en temps réel : Un utilisateur utilise la F1 pour trouver un vélo proche de lui. En arrivant sur place: mauvaise surprise, le vélo lui ai passé sous le nez. Pour éviter ce genre de désagréaments, le nom de la station la plus proche sera actualisé en temps réel. Pour cela, vous pouvez améliorer la F1 en proposant une connexion basé sur un WebSocket.\nFO2 - Déploiement : Pour faciliter le déploiement de votre solution, conteneurisez-la en utilisant Docker Compose.\nFO3 - CRUD : Permettez aux utilisateurs de communiquer directement avec votre base de données. Pour cela, complétez votre API en proposant des nouvelles routes permettant de :\n\nrécupérer toutes les informations d’une station\nsupprimer toutes les informations d’une station\nmettre à jour le nom d’une station\najouter une nouvelle station\n\n\n\n\n\nPour répondre aux fonctionnalités demandés, vous aurez certainement besoin de vous armer de:\n\nune librairie pour construire des APIs (conseillé: FastAPI)\nune solution de base de données (conseillé: SQLite)\nun outil de versioning de code en équipe (Gitlab ou Github)"
  },
  {
    "objectID": "doc/projet/anciens-sujets.html#section-1",
    "href": "doc/projet/anciens-sujets.html#section-1",
    "title": "Anciens sujets",
    "section": "2022-2023",
    "text": "2022-2023\n\nGestion de petites annonces 📰💰🏷\nTutuer : Colin Leverger\n\nObjectif\nVous êtes un groupe d’amateurs de shopping sur le web, et souhaitez développer une application en ligne de commande pour faciliter les achats sur internet. Votre startup s’appelle __________ et votre application ________.\nVotre application permettra à un utilisateur de rechercher des articles de son choix sur un ou plusieurs sites de vente (Leboncoin, Vivastreet, …). Les articles peuvent être présents dans différentes catégories (voitures, consoles,…). S’il est authentifié, l’utilisateur pourra sauvegarder dans l’application les articles/informations/pages web/… qui l’intéressent dans sa « liste d’envies ». La navigation et les recherches de tout utilisateur seront historisées.\nDeux types d’utilisateurs authentifiés pourront cohabiter : utilisateur « particulier » et utilisateur « pro ». Un « administrateur » de l’app pourra également gérer l’application et les utilisateurs. Un utilisateur non authentifié sera par défaut dans la catégorie « particulier ». On peut imaginer que les besoins des professionnels et des particuliers seront différents…\nL’application permettra aux utilisateurs authentifiés de gérer leurs comptes, préférences, mots de passe, listes, et à tous les utilisateurs d’exporter/importer leurs recherches courantes (dans le format texte que vous jugerez bon).\nLes utilisateurs pourront également géo localiser les annonces par rapport à leur position actuelle (temps de trajet,…).\nFonctionnalités requises (numérotées, mais non ordonnées)\n\nF1 : la recherche de résultats sur un site que vous choisirez (Leboncoin, Vivastreet, …)\nF2 : authentification et gestion du profil utilisateur/profil administrateur\nF3 : gestion de l’import/export de données au format choisi\nF4 : gestion de l’historique des recherches\nF5 : recherche par catégorie/filtre de recherches\n\nFonctionnalités optionnelles\n\nFO1 : lancer des recherches sur plusieurs sites en parallèle\nFO2 : géo localisation de l’utilisateur et des annonces/distance entre l’utilisateur et l’annonce\nFO3 : … à vous de jouer !\n\n\nNOTE : ce sujet regorge de « … ». En effet, une participation active est vivement recommandée et vos idées, pour rendre votre projet unique, sont les bienvenues !\n\nFonctionnalités non notées (et déconseillées)\n\nles statistiques/modèles complexes que vous pourrez imaginer (une moyenne, OK, mais un modèle expo logarithmique quantique d’ordre 10, non)\nl’interface graphique type GUI (AUCUN point bonus sur une très jolie interface !)\n\n\n\n\nWebservice de génération de jeux de données 📡 🌐 💽\nTuteur : Antoine Brunetti\n\nContexte\nDans le cadre de la réalisation de tests de programmes, on est souvent amenés a utiliser des jeux de données fictives.\nPour répondre à ce besoin, vous envisagez de constituer un produit qui permet de générer des données de tests pour des statisticiens et développeurs en herbe.\nLes utilisateurs de cette API pourront renseigner des types de données pour la génération à partir d’un language dédié : Par exemple :\n\ndéfinir un type SEXE qui ne prendrait que les valeurs M,F ou A\n\"SEXE\":\"'M'|'F'|'A'\"\nou définir un type composé VOITURE qui prendrait les valeurs composées :\n{\n    \"VOITURE\": {\n  \"nb_roues\": \"INT\",\n  \"COULEUR\": \"'rouge'|'vert'|'bleu'\"\n    }\n}\n\nLes utilisateurs de l’application définiront ensuite des schémas de données permettant de gérer les métadonnées nécessaires à la génération de données. Ces informations seront stockées en base de données.\nPar exemple :\n{\n    \"sexe\": {\n        \"type\": \"SEXE\",\n        \"remplissage\": 100\n    },\n    \"age\": {\n        \"type\": \"18|19|20\",\n        \"remplissage\": 100\n    },\n    \"prenom\": {\n        \"type\": \"NAME\",\n        \"remplissage\": 88.4\n    },\n    \"nom\": {\n        \"type\": \"NAME|'dupont'\"\n        \"remplissage\": 85\n    }\n}\nIl faudra également qu’a partir d’un jeu de configuration fourni au format JSON au démarrage de l’application, vous définissiez le point d’entrée d’accès aux données générées. Cela permettra une meilleure utilisation de votre API pour permettre aux utilisateurs de tester un endpoint sans modifier leur configuration.\nLa génération de ces données devra se faire selon différents formats , avec la possibilité de définir des seuils de remplissage en amont de la génération des données.\nLes différents jeux de données générés seront eux aussi sauvegardés pour permettre d’accéder aux données de manière stable (par une graine 🌱), cette graine pourra être fournie par un HEADER HTTP propre a votre application.\nLe point d’entrée de définition du schéma de données sera accessible en GET a un point d’entrée fixe de votre serveur.\n\n\nFonctionnalités de bases\n\nDéfinition des valeurs possibles pour un champ\nDéfinition d’un schéma correspondant a une ligne de données à générer.\nDéfinition d’un taux de remplissage pour un champ.\nDémarrage de l’applicatif à partir d’un fichier de règles de bases\nLa réalisation d’un scénario d’usage de l’API.\n\n\n\nFonctionnalités avancées\n\nGénération d’un jeu de règles à partir d’un jeu de données\nGestion de l’authentification à l’API\nPermettre l’export et l’import de schémas sous format JSON\nProposer une solution répondant à des enjeux de volumétrie (taille des jeux de données)\nRéalisation de rapports de statistiques sur les jeux générés.\n\n\n\n\n\nJeux de mot 📖 🏆\nTuteur : Armelle Koehl\n\nPrésentation\nWordle, zutom, le mot et tous ces dérivés d’u célèbre jeu télévisé. C’est dans la ligné de ces jeux que nous souhaitons nous inscrire en faisant notre propre version. Et pourquoi pas, le proposer comme occupation entre 2 amphis aux ensaiens 🎮 Le but du jeu est de deviner un mot spécifique en un minimum de tentatives. Le joueur inscrit sur la première ligne un mot de son choix de même longueur que le mot à deviner et entre sa proposition. Le jeu lui indique alors quelles lettres ne se trouvent pas dans le mots, celles qui y sont mais mal placées et celles qui s’y trouvent et qui sont bien placées. En fonction du nombre de tentatives, on peut proposer un score au joueur. 🏆\n\n\nFonctionnalités de base\n\nUn historique afin de reprendre sa partie en cours de route\nUn tableau des scores général s’actualisant en temps réel\nDes tests unitaires\nUne interface console simple à destination des clients qui utilisera votre API (cf architecture client serveur)\n\n\n\nFonctionnalités avancées\n\nProposer le jeu en multilingues\nCréation de listes de mots personnalisées\nUn client permettant de jouer en multijoueur local et distant\nUne gestion de l’authentification\n\n\n\nLes outils\n\nUtilisation d’une API fournissant des mots au hasard\nFramework fastApi\nBase Postgres\nGit et son univers\nVscode\n\n\n\nCe qu’on essaiera de voir en plus\n\n\n\n\nConférence de jeu de rôle 🏰🐉\nTuteur : Cyriel Mallart\n\nPrésentation\nUne nouvelle convention de jeu de rôle arrive à Rennes ! L’activité phare de la convention sera un weekend dédié à la pratique des jeux de rôles. Plusieurs jeux se dérouleront en parallèle, chacun à une table contenant un maître/une maîtresse du jeu (MJ), ainsi que des joueurs et joueuses. Le but de ce weekend est de réunir des gens de tous horizons, de donner une première impression du jeu de rôle aux personnes n’ayant jamais essayé, mais aussi de satisfaire les joueurs plus expérimentés. Le système de jeu utilisé est Dongeons et Dragons 5E.\nLes organisateurs vous sollicitent pour créer une application qui permette de gérer les tables de jeu de la conférence. Il faudra créer deux interfaces différentes : une pour les organisateurs et une pour un joueur ou MJ.\nUn joueur ou une joueuse s’inscrit à la conférence en renseignant un nouveau profil. Sur ce profil, il ou elle peut déclarer des personnages différents. En utilisant l’API disponible à l’adresse https://www.dnd5eapi.co/, plus d’informations seront colléctées sur chaque personnage, et completeront sa fiche, comme les langues que le personnage parle, ses capacités physiques, etc. Une joueuse doit aussi pouvoir s’inscrire à une table, et consulter les tables auxquelles elle joue. Les MJs ont accès à un profil similaire, où ils peuvent se porter volontaires pour plusieurs scénarios (et donc plusieurs tables). Le MJ doit aussi avoir accès à une liste des joueurs et des personnages qui seront à sa table, afin de pouvoir se préparer au mieux.\nLes organisateurs se réservent le droit de supprimer des joueurs et des MJ, et de réorganiser les tables. Dans ce cas, un tel évènement sera notifié aux joueurs concernés lorsqu’ils iront consulter les tables auxquelles ils jouent.\n\n\nFonctionnalités attendues\n\nAuthentification sommaire des profils organisateur/joueur/MJ\nInscription pour un nouveau joueur ou MJ\nComplétion des fiches personnages via l’API\nInscription/désistement à une table (avec gestion des contraintes)\nVue du programme individuel pour chaque joueur\nAjout/suppression des joueurs à une table\nCréation/suppession de tables\nVue générale du programme (tables, joueurs, MJs et horaires)\n\n\n\nFonctionnalités avancées\n\nRecherche du programme d’un joueur particulier par un organisateur\nValidation des personnages par le MJ avant inscription définitive à une table\nGestion d’un second système de jeu (Pathfinder, Call of Chtulu ou Monster of the Week, par exemple)\n\n❗ Aucune interface graphique n’est demandée dans ce sujet. Si vous souhaitez tout de même le faire, cela ne saurait se substituer aux fonctionnalités demandées.\n\n\nTechnologies utilisées\n\nFastApi\nBase de donnée au choix (SQL comme PostGres ou MySQL, ou NoSQL comme MongoDB)\nAPI D&D5e\n\n\n\n\nProfite au MAX de ton TGVMAX 🚆 : TGVMAXimizer\nTuteur : Mansor Gueye\n\nPrésentation\nVous avez un abonnement TGVMAX (Jeune 🧑 👩 ou Senior 🧓👵)et vous avez du mal à trouver des trajets éligibles, TGVMAXimizer est LA solution. TGVMAXimizer est l’application qui facilite la recherche de places disponibles pour les trajets éligibles au TGVMax. L’utilisateur crée un compte avec un profil jeune ou senior. Une fois authentifié, l’utilsateur pourra lancer une recherche en specififant la gare de depart, la gare de déstination et éventuellement la date de départ. Le resultat sera la liste des trajets éligibles au TGVMAX junior ou senior selon le profil de l’utilisateur. Les données sur la disponibilité à 30 jours de places MAX JEUNE et MAX SENIOR sont accessibles via l’api tgvmax disponible sur le site https://data.sncf.com/explore/dataset/tgvmax/api/\n\n\nFonctionnalités attendues\n\nCréation de compte\nUne gestion de l’authentification\nPossibilité de déconnexion\nRecherche de trajets éligibles au MAX JEUNE / MAX SENIOR\nFiltre pour ne voir que les places à 0 euro\n\n\n\nFonctionnalités avancées\n\nRecherche de toutes les destinations atteignables avec des places éligibles au MAX JEUNE / MAX SENIOR (y compris le trajet de retour) durant un weekend\nRecherche de toutes les destinations atteignables avec des places à 0 euros (y compris le trajet de retour) durant un weekend\nUtilisation d’une architecture serveless avec AWS lambda pour executer du code python en réponse à un événement (event trigger)\nCréer un systeme d’alerte pour envoyer une notification par email quand une place remplissant les critère de recherche se libère.\n\n❗ Aucune interface graphique n’est demandée dans ce sujet, toute interaction avec l’application devra se faire via l’invité commande ( terminal / cmd ). Si vous souhaitez tout de même le faire, cela ne saurait se substituer aux fonctionnalités demandées.\n\n\nLes outils\n\nFastApi\nBase de donnée au choix (SQL comme PostGres ou MySQL, ou NoSQL comme MongoDB)\nVersioning avec Git\nIDE de votre choix\n\n\n\n\nRap Analytics 🎶🎤📈\nTuteur : Samuel Goutin\n\nContexte\nRapminerz.io est un Data-Média pour le Rap FR. Notre ambition est d’utiliser les plus récentes innovations technologiques pour offrir à une communauté de passionnés une vision approfondie et inédite du Rap Francophone. Le projet est né de l’idée de parler de rap autrement, en mettant à jour des phénomènes impossibles à percevoir lors d’une simple écoute. Nous exploitons la force de la data science pour traiter du rap dans sa globalité. Pour cela, nous avons agrégé une des plus grandes bases de données du Rap Français avec plus de 120k morceaux. Nous vous proposons de participer à l’analyse de cette montagne de données. Prêts ? Codez !\n\n\nSujet\n\nObjectif\nVous êtes chargé de développer une solution capable de fournir à la communauté de Rapminerz des analyses pertinentes sur les featuring des rappeurs Français. Les analyses sont des chiffres clés, des indicateurs ou des prédictions qui nécessite d’analyser tout l’historique de données à votre disposition. Votre solution doit donc stocker l’historique des données. On souhaite que les analyses soient consultables depuis un navigateur web (via des requêtes HTTP). La communauté de Rapminerz compte aujourd’hui plus de 50k personnes. Cela fait autant d’utilisateur potentiels de vos analyses. Aussi, la source de données peut être amenée à grossir. Votre solution doit donc supporter une augmentation du nombre d’utilisateurs et de la quantité de données. Enfin, votre solution continuera à évoluer. Elle doit être pensée pour faciliter l’ajout de nouvelles fonctionnalités.\nUtilisez les principe de la Programmation Orientée Objet et privilégiez un code documenté et testé comme vu en TP.\n\n\nLes données\nVous avez à disposition un flux de données à l’adresse suivante https://apps-dev.rapminerz.io/data-ensai/. Il contient une liste de featuring décrit par les champs :\n\ndate : sous la forme d’un timestamp.\nprimary_artist_name : le nom de l’artiste en tête d’affiche de la chanson.\nfeatured_artists_names : la liste des noms des artistes en featuring sur la chanson.\n\nLes données sont brutes, et nécessitent donc d’être nettoyées et transformées. Chaque semaine, des nouvelles données sont intégrées aux flux, et les plus anciennes sont retirées.\n\n\n\nFonctionnalités\nLes fonctionnalités décrites dans la suite permettent de répondre au sujet, en tenant compte des contraintes sous jacentes.\nVous devez implémenter toutes les fonctionnalités attendues ainsi qu’au moins une fonctionnalité avancée de votre choix.\n\n\nFonctionnalités attendues\n\nFO1 : Mise en place d’une base de données\n\nChoisissez une base de données de votre choix (SQL/NoSQL) pour y stocker l’historique de vos données, en vous assurant de ne pas introduire de doublons. Vous pouvez par exemple utiliser la librairie sqlite3.\nToutes les opérations liées à votre base de données telle que la création de tables, les insertions et les lectures devront être pilotées en Python.\nChoissisez un modèle de données qui facilitera les modifications. Par exemple, le changement de nom d’un artiste ne doit nécessiter qu’une seule instruction (type UPDATE TABLE). Inspirez-vous de la modélisation en étoile.\n\n\n\nFO2 : Construction d’un pipeline de données\n\nDef: Pipeline de données : Un pipeline de données est un concept informatique faisant référence aux étapes de transport des données d’une source vers une cible. Parmi ces étapes, on peut y retrouver la collecte, l’organisation ou encore la transformation des données.\n\n\nDef: Pipeline ETL: Un pipeline ETL est un pipeline de données spécial comprenant uniquement des étapes de collecte (E), de transformation (T) et de chargement (L) des données vers une cible.\n\n\nDef: Orchestrateur: Un orchestrateur de pipeline est un outil permettant de chainer les étapes d’une pipeline et de gérer les dépendances entre étapes.\n\n\nVotre pipeline sera composée des étapes suivantes :\n\nCollecte de la source de données,\nQuelques étapes de transformation (nettoyage, typage, encodage, etc..),\nChargement dans la base de données.\n\nChacune des étapes de votre pipeline devra être générique et réutilisable. Dans l’idéal, chaque étape doit correspondre à une fonction.\nLe plan d’exécution de la pipeline sera défini dans un fichier de configuration (en json ou yaml). Ce fichier contiendra la liste des étapes à exécuter ainsi que leurs paramètres. Il devra lu et interprété par Python lors d’une exécution de la pipeline. Vous pouvez utiliser les librairies json ou PyYAML pour cela.\nVous pourrez ainsi créer plusieurs configurations différentes pour votre pipeline.\nL’exécution de d’une pipeline se fera via l’interface en ligne de commande. Le chemin vers votre fichier de configuration pourra être placée en argument de la commande en utilisant la libraire argparse.\nL’orchestration des étapes de votre pipeline pourra se faire avec des outils dédiés tel que Pandas pipe ou genpipes.\n\n\n\nAttention à ne pas introduire de doublons dans la base de données! Vous pouvez utilisez le champ date comme point de repère.\n\n\n\nFO3 : Mise en place d’une API et exposition de résultats simples\n\nMettez en place une API REST en utilisant FastAPI ou Flask.\nAjoutez une route nommée /count-feat qui retourne le résultat de la requête suivante :\n\nLe nombre de featuring par artiste et par mois. Un featuring est comptabilisé lorsque l’artiste est primary_artist ou featured_artist.\n\nAjoutez une route nommée /mean-feat qui retourne le résultat de la requête suivante :\n\nLa moyenne mobile du nombre total de featuring par jour avec une fenêtre de 5.\n\nRetournez les résultats au format json.\n\n\n\nFO4 : Accélération des appels à l’API\nPour permettre à votre API de supporter un grand nombre de requête simultanées, vous devez implémenter au moins l’une des deux solutions suivantes.\nPré-calcul\nVous pouvez accélérer le calcul d’une requête en pré-calculant tout ou partie des résultats.\n\nCalculez tout ou partie de la requête et stockez là dans un fichier csv ou json que l’on appelle une vue.\nModifiez votre API afin qu’elle tire profit de ce fichier.\nVeillez à tenir à jour votre vue en effectuant des synchronisations régulières avec la base de données.\n\n\nCache\nVous pouvez accélérer le calcul d’une requête en cachant ses résultats en mémoire.\n\nDef: Cache: Une mémoire cache une mémoire qui enregistre temporairement des copies de données provenant d’une source, afin de diminuer le temps d’un accès ultérieur (en lecture) à ces données.\n\n\nLors du premier appel la requête n’existe pas dans le cache. Elle est donc calculée à partir des données de la base de données. Le résultat est renvoyé à l’utilisateur et stocké dans le cache pour anticiper les futurs appels.\nLors du second appel (et des suivants), le résultat de la requête est déjà présents dans le cache. Le résultat est renvoyé de manière quasi instantanée à l’utilisateur.\nVous pouvez utilisez la librairie cachetools pour implémenter un cache.\n\n\n\n\n\nFonctionnalités avancées\nLes fonctionnalités difficiles seront davantage valorisées que les fonctionnalités faciles.\n\nFA1 [difficulté : facile] : Implémentation d’un système d’authentification à l’API\nPour sécuriser votre API, implementez un système d’authentification. L’utilisateur devra être muni d’un token pour pouvoir utiliser votre service.\n\n\nFA2 [difficulté : facile] : Utilisation du workflow Gitflow\nLorsque vous travaillez en équipe sur un projet de développement, adoptez le framework Gitflow pour une meilleure gestion des branches.\n\n\nFA3 [difficulté : moyen] : Exposez un modèle de Machine Learning\nOffrez la possibilité à vos utilisateurs d’obtenir la prédiction du nombre de featuring total pour les prochains mois.\n❗ Vous ne serez pas évalué sur la qualité de votre modèle.\n\nEntrainez un modèle de prévision de série temporelle basique à prévoir le nombre de featuring total.\nVous pouvez utiliser la méthode du lissage exponentiel pour générer des prévisions en utilisant la librairie statsmodels.\nAprès l’avoir entrainé, sérialisez le modèle en utilisant la librairie pickle afin de le sauvegarder dans un fichier.\nAjoutez une route nommée /predict-feat à votre API qui retourne une prédiction du modèle.\nAjoutez la possibilité de déclancher un ré-entrainement du modèle avec l’interface en ligne de commande.\n\n\n\nFA4 [difficulté : moyen] : Mise en place d’une chaine d’intégration continue\n\nDef: Intégration Continue: Consiste à intégrer les changements apportés au code informatique d’un projet logiciel de façon continuelle, afin de détecter et de corriger immédiatement les éventuelles erreurs.\n\nMettez en place une chaine d’intégration continue basique avec Gitlab-CI ou Github Actions.\nVotre chaine d’intégration continue pourra comporter deux étapes : - une étape d’exécution des tests avec la librairie unittest ou pytest - une étape de qualité du code avec la librairie flake8\n\n\nFA5 [difficulté : élevée] : Conteneurisez votre application\n\nDef: Conteneurisation: Consiste à rassembler le code du logiciel et tous ses composants (bibliothèques, frameworks et autres dépendances) de manière à les isoler dans leur propre « conteneur ».\n\nConteuneurisez l’ensemble de votre solution en utilisant Docker.\n\n\n\n\nAPI cadastrale 🗺🏘🏗\nTuteur : Thierry Mathé\n\nLe contexte\nLe service statistique du ministère de la Transition écologique gère « Sitadel », le répertoire des autorisations d’urbanismes. À partir de ce répertoire le service publie des chiffres sur le nombre de permis de construire (PC) autorisés et le nombre de logements dont la construction est autorisée sur chaque commune. Une demande de PC doit se faire sur un terrain s’étendant sur une ou plusieurs parcelles cadastrales contiguës. Il est possible que ces parcelles se trouvent sur des communes différentes voire sur des départements différents. Lorsque c’est le cas, une demande de PC doit être faite sur chaque commune concernée. Cette situation peut donc engendrer des doublons au niveau du décompte des PC et des logements autorisés. Ce phénomène existe mais à l’heure actuelle on ignore s’il est fréquent et si les erreurs engendrées ont un poids notable sur les chiffres publiés au niveau communal. Le but de ce projet est d’apporter des outils qui aideront à l’étude de ce phénomène. Pour détecter les PC à cheval sur plusieurs communes, il convient de connaître les parcelles cadastrales qui sont en bordure de commune, puis de trouver les PC se trouvant sur ces parcelles et enfin déterminer lesquels de ces PC se trouvent sur des parcelles contiguës afin de voir s’il s’agit de la même construction ou non.\n\n\nLes développements obligatoires\nLe projet a pour but premier de créer une API capable de répondre aux requêtes suivantes :\n\nquelles sont les communes ayant des parcelles contiguës à une commune donnée ?\nquelles sont les parcelles en limite d’une commune donnée ?\nquelles sont les parcelles contiguës à une parcelle donnée ?\n\nPour cela il faudra exploiter les fichiers geoJSON du site : https://cadastre.data.gouv.fr/datasets/cadastre-etalab\nCe site contient des fichiers communaux des limites des parcelles adastrales. Chaque parcelle est délimitée par un polygone. Deux parcelles sont contiguës si elles partagent un même segment.\nLe premier travail sera donc de créer à partir de ces fichiers une base de données qui stockera les communes et les parcelles contiguës. Pour des raisons de volumétrie des données, ce travail ne sera effectué que sur un département, mais le programme de construction de la base et la base elle-même devront être capables de traiter plusieurs départements. De plus, le programme de construction de la base devra être facilement paramétrable pour changer la zone géographique couverte et l’année de géographie. Le second travail sera la construction de l’API qui répondra aux requêtes pré-citées en exploitant la base de données.\n\n\nDéveloppement optionnel\nDans un second temps, les groupes qui en auront la possibilité pourront faire des recherches sur les PC à partir des données Sitadel disponibles au format CSV sur le site du ministère : https://www.statistiques.developpement-durable.gouv.fr/liste-des-permis-de-construire-et-autres-autorisations-durbanisme Étant donné une commune de référence, il faudra rechercher les communes qui lui sont contiguës et extraire les PC de toutes ces communes. En suite il faudra dresser la liste des parcelles en limite de la commune de référence et de toutes les parcelles qui leur sont contiguës dans les autres communes et lister les PC présents sur ces parcelles. Enfin il faudra rapprocher les PC contiguës\nCe programme de recherche devra donc fournir en sortie cette liste de PC contiguës qui sera ensuite analysée pour voir s’il s’agit d’un même projet de construction ou pas.\n\n\n\nLa pyramide et le philosophe 📖 🔗\nTuteur : Suliac Le Guillou\n\nPrésentation\nAprès le succès des Worlde et Sutom cette année, je vous propose de revisiter un autre jeu télévisé: Pyramide. Dans ce jeu, le maitre des mots doit faire deviner un mot à son équipier en lui donnant pour indice des synonymes.\nPour renouveler ce concept, je vous propose de coupler ce concept avec un rare jeux de l’internet: le philosophe. Ici vous devez choisir un article au hasard sur Wikipedia et naviguer les liens hypertext jusqu’a tomber sur la page de philosophie\nVous aurez ainsi à construire une version pour un joueur de Pyramide en vous aidant de Wikipedia: votre programme devra aller chercher un article au hasard sur la fameuse encyclopédie et distribuer des indices au joueur pour lui faire deviner\n\n\nFonctionnalités de base\n\nConstruire votre énigme\nFiltrer les indices\nDes tests unitaires\nUne interface console simple à destination\n\n\n\nFonctionnalités avancées\n\nFiltrer les articles injouable\nReconnaitre des catégories pour donner plus d’indices (biologie, mathématique, jeux vidéo)\nUn tableau des scores\nDes variantes de jeux\nUne version deux joueurs\nSelection de language\n\n\n\nLes outils\n\nWikipedia\nBase Postgres\nGit\nVscode"
  },
  {
    "objectID": "doc/projet/reunion-lancement.html",
    "href": "doc/projet/reunion-lancement.html",
    "title": "Lancement du projet info 2024-2025",
    "section": "",
    "text": "Rapide tour de table\n\n\n1 min chacun\nEnsuite parlons rapidement Administratif et Logistique\nN’hésitez pas à m’interrompre si questions"
  },
  {
    "objectID": "doc/projet/reunion-lancement.html#merci-bienvenue",
    "href": "doc/projet/reunion-lancement.html#merci-bienvenue",
    "title": "Lancement du projet info 2024-2025",
    "section": "",
    "text": "Rapide tour de table\n\n\n1 min chacun\nEnsuite parlons rapidement Administratif et Logistique\nN’hésitez pas à m’interrompre si questions"
  },
  {
    "objectID": "doc/projet/reunion-lancement.html#administratif",
    "href": "doc/projet/reunion-lancement.html#administratif",
    "title": "Lancement du projet info 2024-2025",
    "section": "Administratif",
    "text": "Administratif\n\nDossier administratif à bien remplir pour être rémunéré\n\nFiche de renseignement\nRIB\nDécision d’engagement\nAttestation sécu\nFiche de paie + attestation employeur (sauf INSEE)\nAutorisation de cumul (fonctionnaires)\n\n\nÀ envoyer à vacatairesensai@ensai.fr\n\nVous recevrez un mail avec toutes les infos\nPaie et Frais :\n\nTP complément info ➡️ décembre\nProjet info ➡️ mars\n\nVacataires -&gt; ENSAI-gestion/frais-vacataires.html\n\n\nRepas Midi\nEntre 12h45 et 14h00, plusieurs possibilités :\n\nMSA ~ 12-15€\nRestaurant du Forum : Menu du jour à 15€\nPopotte personnelle\n\n\n\n1h15 : Assez speed, ne pas trop trainer\nRestaurant du Forum : réserver\nSympa de manger ensemble, après si vous mangez ailleurs n’hésitez pas à prévenir qu’on ne vous attende pas"
  },
  {
    "objectID": "doc/projet/reunion-lancement.html#les-tp",
    "href": "doc/projet/reunion-lancement.html#les-tp",
    "title": "Lancement du projet info 2024-2025",
    "section": "Les TP",
    "text": "Les TP\n\nPage cours et TP 🚧\n\nCours 2023-2024\n\nInfos sur Moodle\n\nqui vont être transférés vers cette page\n\n\n\nAppli Pokemon créée par Rémi comme un projet\nQuand vous avez TP + projet, l’ordre importe peu (sauf ATPA)\n\n\nAccès VM\n\nhttp://view.ensai.fr/\n\nvia navigateur\nou installer VMWare Horizon Client\n\nid et mots de passe envoyés par mail\n\n\nVMWare Horizon Client : Désactiver la vérification de Certificat\nCTRL + ALT + F12\nLes élèves sont incités fortement à faire TP et projet sur la VM car ils ne savent pas faire sur leur machine.\n\n\n\nContenu\n\nTP1 : Git, rappels POO, TU\nTP2 : Webservices\nTP3 : DAO\nTP4 : Session, Création d’une IHM\n\nà inclure : logs, CI, couverture de tests\n\n\nGit\n\npasse au 1er TP cette année\nconfig ssh à faire\n\nLogs : new"
  },
  {
    "objectID": "doc/projet/reunion-lancement.html#le-projet",
    "href": "doc/projet/reunion-lancement.html#le-projet",
    "title": "Lancement du projet info 2024-2025",
    "section": "Le projet",
    "text": "Le projet\n\nRappels des attendus\n\nDévelopper une application en python\nDécouvrir l’architecture logicielle\nCommuniquer avec une base de données PostreSQL\nUtiliser des webservices\nConcevoir et Modéliser\n\n\n\nSujets\n\n15 août au plus tard dernier délai\nLien vers la liste\n\n\n\nContraintes EDT\nSinon : sujet mystère\n\n\n\n\n1ère séance\n\nPrésenter le sujet\nRépondre aux questions\nPrésenter votre mode de fonctionnement\n\n\nConseils des anciens ?\nLes étapes :\n\nlister les fonctionnalités\nmodéliser (diag classe)\ncréer la base de données\ncoder\n\n\n\n\nSuivi\n\nPoint hebdo vendredi soir\n\njeudi soir quand il y a suivi le vendredi\n\nGantt\nProjet GitHub ? un peu lourd ?\nBien sonder le groupe si tout va bien\n\n\n\nInclure une backlog\nEn cas de soucis avec un élève ou un groupe ➡️ me prévenir\n\n\n\n\nÉvaluations\n\nDossier d’analyse\nCode\nEsprit d’équipe\n\n\n\nDossier d’analyse\n\nreçu samedi -&gt; retour vendredi suivant\n\nCode -&gt; grille notation\nRapport -&gt; grille, commun avec jury\n\n\n\n\nTemplate\nModèle qui peut servir de base 🚧\n\nDatalab ?"
  },
  {
    "objectID": "doc/projet/reunion-lancement.html#communiquer",
    "href": "doc/projet/reunion-lancement.html#communiquer",
    "title": "Lancement du projet info 2024-2025",
    "section": "Communiquer",
    "text": "Communiquer\n\nMailing list\nServeur Discord\n\nl’invitation expire le 2 juillet\n\nLudo : 06.45.45.40.82 ou 02.99.05.33.19\n\nbureau 161 (1er étage, au fond côté DSI)\n\n\n\nN’hésitez pas à passer à mon bureau"
  },
  {
    "objectID": "doc/projet/reunion-lancement-slides.html#merci-bienvenue",
    "href": "doc/projet/reunion-lancement-slides.html#merci-bienvenue",
    "title": "Lancement du projet info 2024-2025",
    "section": "Merci & Bienvenue",
    "text": "Merci & Bienvenue\nRapide tour de table\n\n\n1 min chacun\nEnsuite parlons rapidement Administratif et Logistique\nN’hésitez pas à m’interrompre si questions"
  },
  {
    "objectID": "doc/projet/reunion-lancement-slides.html#administratif",
    "href": "doc/projet/reunion-lancement-slides.html#administratif",
    "title": "Lancement du projet info 2024-2025",
    "section": "Administratif",
    "text": "Administratif\n\nDossier administratif à bien remplir pour être rémunéré\n\nFiche de renseignement\nRIB\nDécision d’engagement\nAttestation sécu\nFiche de paie + attestation employeur (sauf INSEE)\nAutorisation de cumul (fonctionnaires)\n\n\nÀ envoyer à vacatairesensai@ensai.fr\n\nVous recevrez un mail avec toutes les infos\nPaie et Frais :\n\nTP complément info ➡️ décembre\nProjet info ➡️ mars\n\nVacataires -&gt; ENSAI-gestion/frais-vacataires.html"
  },
  {
    "objectID": "doc/projet/reunion-lancement-slides.html#les-tp",
    "href": "doc/projet/reunion-lancement-slides.html#les-tp",
    "title": "Lancement du projet info 2024-2025",
    "section": "Les TP",
    "text": "Les TP\n\nPage cours et TP 🚧\n\nCours 2023-2024\n\nInfos sur Moodle\n\nqui vont être transférés vers cette page\n\n\n\nAppli Pokemon créée par Rémi comme un projet\nQuand vous avez TP + projet, l’ordre importe peu (sauf ATPA)"
  },
  {
    "objectID": "doc/projet/reunion-lancement-slides.html#le-projet",
    "href": "doc/projet/reunion-lancement-slides.html#le-projet",
    "title": "Lancement du projet info 2024-2025",
    "section": "Le projet",
    "text": "Le projet"
  },
  {
    "objectID": "doc/projet/reunion-lancement-slides.html#communiquer",
    "href": "doc/projet/reunion-lancement-slides.html#communiquer",
    "title": "Lancement du projet info 2024-2025",
    "section": "Communiquer",
    "text": "Communiquer\n\nMailing list\nServeur Discord\n\nl’invitation expire le 2 juillet\n\nLudo : 06.45.45.40.82 ou 02.99.05.33.19\n\nbureau 161 (1er étage, au fond côté DSI)\n\n\n\nN’hésitez pas à passer à mon bureau\n\n\n\n\nHome — Lancement du projet info"
  },
  {
    "objectID": "doc/projet/notice-eleves.html",
    "href": "doc/projet/notice-eleves.html",
    "title": "Notice élèves",
    "section": "",
    "text": "Tous les élèves de deuxième année (exceptés ceux suivant le parcours recherche ATPA), participent à la réalisation du projet informatique. Ils sont répartis en groupes de 4 à 5 élèves. Ce projet permet d’effectuer un approfondissement et une mise en pratique des connaissances acquises lors des enseignements informatiques de 1ère année. La composition des groupes est définie par le département d’enseignement informatique.\nLe travail demandé consiste à construire une application permettant de répondre à la problématique du sujet proposé. Ce travail se décompose en 3 grandes phases :\n\nÉtude préalable\n\n\ndécrire la solution envisagée\nplanifier les grandes phases de la réalisation (diagramme de cas d’utilisation et diagramme de Gantt)\n\n\nConception générale de l’application\n\n\ndécrire les exigences fonctionnelles générales par la modélisation (diagramme d’activité ou d’états, diagramme de classes, modèle de données…)\nplanifier la mise en place des fonctionnalités (dépendances, priorités…)\n\n\nRéalisation :\n\n\nmise en place de la base de données\ndéveloppement continu du système en python3 accompagné d’une description graphique du ou des modèles choisis (le modèle d’implémentation)\n\n\n\n\n\n\n\nTravaux à rendre\n\n\n\nÀ mi-projet, vous livrerez le dossier d’analyse correspondant au travail réalisé lors des 2 premières phases.\nEn fin de projet, vous devrez rendre un dossier complet, ainsi que votre code.\nVous présenterez vos travaux lors d’une soutenance orale."
  },
  {
    "objectID": "doc/projet/notice-eleves.html#introduction",
    "href": "doc/projet/notice-eleves.html#introduction",
    "title": "Notice élèves",
    "section": "",
    "text": "Tous les élèves de deuxième année (exceptés ceux suivant le parcours recherche ATPA), participent à la réalisation du projet informatique. Ils sont répartis en groupes de 4 à 5 élèves. Ce projet permet d’effectuer un approfondissement et une mise en pratique des connaissances acquises lors des enseignements informatiques de 1ère année. La composition des groupes est définie par le département d’enseignement informatique.\nLe travail demandé consiste à construire une application permettant de répondre à la problématique du sujet proposé. Ce travail se décompose en 3 grandes phases :\n\nÉtude préalable\n\n\ndécrire la solution envisagée\nplanifier les grandes phases de la réalisation (diagramme de cas d’utilisation et diagramme de Gantt)\n\n\nConception générale de l’application\n\n\ndécrire les exigences fonctionnelles générales par la modélisation (diagramme d’activité ou d’états, diagramme de classes, modèle de données…)\nplanifier la mise en place des fonctionnalités (dépendances, priorités…)\n\n\nRéalisation :\n\n\nmise en place de la base de données\ndéveloppement continu du système en python3 accompagné d’une description graphique du ou des modèles choisis (le modèle d’implémentation)\n\n\n\n\n\n\n\nTravaux à rendre\n\n\n\nÀ mi-projet, vous livrerez le dossier d’analyse correspondant au travail réalisé lors des 2 premières phases.\nEn fin de projet, vous devrez rendre un dossier complet, ainsi que votre code.\nVous présenterez vos travaux lors d’une soutenance orale."
  },
  {
    "objectID": "doc/projet/notice-eleves.html#lancement-du-projet",
    "href": "doc/projet/notice-eleves.html#lancement-du-projet",
    "title": "Notice élèves",
    "section": "Lancement du projet",
    "text": "Lancement du projet\n\nLes équipes de projet\nLes équipes sont composées par le responsable de la matière en tenant compte des niveaux constatés en informatique lors de la première année et en veillant à la répartition des élèves admis sur titre. Il est essentiel de veiller à la bonne intégration des élèves admis sur titre au sein des équipes.\n\nUne moyenne pondérée est calculée pour chaque élève à partir des notes de 1A dans les matières informatiques\n\nPOO doc et tests : 0.5, BDR : 0.2, Algo et complexité : 0.2, Projet de traitement de données : 0.1\n\nSuite à ce classement, les élèves sont répartis en 4 poules\nChaque équipe est composée à partir d’un élève de chaque poule\n\nLa composition des équipes n’est pas modifiable !\n\n\nChoix du sujet\nChacun des 8 intervenants de projet a proposé un sujet qui devra permettre l’application de l’ensemble des enseignements informatiques dispensés en 1ère année :\n\nConception d’applications avec UML\nAlgorithmique\nProgrammation orientée objet avec Python\nBases de données relationnelles\n\nChaque intervenant prendra en charge 4 équipes d’élèves qui traiteront le sujet qu’il a proposé.\nVous devrez choisir votre sujet dans la liste accessible sur la plateforme d’enseignement Moodle, suivant la procédure détaillée ci-dessous :\n\nPrenez connaissance des sujets présentés sur la plateforme d’enseignement\nConcertez-vous entre membres d’un même groupe\nOrdonnez les sujets par ordre de préférence sur l’application en ligne accessible via un lien sur la page Moodle du projet\n\n\n\n\n\n\n\nRemarque\n\n\n\nL’attribution des sujets se fait par une procédure automatique en essayant de respecter au maximum la préférence des équipes.\nUne fois attribués, les sujets ne peuvent pas être modifiés.\n\n\n\n\nPremière séance\nDe retour d’étudiants, la première rencontre entre membres d’une même équipe est importante. C’est l’occasion pour vous de faire connaissance et d’échanger honnêtement sur vos capacités et ce que vous attendez du projet. Les équipes qui ont un bon fonctionnement sont celles qui réussissent le mieux. Comme il n’y a pas de recette magique, chaque équipe doit se mettre d’accord sur son fonctionnement."
  },
  {
    "objectID": "doc/projet/notice-eleves.html#organisation-et-suivi",
    "href": "doc/projet/notice-eleves.html#organisation-et-suivi",
    "title": "Notice élèves",
    "section": "Organisation et suivi",
    "text": "Organisation et suivi\n\nLe chef de projet\nAu sein de chaque équipe, les élèves devront désigner un chef de projet qui sera responsable de l’animation du groupe et qui organisera les réunions de travail. Il sera également responsable de la répartition et du suivi de l’avancement du travail. Il devra également veiller au respect du planning général. Il est l’interlocuteur privilégié de l’encadrant pour l’équipe qu’il représente. Il doit permettre la discussion et la prise de décision collégiale.\nCe rôle n’a pas être lié aux compétences informatiques, mais à l’appétence pour la gestion d’équipe. Ce rôle pourra être valorisé dans la note individuelle du rapport final.\n\n\nGestion de projet et de communication\nil est recommandé d’utiliser Microsoft Teams pour planifier vos travaux et échanger. Le création d’une conversation pour le groupe semble le minimal. Mais vous pouvez également installer des plugins pour vous aider à gérer votre projet. Voici quelques propositions :\n\nTrello : pour avoir un kanban collaboratif ;\nPriority Matrix : pour prioriser vos tâches ;\n\nVous pouvez également utiliser d’autres logiciels pour communiquer, comme Slack ou Discord (qui sont propriétaires comme Teams). Utiliser Facebook Messenger ou autres applications liées à un réseau social est déconseillé car elles ne sont pas utilisées pour gérer un projet en entreprise. La limite de ces logiciels de messagerie est qu’ils ne proposent pas de salon de discussions thématiques pour segmenter vos échanges. Cela entraine de la perte d’informations quand plusieurs discussions se mélangent.\nPour les personnes qui ont du mal à s’organiser mais qui sont sensible à la gamification vous pouvez également utiliser Habitica (https://habitica.com/static/home) pour vous aider à travailler régulièrement.\n\n\nPoint hebdo\nChaque semaine (jusqu’au rendu du rapport final et sauf pendant les vacances), vous devrez remplir votre point hebdomadaire de suivi de projet :\n\nQuand : le Jeudi soir au plus tard\nOù : sur votre dépôt Git, dossier doc/suivi\nComment : créez un fichier nommé YYYY.MM.DD-semaineN.md en utilisant le modèle ci-dessous\nQui : tous les membres de l’équipe\nQuoi : listez les tâches accomplies\nPourquoi : il permettra à votre tutrice ou tuteur de suivre l’évolution de votre travail\n\n\n\n\n\n\n\nImportant\n\n\n\nLe point hebdomadaire est obligatoire. Vous serez pénalisés si vous ne le remplissez pas ou si vous le rendez en retard.\n\nSi vous n’avez pas travaillé sur le projet depuis une semaine (et vous avez le droit) ➡️ mettez simplement ras (rien à signaler)\nSi une tâche n’est pas terminée, vous pouvez ajouter le suffixe WIP (Work In Progress)\n\nPour information, le projet informatique vous permet d’obtenir 4 ECTS, ce qui représente un investissement d’environ 100h (séances en présentiel comprises) par élève.\n\n\n\n\n\n\n\n\nTip\n\n\n\nN’attendez pas le jeudi soir pour essayer de vous remémorer tout ce que vous avez fait depuis une semaine.\nPrenez l’habitude de lister vos tâches au fur et à mesure !\n\n\n\nModèleExemple\n\n\n\n\nYYYY.MM.DD-semaineN.md\n\n# Point Hebdomadaire - Projet\n\nDate : Jeudi ...\nSemaine n° ...\n\n## Tâches réalisées cette semaine\n\n&gt; Exemples : `- [x] Tâche 1` ou - `ras`\n\n### Nom Prénom élève 1\n\n### Nom Prénom élève 2\n\n### Nom Prénom élève 3\n\n### Nom Prénom élève 4\n\n### Nom Prénom élève 5\n\n---\n\n## Backlog\n\n&gt; Liste des tâches en attente de prise en charge.\n\n### Prioritaires\n\n### Secondaires\n\n\n\n\n\n2024.09.12-semaine2.md\n\n# Point Hebdomadaire - Projet Ninja\n\nDate : Jeudi 12 septembre 2024\nSemaine n° 2\n\n## Tâches réalisées cette semaine\n\n### Maud ZARELLA\n- [x] Création de la classe JoueurDAO et des méthodes\n- [x] Tests unitaires JoueurDAO\n- [x] JoueurService : ajout méthode pour supprimer un joueur\n\n### Tom ATE\n- [x] Mise en forme du diagramme de classe avec PlantUML\n- [x] Rapport : présentation des classes WIP\n\n### Anna NACE\n- ras\n\n### Harry COVER\n- [x] Modification de la base de données : modification de la table *joueur*, création table *arbitre*\n- [x] Refactor : utilisation du package *tabulate* pour avoir de jolis tableaux\n\n### Éva ZION\n- [x] Codage de la fonctionnalité *Créer un tournoi* (Vue + Services + Dao)\n- [x] Relecture dossier analyse\n\n## Backlog\n\n### Prioritaires\n- [ ] Corriger Bug de modification de joueur\n- [ ] Fonctionnalité *Arbitrer un tournoi*\n- [ ] Menu administrateur\n\n### Secondaires\n- [ ] Ecrire README\n\n\n\n\nL’encadrement de l’avancement du projet se déroulera généralement sur 3 heures par semaine. Chaque groupe fera le bilan avec son intervenant du travail qui a été réalisé au cours de la semaine, des difficultés rencontrées et de ce qui doit encore être fait.\n\n\n\n\n\n\nCaution\n\n\n\nÀ chaque séance, l’encadrant notera si un travail sérieux a été réalisé depuis la semaine dernière. Un travail régulier tout le long du projet sera récompensé, tandis qu’un travail fait uniquement avant les rendus sera pénalisé.\n\n\nLes séances de suivi sont obligatoires. L’appel sera effectué en début et en fin de séance. Votre intervenant pourra demander à tout moment à parler avec la totalité des élèves qu’il encadre."
  },
  {
    "objectID": "doc/projet/notice-eleves.html#outils-et-cours",
    "href": "doc/projet/notice-eleves.html#outils-et-cours",
    "title": "Notice élèves",
    "section": "Outils et Cours",
    "text": "Outils et Cours\n\nLien avec le module de Compléments d’informatique\nPour vous aider à mener à bien votre projet, un cours de 6h, et quatre TP de 3h sont mis en place dans le module de Compléments d’informatique. Lors du cours, vous seront présentés l’organisation générale du projet et quelques concepts nouveaux mis en œuvre lors des TP :\n\nprogrammation en couches,\nsystèmes de versionnement (git),\nappel à un webservice,\nliens entre données dans un programme et dans une base de données\n\nBien que ce cours ait pour utilité directe de vous aider à mener à bien votre projet, il a également pour but final de vous donner des connaissances supplémentaires en informatique pour que vous puissiez évoluer facilement dans le monde de la data science.\n\n\nOutils de développement\nLes outils de développement à votre disposition seront :\n\nL’environnement de développement Visual Studio Code disponible sur votre VM\nLe logiciel de partage de code et versionnement Git, accessible depuis l’environnement de développement, accompagné d’un dépôt (privé) que vous devrez créer sur un serveur public (GitLab, Github, Bitbucket),\nUne base de données PostgreSQL (hébergée à l’Ensai) comme système de gestion de base de données (SGBD) pour la persistance des données,\nUn certain nombre de librairies et outils pour le lien entre Python et le SGBD, les tests unitaires, la génération automatique de documentations\n\npsycopg2 pour se connecter à la base de données postgreSQL,\nrequests pour réaliser des requêtes http\npytest pour les tests unitaires,\npydoc pour la documentation,\nabc pour les classes abstraites,\nfastAPI pour la création d’un webservice REST\n\n\nEn plus de cette liste, vous êtes libre d’utiliser les outils de votre choix, à condition d’être capable de les utiliser en toute autonomie.\n\n\n\n\n\n\nRemarque\n\n\n\nDemander de l’aide est normal et fait partie de l’apprentissage. Nous ne notons pas quels sont les groupes qui nous demandent de l’aide. Faire preuve d’autonomie ne veut pas dire travailler sans demander de l’aide. Si vous rencontrez une difficulté, qu’après plusieurs tentatives vous ne trouvez pas de solution et que vous demandez finalement de l’aide pour la résoudre, vous êtes autonome.\nSi par contre vous attendez que le problème disparaisse ou que l’on vienne vous aider, là vous manquez d’autonomie. Soyez proactif dans votre démarche ! Vous progresserez bien plus vite."
  },
  {
    "objectID": "doc/projet/notice-eleves.html#travail-attendu",
    "href": "doc/projet/notice-eleves.html#travail-attendu",
    "title": "Notice élèves",
    "section": "Travail attendu",
    "text": "Travail attendu\n\nProcessus de développement\nLe développement s’effectuera collectivement et en cascade. Les phases d’étude préalable, de conception générale, de réalisation et de validation s’enchaînent successivement dans le temps.\n\n\nÉtude préalable\nCette 1ère phase d’analyse consiste en la formalisation des besoins décrits par le cahier des charges (le sujet, le point de vue du demandeur ou du maître d’ouvrage). Elle devra permettre d’établir :\n\nLe périmètre du système d’information cible en reprécisant les aspects du sujet qui peuvent apparaître flous\nLes besoins à satisfaire par le système d’information cible (cas d’utilisation et description des menus)\nLes exigences particulières et les contraintes (normes de développement, architecture)\n\n\n\nConception générale du logiciel\nCette 2e phase d’analyse aboutira à un modèle de conception pour répondre aux objectifs fixés par le cahier des charges. Le choix des diagrammes est fait par chaque groupe après validation de leur intervenant. Nous y trouverons cependant au minimum :\n\nUn diagramme de cas d’utilisation\nUn diagramme de classes\nUn modèle physique de données\n\nEn fonction de votre sujet et de ce que vous demande votre intervenant vous pourrez y ajouter :\n\nUn diagramme de d’activité ou d’état\nUn diagramme de séquence\nUn modèle logique de données (diagramme entité-relation)\n\n\n\n\n\n\n\nTip\n\n\n\n\nles sujets et les encadrants sont différents, alors préférez faire des choses cohérentes avec ses attendus, que simplement cocher des cases\nsi certains diagrammes ne vous disent rien, il y a plusieurs livres sur la modélisation UML à la bibliothèque.\n\n\n\n\n\nRéalisation et Validation du logiciel\n\nLa base de données\nL’application s’appuiera sur une base de données, que vous devez créer. Pour vous sensibiliser à la variété des données, votre travail devra comporter l’importation ou l’exportation d’un jeu de données. Ce jeu de données sera fourni par l’encadrant dans le format de son choix (XML, JSON, CSV…).\n\n\nCodage de l’application\nL’application sera réalisée en Python. Le code sera naturellement cohérent avec les diagrammes du modèle de conception déjà établis. Si nécessaire, ces derniers seront mis à jour afin que cette cohérence soit maintenue.\nIl n’y a pas d’interface graphique à développer, la communication avec l’application se faisant par l’intermédiaire de la console ou d’un webservice. Toutes les fonctionnalités de votre application doivent pouvoir être testées et démontrées via la console ou des requêtes http.\n\n\nValidation du logiciel\nTout au long du développement, vous développerez un ensemble de tests :\n\nTests unitaires\nTests utilisateurs pour chaque cas d’utilisation important."
  },
  {
    "objectID": "doc/projet/notice-eleves.html#livraisons",
    "href": "doc/projet/notice-eleves.html#livraisons",
    "title": "Notice élèves",
    "section": "Livraisons",
    "text": "Livraisons\n\nDossier d’analyse\n\n\n\n\n\n\nImportant\n\n\n\n\nOù : sur Moodle, dans la section prévue à cet effet\nQuand : début octobre\nComment : en format pdf. Il n’est pas obligatoirement rédigé en LaTeX mais doit-être « propre »\nCombien : 10 à 15 pages, annexes comprises est une taille raisonnable\nPourquoi : il sera noté par votre intervenant qui vous en fera un retour\n\n\n\nCe premier livrable est l’aboutissement de la phase d’étude préalable et de conception générale. Il doit montrer que vous avez compris votre sujet et que vous avez une première modélisation de votre application. Ainsi cette livraison contiendra :\n\nUn planning détaillé des 3 phases décrites ci-dessus (diagramme de Gantt incluant un volume horaire prévu pour chaque tâche)\nLes diagrammes réalisés pendant la phase d’analyse\nUn document d’architecture spécifiant l’organisation logique des sous-systèmes techniques (paquetages métier, persistance)\nLes principaux menus de l’application et leurs enchainements si cela a du sens\nLes principaux endpoints de votre application si cela a du sens\nUne description des fonctionnalités de votre application\nUne liste des composants à implémenter ainsi que :\n\nLeur rôle\nLa description de leurs dépendances réciproques\nLe temps de développement prévu pour chacun d’entre eux\nL’ordre de priorité initiale\n\n\n\n\nLe rapport final\nVotre rapport final doit présenter le travail réalisé pendant ces 3 mois. Voici les éléments qu’il devra contenir :\n\nLe contexte de votre application\nCette partie doit permettre à une personne externe à votre projet et sans expérience particulière en informatique de comprendre l’intérêt de votre travail. Ainsi, il vous est conseillé de faire relire cette partie par une personne externe à votre groupe (ami, famille). La rédaction de cette partie peut commencer très tôt car elle ne repose pas sur des éléments techniques que vous allez implémenter.\n\nÀ quels besoins répond-elle ? Le diagramme de cas d’utilisation n’est pas nécessaire dans le rapport final ;\nQuels sont les utilisateurs de l’application ?\nQuelles sont les données intéressantes de votre application. Si vous utilisez des données externes présentez leur source, le format, et les concepts associés. Si vous enproduisez, présentez le format des données et comment elles peuvent être utilisées. Par exemple :\n\nVous récupérez des annonces immobilières via webscrapping, quel est le site ou quels sont les sites utilisés ? Quelles données récupérées vous de la page ? Vous pourrez décrire plus tard comment vous les récupérez ;\nVous devez traiter des données géographiques, comment sont stockées vos données dans votre source ? Il y-a-t-il des difficultés particulières dans ces données ?\nVous récupérez des données d’un service externe, quel est le schéma de ces données ?\n\n\n\n\nArchitecture générale\n\nEst-ce un module python ? Un script sans interaction avec l’utilisateur ? Une application en console ? Une application avec un client et un serveur qui communiquent via requête http ?\nLes technologies nécessaires à son fonctionnement (python, bibliothèques majeures utilisées, système de persistance, sources de données externes)\nUn schéma d’architecture (pour faire le lien entre les différents composants de votre application comme votre code, système de persistance, etc.)\n\n\n\nRéponse aux besoins\nComment votre application permet de répondre aux besoins que vous avez décrits :\n\nLe fonctionnement votre application :\n\nZoom sur un processus central en le détaillant complètement pour que le jury comprenne la logique que vous avez mis en place. Qu’est-ce que l’utilisateur fait ? Qu’est-ce que votre produit fait ? Comment interagit-il avec les autres composants ? Quelles sont les classes utilisées ? Il n’est pas utile de préciser les méthodes appelées, sauf si vous pensez que cela a un intérêt. Pour aider le lecteur, vous pouvez ajouter des diagrammes de cas d’utilisations, mais aussi des schémas divers ;\nExplication rapide pour les autres. Votre rapport ne doit pas être un listing des fonctions pythons de votre application ;\n\n\nPrivilégiez la qualité des explications à la quantité. Si vous décrivez sérieusement une fonctionnalité centrale intéressante, le jury supposera que vous êtes capable de faire la même chose pour les autres. Vous pouvez illustrer vos propos en utilisant votre diagramme de classe. Cela vous permet :\n\nD’expliquer les héritages/associations utilisés\nDe présenter les objets métiers et comment ils sont utilisés par l’application\nDe mettre en avant une décomposition en couche, un découplage entre les objets\n\n\n\n\n\n\n\nRemarque\n\n\n\nUn diagramme de classe n’est pas une finalité en soit, il est initialement produit pour servir de boussole lors de l’implémentation de votre application. De la même manière, dans votre rapport il doit servir à guider vos explications. Ainsi, il n’est pas nécessaire de produire un diagramme de classe unique si celui-ci est illisible. Vous pouvez le décomposer en petits diagrammes qui vont se concentrer sur des fonctionnalités particulières. De même, il est fortement déconseillé de lister et décrire exhaustivement toutes les classes et les méthodes.\n\n\n\n\nSystème de stockage\nÀ quels moments il est utilisé dans votre application et pourquoi ? Vous pouvez mettre en avant l’utilisation de formes normales.\nEn effet ce projet doit vous permettre de mettre en avant vos acquis de 1A en la matière. Il est inutile de nous présenter l’intégralité de vos DAOs\n\n\nOutils mis en place\nLes outils mis en place pour réaliser le projet :\n\nL’organisation que vous avez choisie dans votre groupe ;\nLes outils mis en place et leur utilisation ;\nLa démarche d’assurance qualité. Le but de cette partie est de montrer que vous avez pris en compte les évènements extérieurs qui peuvent impacter votre application.\n\nAvez-vous fait des tests ? Pourquoi avez-vous testé ces classes en particulier ? Qu’est-ce que cela vous a apporté ?\nAvez-vous rencontré des temps de traitement longs ? D’où viennent-ils ? Les avez-vous surmontés ?\nSi votre source de données venait à disparaitre mais qu’une nouvelle source similaire existait, comment cela impacterait-il votre application ?\nSi vous avez mis de côté des fonctionnalités au cours de votre développement, comment peuvent-elles être mis en place dans le futur ?\n\n\n\n\nNote individuelle\nLors du rendu du rapport chaque élève de chaque groupe joindra une note décrivant son expérience au sein du groupe de projet. Cette note devra être insérée dans le rapport final en fin de rapport. Dans cette note d’une page maximum, vous relaterez aussi bien les bonnes pratiques mises en œuvre que les problèmes rencontrés. Vous pouvez adopter un style moins formel que pour le rapport, mais gardez en tête que cette note est lue par le jury au même titre que le reste du rapport. Conservez une mise en page correcte pour cette note. Pour vous aider voici des éléments qui ont leur place dans cette note :\n\nVotre participation effective au projet (chef de projet, code, animation…)\nComment avez-vous vécu le projet avec votre groupe. Est-ce difficile ? Enrichissant ? Éviter les lieux communs, et préférez utilisez des exemples concrets. Vous pouvez mettre en avant des points de tensions qui se sont produits.\nLes enseignements que vous en tirez, ce que vous referiez, ce que vous changerez. Vous pouvez construire cette partie comme une des conseils que vous donnez à vos successeurs.\n\nNous vous conseillons la relecture de cette production individuelle par une autre personne (membre du groupe, ami, famille) pour limiter les fautes et ainsi vous assurer qu’elle est compréhensible. Cette note personnelle est appréciée par les membres du jury, faites-la sérieusement et honnêtement.\n\n\n\nLe code\nLe code source complet de l’application contenant à minima :\n\nUn fichier main.py qui permet de lancer votre application\nUne fichier README.md à la racine du projet présentant votre projet. Cette page sera rédigée en anglais et devra :\n\nPrésenter rapidement votre application (but) avec quelques exemples\nExpliquer comment l’installer\n\nUn fichier requirements.txt avec tous les modules pythons à installer pour faire fonctionner votre application\nun fichier data/init_db.sql permettant la création des tables et des données\n\nBien entendu, cette liste ne définit que les composantes minimales de votre rendu. Chaque groupe de projet est libre de fournir toutes les informations complémentaires qui lui parait pertinentes pour mettre en avant son travail. Cela peut-être : expliquer des choix de conceptions qui vous semblent pertinents, des outils que vous avez utilisés ou toute autre information qui vous permet de valoriser votre travail. Vous avez le droit d’illustrer vos propos avec des figures pour aider le lecteur. Les images qui n’apportent rien à votre propos sont à proscrire.\nL’ordre de présentation des différents points, et de leur classement en annexe est libre. La taille optimale de ce rapport est de 25 pages hors annexe. Vous pouvez faire plus long mais dans ce cas posez-vous la question : « Ce que j’ajoute est-il nécessaire ? ». Il n’est pas obligatoire de le rédiger en LaTeX. Enfin, un minimum de rigueur est attendu de futurs ingénieurs. Un nombre limité de coquilles dans votre production est toléré, par contre si cela nuit à la compréhension de votre rapport vous serez sanctionnés.\n\n\n\n\n\n\nRemarque\n\n\n\nDans le cas où vous rédigez votre rapport en LaTeX, faites attention au placement des images. Certains d’entre vous usent et abusent du package float et l’option [H] pour fixer les images. Cela entraine de gros espaces laissés blancs dans vos rapports et donne une mauvaise impression au lecteur. Privilégier l’option [htb]. Le placement sera moins précis, mais limitera ces zones blanches.\n\n\nPendant le temps entre ce rendu et la soutenance vous avez le droit de modifier votre code, mais ces modifications ne devront être là uniquement pour améliorer la qualité de la démonstration car ce nouveau code ne sera jamais livré pour notation.\n\n\nLa soutenance\nVous présenterez votre travail devant un jury de 3 personnes :\n\nun président de jury, qui est un professionnel de l’informatique\nvotre encadrant\nun représentant de l’Ensai\n\nLa soutenance consistera en une présentation orale de votre logiciel, partagée équitablement entre les membres du groupe. Elle fera apparaître la méthode de développement utilisée, les choix et options de conception et de programmation retenues. Cette présentation durera 20 minutes, dont 12 minutes environ devront être consacrées à une présentation type diaporama et 8 minutes à la démonstration de l’application. L’organisation du temps est libre mais doit être dynamique.\nSuivra une séance de questions du jury d’environ 15 minutes. Puis 5 minutes de retours du jury après délibération.\nLe jury est bienveillant et ne cherchera pas à vous piéger !\nQuelques conseils pour cette soutenance :\n\nPrésentez brièvement les membres du groupe\nMême si les membres du jury ont lu votre rapport, prenez le temps de présenter sommairement le besoin initial et les données impliquées s’il y en a\nÉvitez les présentations catalogues du type : « On a fait ça, ça et aussi ça ». Le jury déteste, surtout quand c’est le 4e groupe de suite qui raconte la même chose. Soyez un minimum original, prenez un angle décalé, racontez une histoire !\nPrésentez la plus-value du groupe :\n\nAvez-vous fait des choix forts ?\nAvez-vous mis en place un processus intéressant ?\nRépondez-vous au besoin ?\n\nIl n’est pas nécessaire de suivre le même déroulé que le rapport, ni de représenter le rapport (le jury l’a lu). Par exemple, si vous avez expliqué rapidement une fonctionnalité dans le rapport mais qu’elle vous semble intéressante, vous pouvez la détailler plus lors de la soutenance. Le jury aime la nouveauté\nMettez en avant le projet (comment avez-vous travaillé ces 3 mois) et pas seulement le logiciel produit (vous n’essayez pas de nous vendre votre application)\nVous pouvez mélanger chronologiquement la présentation et la démo\nIllustrez vos transparents avec des schémas / graphiques / captures d’écran / … Faites attention que vos images soient lisible une fois projetées. Mais ne mettez pas des illustrations inutiles. Si un diaporama illustré est agréable si les images utilisées aident à la compréhension, un trop plein d’images sans rapport avec le propos nuisent à la compréhension\nNe mettez pas de code, mais du pseudo-code (et uniquement si l’algorithme est intéressant)\nTravaillez votre introduction et votre conclusion\n\n\n\nNotation finale\nLa note finale du projet se répartit comme suit :\n\nDossier d’analyse et investissement dans le projet (1/3)\nRapport final et investissement dans le projet (1/3)\nSoutenance (1/3)\n\nLe code est noté à part. Il compte pour un tiers de la note de Compléments d’informatique.\nSi le travail ou l’implication d’un ou plusieurs membres du groupe étaient en deçà des attentes, leurs notes pourraient être dissociées de celle du reste du groupe. Cela ne sera possible qu’après avoir alerté votre tuteur et le référent de la matière et qu’une discussion avec le groupe ait eu lieu.\nVous trouverez sur Moodle les grilles de notation qui sont fournies aux intervenants, pour évaluer votre travail, cette annexe a un rôle de sensibilisation et ne constitue pas un barème définitif."
  },
  {
    "objectID": "doc/projet/notice-eleves.html#calendrier",
    "href": "doc/projet/notice-eleves.html#calendrier",
    "title": "Notice élèves",
    "section": "Calendrier",
    "text": "Calendrier\n\n\n\nDate\nSujet\n\n\n\n\nvendredi 6 septembre\nSuivi 1\n\n\nvendredi 13 septembre\nSuivi 2\n\n\nvendredi 27 septembre\nSuivi 3\n\n\nsamedi 5 octobre 12h00\nDossier d’Analyse\n\n\nvendredi 11 octobre\nSuivi 4\n\n\n21 au 23 octobre\n3j immersion (Suivi 5 et 6)\n\n\nvendredi 15 novembre\nSuivi 7\n\n\nsamedi 23 novembre 20h00\nRapport final et Code\n\n\njeudi 12 décembre\nSoutenances\n\n\n\nLes 21, 22 et 23 octobre aura lieu une période d’immersion. Pendant ces 3 jours, vous n’aurez pas cours et pourrez avancer votre projet. La présence dans l’école est obligatoire et sera contrôlée.\nÀ la fin de ces 3 jours, avec un travail sérieux et efficace, vous devriez avoir bien avancé la phase de code (&gt; 80 %) et commencé le squelette du rapport final. Ainsi, vous serez beaucoup plus sereins pour attaquer la dernière ligne droite en novembre.\nVous verrez votre tuteur le premier jour pour qu’il vous aide à prioriser vos travaux, et le dernier pour vous aider. Une démonstration, même limitée, de votre application sera demandée le mercredi."
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#objectifs",
    "href": "doc/projet/presentation-tuteurs-slides.html#objectifs",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Objectifs",
    "text": "Objectifs\n\nDévelopper une application en python\nDécouvrir l’architecture logicielle\nCommuniquer avec une base de données PostreSQL\nUtiliser des webservices\nConcevoir et Modéliser"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#compétences-visées",
    "href": "doc/projet/presentation-tuteurs-slides.html#compétences-visées",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Compétences visées",
    "text": "Compétences visées\n\nTravailler en groupe (organisation, suivi, git)\nModéliser une application complexe (UML)\nAppliquer les principes de la POO\nValoriser son travail à l’écrit et à l’oral"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#cours",
    "href": "doc/projet/presentation-tuteurs-slides.html#cours",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Cours",
    "text": "Cours\nLe cours de compléments d’informatique vise à fournir aux élèves les outils pour mener à bien le projet informatique.\n\n6h des cours\n4 TP de 3h\n\ndispensés par les tutrices / tuteurs\nle sujet est fourni"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#cadre-général-du-projet",
    "href": "doc/projet/presentation-tuteurs-slides.html#cadre-général-du-projet",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Cadre général du projet",
    "text": "Cadre général du projet\n\n1er semestre de 2A\nGroupes imposés de 4 ou 5 élèves\nLes groupes votent pour leurs sujets préférés\n4 groupes par tutrice / tuteur"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#phases",
    "href": "doc/projet/presentation-tuteurs-slides.html#phases",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "2 phases",
    "text": "2 phases\n\nAnalyse / Conception générale (sept)\n\n4 séances de 3h de suivi\nla séance de mi-octobre permet de faire un retour aux équipes sur le dossier d’analyse\n\nImplémentation (oct-nov)\n\n3 séances de 3h de suivi"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#livrables",
    "href": "doc/projet/presentation-tuteurs-slides.html#livrables",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Livrables",
    "text": "Livrables\n\n5 octobre : Dossier d’analyse\n23 novembre : Rapport final + code\n12 décembre : Soutenance"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#planning",
    "href": "doc/projet/presentation-tuteurs-slides.html#planning",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Planning",
    "text": "Planning\n\n\n\n\n\n\ngantt\n    title Planning provisoire 2024\n    dateFormat  YYYY-MM-DD\n    axisFormat  %d %b\n    tickInterval 1week\n    \n    section Cours\n    CM                           :milestone, 2024-09-02,\n    CM                           :milestone, 2024-09-09, \n    Examen                       :milestone, 2024-10-07,\n    \n    section TP\n    TP1                          :milestone, 2024-09-06,\n    TP2                          :milestone, 2024-09-13,\n    TP3                          :milestone, 2024-09-20,\n    TP4                          :milestone, 2024-09-27,\n    \n    section Projet\n    Suivi 1                      :milestone, 2024-09-06,\n    Suivi 2                      :milestone, 2024-09-13,\n    Suivi 3                      :milestone, 2024-09-27,\n    Suivi 4                      :milestone, 2024-10-11,\n    3j immersion (Suivi 5 et 6)  :active,    2024-10-21, 3d\n    Suivi 7                      :milestone, 2024-11-15,\n    \n    section Échéances\n    WEI                          :crit,      2024-09-20, 3d\n    Dossier Analyse              :milestone, 2024-10-05,\n    Toussaint                    :crit,      2024-10-26, 2024-11-03\n    Rapport final et Code        :milestone, 2024-11-23,\n    Soutenance                   :milestone, 2024-12-12,\n    \n    %%Stats univariées retraités   :done,         2021-11-28, 3d"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#sujet",
    "href": "doc/projet/presentation-tuteurs-slides.html#sujet",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Sujet",
    "text": "Sujet\nÀ vous de jouer pour trouver une bonne idée !"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#résumé-du-travail-de-tutrice-tuteur",
    "href": "doc/projet/presentation-tuteurs-slides.html#résumé-du-travail-de-tutrice-tuteur",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Résumé du travail de tutrice / tuteur",
    "text": "Résumé du travail de tutrice / tuteur\n\n4 x 3h de TP de compléments d’informatique\n7 x 3h de suivi de projet\nLire et noter les 4 dossiers d’analyse\nNoter le code\nLire du rapport final, participer à la notation\nParticiper aux 4 soutenances"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#votre-rôle",
    "href": "doc/projet/presentation-tuteurs-slides.html#votre-rôle",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Votre rôle",
    "text": "Votre rôle\n\nGuider les élèves\nSuivi des équipes (avancement, participation, bonne entente)\nMaîtrise d’Ouvrage\nAide au débogage"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#stack-vm",
    "href": "doc/projet/presentation-tuteurs-slides.html#stack-vm",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Stack VM",
    "text": "Stack VM\n\nPython 3.10\nPostgreSQL (chaque élève a une BDD)\nGit Bash\nVisual Studio Code"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs-slides.html#points-à-préciser",
    "href": "doc/projet/presentation-tuteurs-slides.html#points-à-préciser",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Points à préciser",
    "text": "Points à préciser\n\nIdée pour suivre le projet\n\npoint hebdo : tout le monde doit envoyer son point hebdo chaque vendredi soir\nKanban (GitHub project)\n\nCI/CD basique (TU, cov, pylint)\ninclure l’utilisation de logs\n\n\n\n\nHome — Présentation aux tutrices et tuteurs"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html",
    "href": "doc/projet/presentation-tuteurs.html",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "",
    "text": "Développer une application en python\nDécouvrir l’architecture logicielle\nCommuniquer avec une base de données PostreSQL\nUtiliser des webservices\nConcevoir et Modéliser"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#objectifs",
    "href": "doc/projet/presentation-tuteurs.html#objectifs",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "",
    "text": "Développer une application en python\nDécouvrir l’architecture logicielle\nCommuniquer avec une base de données PostreSQL\nUtiliser des webservices\nConcevoir et Modéliser"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#compétences-visées",
    "href": "doc/projet/presentation-tuteurs.html#compétences-visées",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Compétences visées",
    "text": "Compétences visées\n\nTravailler en groupe (organisation, suivi, git)\nModéliser une application complexe (UML)\nAppliquer les principes de la POO\nValoriser son travail à l’écrit et à l’oral"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#cours",
    "href": "doc/projet/presentation-tuteurs.html#cours",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Cours",
    "text": "Cours\nLe cours de compléments d’informatique vise à fournir aux élèves les outils pour mener à bien le projet informatique.\n\n6h des cours\n4 TP de 3h\n\ndispensés par les tutrices / tuteurs\nle sujet est fourni\n\n\n\nNotions abordées en cours\n\nUtilisation basique de Git\nRappels de POO\nDécomposer une application en couches\nCommuniquer avec une base de données / une API\nTests unitaires\nDocumentation"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#cadre-général-du-projet",
    "href": "doc/projet/presentation-tuteurs.html#cadre-général-du-projet",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Cadre général du projet",
    "text": "Cadre général du projet\n\n1er semestre de 2A\nGroupes imposés de 4 ou 5 élèves\nLes groupes votent pour leurs sujets préférés\n4 groupes par tutrice / tuteur"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#phases",
    "href": "doc/projet/presentation-tuteurs.html#phases",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "2 phases",
    "text": "2 phases\n\nAnalyse / Conception générale (sept)\n\n4 séances de 3h de suivi\nla séance de mi-octobre permet de faire un retour aux équipes sur le dossier d’analyse\n\nImplémentation (oct-nov)\n\n3 séances de 3h de suivi"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#livrables",
    "href": "doc/projet/presentation-tuteurs.html#livrables",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Livrables",
    "text": "Livrables\n\n5 octobre : Dossier d’analyse\n23 novembre : Rapport final + code\n12 décembre : Soutenance\n\n\nDossier d’analyse\nDocument d’une dizaine de pages contenant :\n\nla compréhension du besoin\nun planning (diagramme de Gantt)\ndes diagrammes UML (cas d’utilisation, classe…)\n\n\n\nSoutenance\nLes soutenances ont lieu début décembre.\nLes élèves présentent leur projet à un jury composé de 3 personnes :\n\nun président de jury\nun enseignant de l’ENSAI\nla tutrice / le tuteur\n\n\n\nNotes\n\n\n\nLivrable\nCorrecteur\nCoef projet\nCoef cours\n\n\n\n\nDossier d’analyse\nTutrice / Tuteur\n1/3\n\n\n\nCode\nTutrice / Tuteur\n\n1/3\n\n\nRapport final\nJury\n1/3\n\n\n\nSoutenance\nJury\n1/3\n\n\n\nDevoir sur table\nEnseignant\n\n2/3\n\n\n\nLe code du projet comptera pour un tiers de la note du cours de Compléments d’informatique."
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#planning",
    "href": "doc/projet/presentation-tuteurs.html#planning",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Planning",
    "text": "Planning\n\n\n\n\n\n\ngantt\n    title Planning provisoire 2024\n    dateFormat  YYYY-MM-DD\n    axisFormat  %d %b\n    tickInterval 1week\n    \n    section Cours\n    CM                           :milestone, 2024-09-02,\n    CM                           :milestone, 2024-09-09, \n    Examen                       :milestone, 2024-10-07,\n    \n    section TP\n    TP1                          :milestone, 2024-09-06,\n    TP2                          :milestone, 2024-09-13,\n    TP3                          :milestone, 2024-09-20,\n    TP4                          :milestone, 2024-09-27,\n    \n    section Projet\n    Suivi 1                      :milestone, 2024-09-06,\n    Suivi 2                      :milestone, 2024-09-13,\n    Suivi 3                      :milestone, 2024-09-27,\n    Suivi 4                      :milestone, 2024-10-11,\n    3j immersion (Suivi 5 et 6)  :active,    2024-10-21, 3d\n    Suivi 7                      :milestone, 2024-11-15,\n    \n    section Échéances\n    WEI                          :crit,      2024-09-20, 3d\n    Dossier Analyse              :milestone, 2024-10-05,\n    Toussaint                    :crit,      2024-10-26, 2024-11-03\n    Rapport final et Code        :milestone, 2024-11-23,\n    Soutenance                   :milestone, 2024-12-12,\n    \n    %%Stats univariées retraités   :done,         2021-11-28, 3d\n\n\n\n\n\n\n\n\nDates\n\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\nvendredi 6 septembre\nTP1 et Suivi 1\n\n\nvendredi 13 septembre\nTP2 et Suivi 2\n\n\nvendredi 20 septembre\nTP3\n\n\nvendredi 27 septembre\nTP4 et Suivi 3\n\n\nvendredi 11 octobre\nSuivi 4 (retour sur les dossiers d’analyse)\n\n\nlun-mer 21-23 octobre\n3 jours d’immersion (Suivi 5 et 6)\n\n\nvendredi 15 novembre\nSuivi 7\n\n\njeudi 12 décembre\nSoutenance"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#sujet",
    "href": "doc/projet/presentation-tuteurs.html#sujet",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Sujet",
    "text": "Sujet\nÀ vous de jouer pour trouver une bonne idée !\n\nÉléments requis\n\nUtilisation de la POO\nStockage en BDD (sans utiliser d’ORM type SQLAlchemy)\nUtilisation et / ou Création d’un webservice\nPas d’interface graphique\n\npour les sujets n’impliquant pas de création de WS, InquirerPy sera utilisé comme IHM en mode console\n\n\n\n\nExemples de sujets\n\nApplication utile\n\ndonnées SNCF pour optimiser ses réductions\nréduire l’impact carbone de la VOD\nrecherche de stage, de velib, de carburant moins cher, de bières\nrecommandation de produits meilleurs pour la santé\n\nAutour des jeux ou de la musique\n\nstats de jeux videos\nJeux de mots (Wordle)\nconvention de JDR\nRAP analytics\n\n\nIl est tout à fait possible de proposer un sujet plus exotique (⚠️ à ne pas trop faire peur aux élèves).\n\n\nAnciens sujets\nListe des anciens sujets.\n\n\nTemplate\n\n### Titre\n\nTuteur / Tutrice : \n\n#### Présentation\n\ncontexte, objectifs, API utilisée, création d'une API et/ou d'un menu interactif ?\n\n#### Fonctionnalités de base\n\n- F1 : \n- F2 : \n\n#### Fonctionnalités optionnelles\n\n- FO1 : \n- FO2 : \n\n#### Conseils / Outils ..."
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#résumé-du-travail-de-tutrice-tuteur",
    "href": "doc/projet/presentation-tuteurs.html#résumé-du-travail-de-tutrice-tuteur",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Résumé du travail de tutrice / tuteur",
    "text": "Résumé du travail de tutrice / tuteur\n\n4 x 3h de TP de compléments d’informatique\n7 x 3h de suivi de projet\nLire et noter les 4 dossiers d’analyse\nNoter le code\nLire du rapport final, participer à la notation\nParticiper aux 4 soutenances"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#votre-rôle",
    "href": "doc/projet/presentation-tuteurs.html#votre-rôle",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Votre rôle",
    "text": "Votre rôle\n\nGuider les élèves\nSuivi des équipes (avancement, participation, bonne entente)\nMaîtrise d’Ouvrage\nAide au débogage"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#stack-vm",
    "href": "doc/projet/presentation-tuteurs.html#stack-vm",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Stack VM",
    "text": "Stack VM\n\nPython 3.10\nPostgreSQL (chaque élève a une BDD)\nGit Bash\nVisual Studio Code\n\n\nPrincipaux Packages Python\n\n\n\n\n\n\n\nNom du package\nTrès courte description\n\n\n\n\ninquirerPy\nCréer des interfaces en ligne de commande interactives\n\n\nfastapi\nCréer des webservices\n\n\npsycopg2-binary\nCommuniquer avec PostgreSQL\n\n\npytest\nTests unitaires\n\n\npython-dotenv\nVariables d’environnement à partir d’un fichier .env\n\n\nrequests\nRequêtes HTTP\n\n\nuvicorn\nServeur ASGI"
  },
  {
    "objectID": "doc/projet/presentation-tuteurs.html#points-à-préciser",
    "href": "doc/projet/presentation-tuteurs.html#points-à-préciser",
    "title": "Présentation aux tutrices et tuteurs",
    "section": "Points à préciser",
    "text": "Points à préciser\n\nIdée pour suivre le projet\n\npoint hebdo : tout le monde doit envoyer son point hebdo chaque vendredi soir\nKanban (GitHub project)\n\nCI/CD basique (TU, cov, pylint)\ninclure l’utilisation de logs"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#objectifs",
    "href": "doc/projet/presentation-eleves-slides.html#objectifs",
    "title": "Présentation du projet info 2A",
    "section": "Objectifs",
    "text": "Objectifs\n\nDévelopper une application en python\nDécouvrir l’architecture logicielle\nCommuniquer avec une base de données PostreSQL\nUtiliser des webservices\nConcevoir et Modéliser"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#planning",
    "href": "doc/projet/presentation-eleves-slides.html#planning",
    "title": "Présentation du projet info 2A",
    "section": "Planning",
    "text": "Planning\n\nPlanningDatesLivrables\n\n\n\n\n\n\n\n\ngantt\n    title Planning provisoire 2024\n    dateFormat  YYYY-MM-DD\n    axisFormat  %d %b\n    tickInterval 1week\n    \n    section Cours\n    CM                           :milestone, 2024-09-02,\n    CM                           :milestone, 2024-09-09, \n    Examen                       :milestone, 2024-10-07,\n    \n    section TP\n    TP1                          :milestone, 2024-09-06,\n    TP2                          :milestone, 2024-09-13,\n    TP3                          :milestone, 2024-09-20,\n    TP4                          :milestone, 2024-09-27,\n    \n    section Projet\n    Suivi 1                      :milestone, 2024-09-06,\n    Suivi 2                      :milestone, 2024-09-13,\n    Suivi 3                      :milestone, 2024-09-27,\n    Suivi 4                      :milestone, 2024-10-11,\n    3j immersion (Suivi 5 et 6)  :active,    2024-10-21, 3d\n    Suivi 7                      :milestone, 2024-11-15,\n    \n    section Échéances\n    WEI                          :crit,      2024-09-20, 3d\n    Dossier Analyse              :milestone, 2024-10-05,\n    Toussaint                    :crit,      2024-10-26, 2024-11-03\n    Rapport final et Code        :milestone, 2024-11-23,\n    Soutenance                   :milestone, 2024-12-12,\n    \n    %%Stats univariées retraités   :done,         2021-11-28, 3d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\nvendredi 6 septembre\nTP1 et Suivi 1\n\n\nvendredi 13 septembre\nTP2 et Suivi 2\n\n\nvendredi 20 septembre\nTP3\n\n\nvendredi 27 septembre\nTP4 et Suivi 3\n\n\nvendredi 11 octobre\nSuivi 4 (retour sur les dossiers d’analyse)\n\n\nlun-mer 21-23 octobre\n3 jours d’immersion (Suivi 5 et 6)\n\n\nvendredi 15 novembre\nSuivi 7\n\n\njeudi 12 décembre\nSoutenance\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\nTOUS les Jeudis\nPoint hebdo\n\n\nSamedi 5 octobre 12h00\nDossier d’Analyse\n\n\nSamedi 23 novembre 20h00\nRapport final et Code\n\n\n\n\n\n\n\n\n3j d’immersion\n\ncapital pour bien avancer le projet\nsi bien utilisé -&gt; 90 % du travail fait\n\nPrendre de l’avance en septembre"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#phases",
    "href": "doc/projet/presentation-eleves-slides.html#phases",
    "title": "Présentation du projet info 2A",
    "section": "2 phases",
    "text": "2 phases\n\nAnalyse / Conception générale (sept)\n\n4 séances de 3h de suivi\nmi-octobre : retours sur le dossier d’analyse\n\nImplémentation (oct-nov)\n\n3 séances de 3h de suivi\n\n\n\nConseil :\n\nl’élève le plus à l’aise fait un POC vers le 20 septembre\npuis présente l’appli v0 aux autres\n\nRelisez vos rapports !"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#travail-en-groupe",
    "href": "doc/projet/presentation-eleves-slides.html#travail-en-groupe",
    "title": "Présentation du projet info 2A",
    "section": "Travail en groupe",
    "text": "Travail en groupe\n\nÉviter de cumuler les rôles de Chef de projet et Tech Lead\nEsprit d’équipe\nPrévenir dès que possible si ça ne va pas\n\n\n\nAvoir un bon comportement\nCertaines équipes vont mieux fonctionner que d’autres\nSi vous êtes fort -&gt; ne pas tout faire\nPrévenir tuteur puis Prof en cas de souci\n\nPas la peine de dire une fois que le projet est fini :\n\nc’est moi qui ait tout fait\nun autre membre n’a rien fait"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#suivi",
    "href": "doc/projet/presentation-eleves-slides.html#suivi",
    "title": "Présentation du projet info 2A",
    "section": "Suivi",
    "text": "Suivi\n\nPoint hebdo\nÀ remplir chaque semaine\n\nau plus tard le jeudi soir\n\n\n\n\n\n\n\n\nNote\n\n\nPlus de détails dans la notice élèves.\n\n\n\n\n\nComme dans la vie pro\nObligatoire sinon malus\nMontrer Modèle\nras : si vous n’avez rien fait"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#environnement-de-travail",
    "href": "doc/projet/presentation-eleves-slides.html#environnement-de-travail",
    "title": "Présentation du projet info 2A",
    "section": "Environnement de travail",
    "text": "Environnement de travail\n\n\n\n\n\n\nImportant\n\n\nVous avez tous les outils nécessaires pour coder sur la VM.\nSi vous n’êtes pas à très l’aise en info, il vous sera quasi impossible de coder hors VM.\nAucune aide ne vous sera apportée pour installer les outils nécessaires si vous êtes hors VM.\n\n\n\n\nNous attendons du code de qualité\nDocumentation obligatoire pour chaque classe, chaque méthode\n\n\nRespectez les bonnes pratiques de dev Python :\n\nNoms des classes en CamelCase\nFichiers en snake_case\nnoms de variables et de méthodes parlants"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#testez-votre-code",
    "href": "doc/projet/presentation-eleves-slides.html#testez-votre-code",
    "title": "Présentation du projet info 2A",
    "section": "Testez votre code",
    "text": "Testez votre code\n\nTests Unitaires obligatoires\nCodez par petits bouts\n\n\n\nMethodes qui ne fontionnent pas car elles appellent des méthodes qui ne fontionnent pas"
  },
  {
    "objectID": "doc/projet/presentation-eleves-slides.html#template",
    "href": "doc/projet/presentation-eleves-slides.html#template",
    "title": "Présentation du projet info 2A",
    "section": "Template",
    "text": "Template\n\nExemple de projet simple\n\n\n\n\nHome — Présentation du projet info 2A"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html",
    "href": "doc/projet/presentation-eleves.html",
    "title": "Présentation du projet info 2A",
    "section": "",
    "text": "Développer une application en python\nDécouvrir l’architecture logicielle\nCommuniquer avec une base de données PostreSQL\nUtiliser des webservices\nConcevoir et Modéliser"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#objectifs",
    "href": "doc/projet/presentation-eleves.html#objectifs",
    "title": "Présentation du projet info 2A",
    "section": "",
    "text": "Développer une application en python\nDécouvrir l’architecture logicielle\nCommuniquer avec une base de données PostreSQL\nUtiliser des webservices\nConcevoir et Modéliser"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#planning",
    "href": "doc/projet/presentation-eleves.html#planning",
    "title": "Présentation du projet info 2A",
    "section": "Planning",
    "text": "Planning\n\nPlanningDatesLivrables\n\n\n\n\n\n\n\n\ngantt\n    title Planning provisoire 2024\n    dateFormat  YYYY-MM-DD\n    axisFormat  %d %b\n    tickInterval 1week\n    \n    section Cours\n    CM                           :milestone, 2024-09-02,\n    CM                           :milestone, 2024-09-09, \n    Examen                       :milestone, 2024-10-07,\n    \n    section TP\n    TP1                          :milestone, 2024-09-06,\n    TP2                          :milestone, 2024-09-13,\n    TP3                          :milestone, 2024-09-20,\n    TP4                          :milestone, 2024-09-27,\n    \n    section Projet\n    Suivi 1                      :milestone, 2024-09-06,\n    Suivi 2                      :milestone, 2024-09-13,\n    Suivi 3                      :milestone, 2024-09-27,\n    Suivi 4                      :milestone, 2024-10-11,\n    3j immersion (Suivi 5 et 6)  :active,    2024-10-21, 3d\n    Suivi 7                      :milestone, 2024-11-15,\n    \n    section Échéances\n    WEI                          :crit,      2024-09-20, 3d\n    Dossier Analyse              :milestone, 2024-10-05,\n    Toussaint                    :crit,      2024-10-26, 2024-11-03\n    Rapport final et Code        :milestone, 2024-11-23,\n    Soutenance                   :milestone, 2024-12-12,\n    \n    %%Stats univariées retraités   :done,         2021-11-28, 3d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\nvendredi 6 septembre\nTP1 et Suivi 1\n\n\nvendredi 13 septembre\nTP2 et Suivi 2\n\n\nvendredi 20 septembre\nTP3\n\n\nvendredi 27 septembre\nTP4 et Suivi 3\n\n\nvendredi 11 octobre\nSuivi 4 (retour sur les dossiers d’analyse)\n\n\nlun-mer 21-23 octobre\n3 jours d’immersion (Suivi 5 et 6)\n\n\nvendredi 15 novembre\nSuivi 7\n\n\njeudi 12 décembre\nSoutenance\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\nTOUS les Jeudis\nPoint hebdo\n\n\nSamedi 5 octobre 12h00\nDossier d’Analyse\n\n\nSamedi 23 novembre 20h00\nRapport final et Code\n\n\n\n\n\n\n\n\n3j d’immersion\n\ncapital pour bien avancer le projet\nsi bien utilisé -&gt; 90 % du travail fait\n\nPrendre de l’avance en septembre"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#phases",
    "href": "doc/projet/presentation-eleves.html#phases",
    "title": "Présentation du projet info 2A",
    "section": "2 phases",
    "text": "2 phases\n\nAnalyse / Conception générale (sept)\n\n4 séances de 3h de suivi\nmi-octobre : retours sur le dossier d’analyse\n\nImplémentation (oct-nov)\n\n3 séances de 3h de suivi\n\n\n\nConseil :\n\nl’élève le plus à l’aise fait un POC vers le 20 septembre\npuis présente l’appli v0 aux autres\n\nRelisez vos rapports !"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#travail-en-groupe",
    "href": "doc/projet/presentation-eleves.html#travail-en-groupe",
    "title": "Présentation du projet info 2A",
    "section": "Travail en groupe",
    "text": "Travail en groupe\n\nÉviter de cumuler les rôles de Chef de projet et Tech Lead\nEsprit d’équipe\nPrévenir dès que possible si ça ne va pas\n\n\n\nAvoir un bon comportement\nCertaines équipes vont mieux fonctionner que d’autres\nSi vous êtes fort -&gt; ne pas tout faire\nPrévenir tuteur puis Prof en cas de souci\n\nPas la peine de dire une fois que le projet est fini :\n\nc’est moi qui ait tout fait\nun autre membre n’a rien fait"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#suivi",
    "href": "doc/projet/presentation-eleves.html#suivi",
    "title": "Présentation du projet info 2A",
    "section": "Suivi",
    "text": "Suivi\n\nPoint hebdo\nÀ remplir chaque semaine\n\nau plus tard le jeudi soir\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlus de détails dans la notice élèves.\n\n\n\n\nComme dans la vie pro\nObligatoire sinon malus\nMontrer Modèle\nras : si vous n’avez rien fait"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#environnement-de-travail",
    "href": "doc/projet/presentation-eleves.html#environnement-de-travail",
    "title": "Présentation du projet info 2A",
    "section": "Environnement de travail",
    "text": "Environnement de travail\n\n\n\n\n\n\nImportant\n\n\n\nVous avez tous les outils nécessaires pour coder sur la VM.\nSi vous n’êtes pas à très l’aise en info, il vous sera quasi impossible de coder hors VM.\nAucune aide ne vous sera apportée pour installer les outils nécessaires si vous êtes hors VM.\n\n\n\nNous attendons du code de qualité\nDocumentation obligatoire pour chaque classe, chaque méthode\n\n\nRespectez les bonnes pratiques de dev Python :\n\nNoms des classes en CamelCase\nFichiers en snake_case\nnoms de variables et de méthodes parlants"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#testez-votre-code",
    "href": "doc/projet/presentation-eleves.html#testez-votre-code",
    "title": "Présentation du projet info 2A",
    "section": "Testez votre code",
    "text": "Testez votre code\n\nTests Unitaires obligatoires\nCodez par petits bouts\n\n\n\nMethodes qui ne fontionnent pas car elles appellent des méthodes qui ne fontionnent pas"
  },
  {
    "objectID": "doc/projet/presentation-eleves.html#template",
    "href": "doc/projet/presentation-eleves.html#template",
    "title": "Présentation du projet info 2A",
    "section": "Template",
    "text": "Template\n\nExemple de projet simple"
  },
  {
    "objectID": "doc/tp/tp5.html",
    "href": "doc/tp/tp5.html",
    "title": "Git et Création d’une IHM",
    "section": "",
    "text": "Note\n\n\n\nAncien TP4 dont une partie du contenu a été déplacé au TP1."
  },
  {
    "objectID": "doc/tp/tp5.html#bilan-des-trois-premiers-tp",
    "href": "doc/tp/tp5.html#bilan-des-trois-premiers-tp",
    "title": "Git et Création d’une IHM",
    "section": "1 Bilan des trois premiers TP",
    "text": "1 Bilan des trois premiers TP\nSi l’on reprend le modèle en couches présenté en cours, voici ce que l’on a fait depuis le début des TP :\n\n\n1.1 La couche service\nActuellement notre couche service est bien maigre. En effet notre application n’a aucune logique métier. On a bien des objets métiers que l’on persiste mais aucune réelle application derrière. La raison à ce manque provient du fait que cette couche est la partie la plus longue à développer car elle contient la logique métier de l’application.\nEt le but de ces TP n’est pas de vous montrer comment faire une petit application type jeu Pokémon en console. Ils ont pour vocations à vous montrer une architecture de base en couche et vous présenter comment la réaliser. Dans votre projet, il est possible que ce soit la couche service qui vous demande le plus de travail.\n\n\n\n1.2 La couche contrôleur\nLa notion de contrôleur apparait avec le design pattern MVC (Model-View-Controler). Mais c’est un patron de conception beaucoup trop complexe pour faire un simple affichage en console.\nÀ la place vous allez utiliser le patron Model-View-Presenter qui est plus simple car il reprend le principe de couches qui se succèdent.\nIl n’y aura donc pas de couche Controleur mais une couche View qui fera office d’IHM et appelera directement les services nécessaires.\n\n\n\n1.3 La couche view\nLe fonctionnement est le suivant lorsque vous lancez l’application :\n\nvous arrivez sur une vue d’accueil qui propose différents choix\nselon le choix, zéro, un ou plusieurs services sont appelés\npuis vous arrivez vers une nouvelle vue (ou éventuellement resterez sur la même)\n\nExemple :\n\nVous êtes sur la Vue d’accueil et vous sélectionner se connecter\nVous basculez vers la Vue de connexion\n\ndans cette vue, on vous demande de saisir user et password\nune fois la saisie terminée, le Service des utilisateur va être appelé\nce service a une méthode verification_connexion()\n\ncette méthode va appeler la DAO Utilisateur pour vérifier que l’utilisateur et son mot de passe existent bien en base de données\n\n\nsi la vérification est ok, vous basculez vers la Vue Menu utilisateur où va par exemple s’afficher la liste des actions autorisées\n…"
  },
  {
    "objectID": "doc/tp/tp5.html#une-session-pour-les-gouverner-toutes",
    "href": "doc/tp/tp5.html#une-session-pour-les-gouverner-toutes",
    "title": "Git et Création d’une IHM",
    "section": "2 Une session pour les gouverner toutes",
    "text": "2 Une session pour les gouverner toutes\nLà vous pouvez vous dire :\n\nok on va se balader de vues en vues, ça ça va\nmais imaginons l’exemple suivant :\n\non passe par la Vue de connexion et on se connecte avec l’utilisateur Michel\non arrive sur la Vue Menu utilisateur et on se balade dans les différentes vues\nun peu plus tard, on arrive sur la Vue d’ajout de Pokemon, on sélectionne celui qui nous plait et on valide\ncela va aboutir à l’appel d’une méthode DAO du type ajouter_pokemon(utilisateur, pokemon)\nCette méthode a 2 arguments\n\npokemon : ok facile à récupérer, on vient juste avant de le sélectionner\nutilisateur : là c’est moins facile car la dernière fois qu’on avait l’objet utilisateur à portée c’était dans la Vue de connexion\n\n\nEst-ce que une fois connecté, on doit passer l’utilisateur en paramètre de toutes les méthodes que l’on va appeler ?\n\nHeureusement NON, ce serait trop compliqué\n💡 c’est ici que l’objet Session va nous être utile\n\n\nDans notre Session, nous allons pouvoir stocker des objets utiles, par exemple l’utilisateur actif.\nAinsi, une fois connecté, on stocke l’utilisateur en session et on peut se servir de cet objet à tout moment !\nVoici les liens entre notre Session et nos Views :\n\n\n\n\n\nclassDiagram\n\nclass Session{\n    &lt;&lt;singleton&gt;&gt;\n    user_name : str\n    selected_pokemon : AbstractPokemon\n}\n\nclass AbstractView{\n    &lt;&lt;abstract&gt;&gt;\n    +display_info()* None\n    +make_choice()* AbstractView\n}\n\nclass StartView{\n    +display_info() None\n    +make_choice() AbstractView\n}\n\nclass ListPokemonView{\n    +display_info() None\n    +make_choice() AbstractView\n}\n\nclass ListAttackView{\n    +display_info() None\n    +make_choice() AbstractView\n}\n\nSession &lt;..AbstractView: \"use\"\n\nAbstractView &lt;|-- StartView\nAbstractView &lt;|-- ListPokemonView\nAbstractView &lt;|-- ListAttackView\n\n\n\n\n\n\nToute nos Views vont hériter de la classe AbstractView. Cette classe va contenir deux méthodes abstraites :\n\ndisplay_info() : qui va juste déterminer l’affichage en console\nmake_choice() : qui va gérer les choix de l’utilisateur et l’envoyer vers une autre page.\n\nEn plus de cela nous allons gérer tous les attributs utilisés par les View dans un objet Session qui sera un singleton ce qui nous assurera que chaque accès à cet objet retourne la même instance et donc les mêmes valeurs stockées.\nCette architecture vous permet de séparer vos différents menu en fichiers séparés et d’avoir un fonctionnement simple car chaque menu retourne un autre menu simplement.\n⚠️ La création de vos menus peut générer des problèmes de dépendances circulaires. En effet si la page A envoie sur la page B et la page B envoie sur la page A, en fonction de la façon dont vous gérez vos imports vous allez voir un problème de dépendances circulaires. Quand le problème se présentera voici 2 solutions possibles :\n\nremplacer from X import Y en import Y as name\ndéplacer vos imports dans la fonction qui en a besoin"
  },
  {
    "objectID": "doc/tp/tp5.html#inquirerpy",
    "href": "doc/tp/tp5.html#inquirerpy",
    "title": "Git et Création d’une IHM",
    "section": "3 InquirerPy",
    "text": "3 InquirerPy\nPour nous faciliter la gestion de la console nous allons utiliser la bibliothèque python InquirerPy. Elle permet de créer facilement des applications interactives en console. Le projet est bien documenté avec plusieurs exemples de code, faciles à transposer.\n\nLancez le __main__.py et testez un peu l’application\nRegardez les fichiers du package view pour essayer de comprendre comment fonctionnent les vues. Le principe est toujours le même lorsque l’on arrive sur une nouvelle vue :\n\non répond aux questions demandées\nun traitement est éventuellement fait (appel à des services)\non bascule vers une autre vue\n\n\n\n3.1 Mes premières View\n✍Hand on 3\nRépartissez vous le travail entre membre du groupe pour implémenter les Views suivantes :\n\nAffichage Pokémon:\n\nPokemonListView : qui permet de visualiser 30 Pokémons sommairement. Il est possible de sélectionner un pokémon pour aller sur PokemonDetailsView. Vous pouvez permettre un retour arrière sur la StartView si vous le souhaitez.\nPokemonDetailsView : qui affiche les détails du Pokémon sélectionné comme ses statistiques et ses attaques. Renvoie sur la StartView ou PokemonListeView en fonction du choix de l’utilisateur.\n\nAffichage attaque:\n\nAttackListView : qui permet de visualiser 50 attaques sommairement et d’en sélectionner une pour aller sur AttackDetailsView. Vous pouvez permettre un retour arrière sur la StartView.\nAttackDetailsView : qui affiche les détails de l’attaque sélectionnée, comme par exemple ses caractéristiques (name, power, description), mais également quels sont les Pokémons qui peuvent l’apprendre. Renvoie sur la StartView ou AttackListView en fonction du choix de l’utilisateur.\n\nCreatePokemonView : qui permet de créer un Pokémon et le mettre en session. Après validation de l’utilisateur on retourne sur StartView\n\nQuelques astuces :\n\nPokemonService dispose d’une méthode get_pokemon_from_webservice(limit:int, offset:int) pour récupérer des pokémons de la base\nAttackService dispose d’une méthode get_attacks_from_webservice(limit:int, offset:int) pour récupérer des attaques de la base\nde nombreux exemples sont disponibles sur la doc InquirerPy\n\nQuand vous avez terminé une classe, faites un commit, puis poussez sur le dépôt distant.\n\nMerci d’avoir participé et Vive les Pokemons !"
  },
  {
    "objectID": "doc/tp/tp4.html",
    "href": "doc/tp/tp4.html",
    "title": "Data Access Objet (DAO)",
    "section": "",
    "text": "😱 Comme vous pouvez le constater le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer. Il mélange explications complètes et manipulations pour être au maximum autosuffisant. Vous n’allez surement pas terminer le sujet, ce n’est pas grave. Il est là pour vous aider lors du projet informatique.\nCe TP mêle explications pour vous faire comprendre ce qui est fait, et phases de manipulation ou code.\nLes explications de ce TP ne doivent pas prendre le pas sur celles de votre intervenant. Prenez-les comme une base de connaissances pour plus tard, mais préférez toujours les explications orales.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nRevoir des notions de base de données relationnelles\nImplémenter le patron de conception DAO\nVoir si votre programme fonctionne avec des tests unitaires reproductibles"
  },
  {
    "objectID": "doc/tp/tp4.html#avant-de-commencer",
    "href": "doc/tp/tp4.html#avant-de-commencer",
    "title": "Data Access Objet (DAO)",
    "section": "",
    "text": "😱 Comme vous pouvez le constater le sujet de ce TP est lui aussi long. Cela ne doit pas vous effrayer. Il mélange explications complètes et manipulations pour être au maximum autosuffisant. Vous n’allez surement pas terminer le sujet, ce n’est pas grave. Il est là pour vous aider lors du projet informatique.\nCe TP mêle explications pour vous faire comprendre ce qui est fait, et phases de manipulation ou code.\nLes explications de ce TP ne doivent pas prendre le pas sur celles de votre intervenant. Prenez-les comme une base de connaissances pour plus tard, mais préférez toujours les explications orales.\n\n\n\n\n\n\nObjectifs\n\n\n\nDans ce TP vous allez :\n\nRevoir des notions de base de données relationnelles\nImplémenter le patron de conception DAO\nVoir si votre programme fonctionne avec des tests unitaires reproductibles"
  },
  {
    "objectID": "doc/tp/tp4.html#mise-à-jour-de-votre-dépôt-local",
    "href": "doc/tp/tp4.html#mise-à-jour-de-votre-dépôt-local",
    "title": "Data Access Objet (DAO)",
    "section": "1 Mise à jour de votre dépôt local",
    "text": "1 Mise à jour de votre dépôt local\n\n\n\n\n\n\nCaution\n\n\n\nSi vous n’avez pas le dépôt sur votre machine, créez un clone en suivant la section Clone du dépôt du TP2.\n\n\n\nOuvrez Visual Studio Code\nOuvrez votre dépôt local\n\nFile &gt; Open Folder\nAllez dans le dossier P:\\Cours2A\\UE3-Complements-info\\TP2\nCliquez une seule fois sur 📁 ENSAI-2A-complement-info-TP\nPuis sur le bouton Sélectionner un dossier\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nVérifiez que le dossier parent dans l’Explorer VS Code est ENSAI-2A-complement-info-TP\n\nL’Explorer, à gauche, permet d’explorer l’arborsence des fichiers et dossiers\n\n\n⚠️ Si le dossier parent n’est pas le bon, recommencez l’Open Folder où vous aurez de gros soucis par la suite !!!\n\n\n\nOuvrez le Git Bash intégré dans VS Code\n\nTerminal &gt; New Terminal (ou CTRL + ù)\nPassez sur la branche du TP3 et mettez-là à jour\n\nsi vous ne l’avez pas fait à la fin du dernier TP, commencer par un add et un commit\ngit checkout tp4-base\ngit pull\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPour pour vérifier que tout fonctionne :\n\nlancez les tests unitaires du package business_object\n\ndans le terminal : python -m pytest -v src/tests/test_business_object/\n\nlancez le main : python src/__main__.py\n\nS’il vous manque des packages, suivez les instructions du README.\n\n\n\n1.1 Connexion à la BDD\n\nPour pouvoir vous connecter à votre base de données, renseignez les variables du fichier .env présent à la racine du dépôt :\n\nDATABASE=id????\nUSER=id????\nPASSWORD=id????\n\n\nMaintenant que la connexion est opérationnelle, initialisez votre base de données :\n\nLancez le script utils/reset_database.py\n\nCe script crée les tables et insére des données.\n\n\n1.2 Remise en jambes SQL\n\nOuvrez DBeaver\nObservez les tables et leurs liens\n\n\nÉcrivez des requêtes pour :\n\nLister toutes les attaques, ainsi que le nom du type d’attaque\nLister tous les pokemon, ainsi que le nom du type de Pokemon\nLister toutes les attaques de Pikachu\n\nGardez ces requêtes de coté, elles seront utiles plus loin."
  },
  {
    "objectID": "doc/tp/tp4.html#data-access-objet-dao",
    "href": "doc/tp/tp4.html#data-access-objet-dao",
    "title": "Data Access Objet (DAO)",
    "section": "2 Data Access Objet (DAO)",
    "text": "2 Data Access Objet (DAO)\n\n2.1 Modélisation\nReprenons le diagramme de classe du TP2. Limitons nous à la partie “attaque” et réfléchissons où mettre une méthode qui permet de persister les attaques.\n\n\n\n\n\nclassDiagram\n\nclass AbstractAttack{\n    &lt;&lt;abstract&gt;&gt;\n    + DATABASE_TYPE_LABEL : str\n    # _id : int\n    # _power : int\n    # _name : str\n    # _description : str\n    +compute_damage(APkm, APkm)$  int\n    }\n    class FixedDamageAttack{\n        + compute_damage(APkm,APkm )  int\n    }\n    class AbstractFormulaAttack{\n    &lt;&lt;abstract&gt;&gt;\n        -get_attack_stat(APkm)$  float\n        -get_defense_stat(APkm)$  float\n        +compute_damage(APkm,APkm)  int\n    }\n    \n    class PhysicalAttack{\n        -get_attack_stat(APkm)  float\n        -get_defense_stat(APkm)  float\n    }\n    \n    class SpecialAttack{\n        -get_attack_stat(APkm)  float\n        -get_defense_stat(APkm)  float\n    }\n    \n    FixedDamageAttack--|&gt;AbstractAttack\n    AbstractFormulaAttack--|&gt;AbstractAttack\n    SpecialAttack--|&gt;AbstractFormulaAttack\n    PhysicalAttack--|&gt;AbstractFormulaAttack\n\n\n\n\n\n\n\n\nVu que les attributs de nos attaques sont similaires, nous n’allons pas coder cela dans les classes spécifiques des attaques. Nous pourrions mettre les méthodes dans AbstractAttack. Ça fonctionnerait bien d’ailleurs. Nous aurions une classe unique avec nos méthodes pour interagir avec la base. Mais nous n’allons pas faire ça !\nEt là vous vous demandez :\n\n😱 Mais pourquoi ???\n\nEt la réponse est :\n\n😛 Car ça n’a aucun sens !\n\nRevenons sur la phrase : faible couplage, forte cohésion. Si nous mettons toutes les méthodes de persistance de nos attaques dans la classe AbstractAttack, nous allons avoir une classe qui :\n\n✔️ Détermine le comportement des attaques. C’est exactement ce que l’on souhaite (forte cohésion).\n❌ Détermine comment on persiste une attaques.\n\n\n\n\n\n\n\nImportant\n\n\n\nMais ça, ce n’est pas de la responsabilité d’une attaque, mais du système de persistance choisi, ou du moins de l’intermédiaire entre nos objets et le système de persistance !\n\n\nJe n’ai personnellement pas envie d’aller modifier ma classe AbstractAttack uniquement car j’ai décidé de changer de système de gestion de la persistance. Je risque de modifier quelque chose que je ne devrais pas et créer des régressions (faire apparaitre des erreurs sur un code qui n’en avait pas avant) dans mon code. Or j’aimerais bien limiter les sources d’erreurs.\nÀ la place, nous allons créer une classe qui va s’occuper uniquement de cette tâche : une classe DAO pour Data Access Object. C’est une classe technique qui va faire l’interface entre nos données stockées et notre application. Voilà ce que cela donne en terme de diagramme de classe.\n\n\n\n\n\nclassDiagram\n\nclass AbstractAttack{\n    &lt;&lt;abstract&gt;&gt;\n    + DATABASE_TYPE_LABEL : str\n    # _id : int\n    # _power : int\n    # _name : str\n    # _description : str\n    +compute_damage(APkm, APkm)$  int\n    }\n    class FixedDamageAttack{\n        + compute_damage(APkm,APkm )  int\n    }\n    class AbstractFormulaAttack{\n    &lt;&lt;abstract&gt;&gt;\n        -get_attack_stat(APkm)$  float\n        -get_defense_stat(APkm)$  float\n        +compute_damage(APkm,APkm)  int\n    }\n    \n    class PhysicalAttack{\n        -get_attack_stat(APkm)  float\n        -get_defense_stat(APkm)  float\n    }\n    \n    class SpecialAttack{\n        -get_attack_stat(APkm)  float\n        -get_defense_stat(APkm)  float\n    }\n    \n    FixedDamageAttack--|&gt;AbstractAttack\n    AbstractFormulaAttack--|&gt;AbstractAttack\n    SpecialAttack--|&gt;AbstractFormulaAttack\n    PhysicalAttack--|&gt;AbstractFormulaAttack\n\n\nclass AttackDao{\n&lt;&lt;Singleton&gt;&gt;\n +create(AbstractAttack) AbstractAttack\n +find_by_id(int) AbstractAttack\n +find_all() List[AbstractAttack]\n +update(AbstractAttack) AbstractAttack\n +delete(AbstractAttack) bool\n}\n\nclass DBConnection{\n&lt;&lt;Singleton&gt;&gt;\n-__connection : Connection\n\n+connection() Connection\n}\n\nAbstractAttack&lt;.. AttackDao: create\nAttackDao..&gt; DBConnection: use\n\n\n\n\n\n\n\n\n\n2.2 Gestion des connexions et patern singleton\nPour vous connecter à la base de données nous allons utiliser la bibliothèque python psycopg2. C’est elle qui va établir la connexion avec la base, envoyer nos requêtes et nous retourner les résultats.\nMais il faut faire un peu attention à la gestion des connexions. Car nous pourrions nous retrouver à ouvrir des centaines de connexions rapidement et dégrader les performances de notre application. C’est le travail de la classe DBConnection. Comme c’est un singleton, il y aura une seule instance de cette classe dans toute notre application, et comme c’est elle qui se connecte à la base, nous nous assurons de l’unicité de la connexion.\n\n\n\n\n\n\nTip\n\n\n\nCette classe est une solution purement technique, alors n’hésitez pas à la réutiliser pour votre projet. Elle introduit un concept avancé de POO, à savoir les méta classes.\nUne méta classe permet de modifier le comportement d’une classe à un niveau poussé (par exemple modifier comment les objets sont construits par python). À moins que vous ayez une appétence tout particulière pour l’informatique, ne passez pas de temps sur ce sujet.\n\n\n\n\n2.3 DAO et CRUD\nSi vous faites attention, les méthodes de notre DAO ressemblent à celles du CRUD. C’est normal car c’est dans ces méthodes que le code SQL va être stocké.\nLes méthodes de base sont généralement :\n\nfind_all() : qui va retourner toute la table.\nfind_by_id() : qui retourne un enregistrement à partir de son id\ncreate() : qui crée un nouvel enregistrement\ndelete() : qui supprime un enregistrement\nupdate() : qui met à jour un enregistrement\n\nCes 5 méthodes suffisent pour communiquer avec votre base de données. Vous pouvez effectuer le reste des traitements dans vos classes Service. Néanmoins pour gagner du temps rien n’empêche de créer des méthodes plus complexes (ex : find_by_type_and_level_order_by_name_desc())\nVoici la fonctionnement général d’une des méthodes de la DAO :\n# Etape 1 : On récupère une connexion en utilisant la classe DBConnection.\nwith DBConnection().connection as connection :\n\n# Etape 2 : à partir de la connexion on fait un curseur pour la requête \n    with connection.cursor() as cursor : \n    \n    # Etape 3 : on exécute notre requête SQL.\n            cursor.execute(requete_sql)\n    \n    # Etape 4 : on stocke le résultat de la requête\n            res = cursor.fetchall()\n\nif res:\n    # Etape 5 : on agence les résultats selon la forme souhaitée (liste...)\n    \nreturn something\nL’objet cursor contient un pointeur vers les résultats de votre requête. Ce résultat n’est pas encore rapatrié sur votre machine, mais est stocké par la base de données. Vous avez 3 méthodes pour récupérer le résultat :\n\ncursor.fetchone() : retourne uniquement un enregistrement sous forme de dictionnaire\n\nSi vous appelez de nouveau fetchone() sur le même curseur vous obtiendrez la ligne suivante\n\ncursor.fetchall() : retourne l’intégralité des résultats sous forme d’une liste de dictionnaires\n\nLes dictionnaires sont les lignes de la table récupérée.\nLes clés du dictionnaire sont les colonnes récupérées.\nCette méthode fonctionne très bien pour avoir tous les résultats en une fois et qu’il y en a peu. Quand on a des millions d’enregistrements cela va poser problème car :\n\nLe transfert de données sur internet va prendre du temps et bloquer notre application\nNotre application va devoir gérer une grande quantité de données, et elle en est peut-être incapable\n\n\ncursor.fetchmany(size): retourne autant d’enregistrements que demandé sous forme d’une liste de dictionnaires. Cela permet de contrôler le volume de données que l’on traite. Si vous appelez de nouveau fetchmany(size) sur votre curseur, vous allez récupérer les lignes suivantes (système de pagination)\n\nPour plus d’information : article de pynative"
  },
  {
    "objectID": "doc/tp/tp4.html#premières-dao",
    "href": "doc/tp/tp4.html#premières-dao",
    "title": "Data Access Objet (DAO)",
    "section": "3 Premières DAO",
    "text": "3 Premières DAO\n\n3.1 DAO avec des types d’attaques\n\nObservez le fonctionnement de la classe AttaqueTypeDAO\n\ncela va vous être utile pour la suite\n\n\nDans la classe AttaqueDao, créez les méthodes suivantes :\n\nupdate_attack(attack : AbstractAttack) -&gt; bool : met à jour les données de l’attaque passée en paramètre et retourne si la modification s’est bien passée\nfind_attack_by_id(id:int) -&gt; Optional[AbsractAttack] : retourne l’attaque avec l’id en paramètre ou retourne None si l’attaque n’est pas trouvée.\nfind_all_attacks() -&gt; List[AbsractAttack] : retourne la liste de toutes les attaques\nBonus : ajoutez à cette dernière méthode les paramètres limit et offset\n\n\n\n\n\n\n\nQuelques conseils\n\n\n\n\nVous pouvez utiliser l’attribut type de chaque attaque pour avoir son label en base\nUtilisez la classe AttackFactory pour instancier facilement des attaques\nPensez à faire des tests pour voir si votre code fonctionne\nDans les 2 méthodes find, pour créer nos objets métier Attack\n\nnous avons besoin de connaitre le nom du type d’attaque\nor il n’y a pas cette colonne dans la table attaque\nmais peut-être avez-vous déjà une requête qui fait le job ?\n\n\n\n\n\n\n3.2 Pokémon DAO\nCréez la classe PokémonDAO avec les méthodes suivantes :\n\nfind_all_pokemon()-&gt;List[AbstractPokemon] : retourne tous les pokémons dans la base\nfind_pokemon_by_name(name:str)-&gt;AbstractPokemon : retourne un pokémon avec le nom donné\nComplétez la méthode ci-dessus en incorporant la liste des attaques du Pokemon :\n\nFaites une requête en joignant les tables attack et pokemon_attack en filtrant avec l’id du pokémon\nGénérez les attaques à partir de là"
  },
  {
    "objectID": "doc/tp/tp4.html#dao-et-webservice",
    "href": "doc/tp/tp4.html#dao-et-webservice",
    "title": "Data Access Objet (DAO)",
    "section": "4 DAO et webservice",
    "text": "4 DAO et webservice\nVous allez maintenant rendre accessible les données de votre base à d’autres utilisateurs en réalisant un webservice REST.\nAjoutez dans le fichier app.py les endpoints suivants :\n# Défintion du endpoint get /attack?limit=100\n@app.get(\"/attack/\")\nasync def get_all_attacks(limit:int):\n    # Vous devez récupérer les attaques en base en utilisant votre DAO\n    return attacks\n\n# Défintion du endpoint get /pokemon?limit=100\n@app.get(\"/pokemon/\")\nasync def get_all_pokemons(limit:int):\n    # Vous devez récupérer les pokemons en base en utilisant votre DAO\n    return pokemons\n\n# Défintion du endpoint get /pokemon`/{name}\n@app.get(\"/pokemon/{name}\")\nasync def get_pokemon_by_name(name:str):\n    # Vous devez récupérer le pokemon en base en utilisant votre DAO\n    return pokemon\n\nGET localhost:80/attack?limit=100 renverra une liste de 100 attaques par défaut. Il est possible de moduler cette valeur via le paramètre de requête limit\nGET localhost:80/pokemon?limit=100. Il renverra une liste de 100 Pokemon par défaut, mais peut être modulé avec le paramètre de requête limit.\nGET localhost:80/pokemon/{nom}. Il renverra un json représentant un Pokemon.\n\nPour retourner des objets, vous allez devoir définir des classes héritant de BaseModel. Vous trouverez toutes les infos dans la documentation de FastAPI."
  },
  {
    "objectID": "doc/tp/tp4.html#conclusion",
    "href": "doc/tp/tp4.html#conclusion",
    "title": "Data Access Objet (DAO)",
    "section": "Conclusion",
    "text": "Conclusion\nDans ce TP vous avez implémenté votre première DAO.\nC’est une classe technique qui sert à communiquer avec votre système de persistance de données. L’avantage premier de faire une classe à part est de découpler au maximum la gestion du système de persistance et le code métier de votre application.\nSi vous décidez d’arrêter d’utiliser une base de données relationnelle et préférez désormais une base de données NoSQL vous allez devoir changer uniquement les classes DAO tout en exposant toujours les mêmes méthodes."
  },
  {
    "objectID": "doc/cours/poo-avancee-slides.html#plan",
    "href": "doc/cours/poo-avancee-slides.html#plan",
    "title": "Programation orientée Objet - Avancée",
    "section": "Plan",
    "text": "Plan\n\nNotions avancées de POO\n\nRappels\nClasses abstraites\nBridge pattern\n\nGénie logiciel\n\nDéfinition\nSingle responsibility principle\nDesign patterns"
  },
  {
    "objectID": "doc/cours/poo-avancee-slides.html#quelques-rappels",
    "href": "doc/cours/poo-avancee-slides.html#quelques-rappels",
    "title": "Programation orientée Objet - Avancée",
    "section": "Quelques rappels",
    "text": "Quelques rappels\nLes trois principes de l’objet :\n\nEncapsulation : un objet va contenir des attributs et des méthodes.\nHéritage : un objet peut hériter des attributs et méthodes d’une autre classe pour les redéfinir. Il peut également ajouter d’autres attributs/méthodes.\nPolymorphisme : une méthode peut être associée à un code différent en fonction des paramètres passés ou de l’objet auquel elle appartient.\n\n\nCe sont les trois principes qu’apporte la programmation orientée objet. Ils sont présentés par ordre de “simplicité”. La qualité de votre code va dépendre de votre maîtrise et application de ces principes. Cela prend du temps pour bien les comprendre.\n\nAttribut : ce qu’il est\nMéthode : ce qu’il peut faire\nHéritage : Nouvelles capacités (ex : Médecin -&gt; Chirurgien)\nPolymorphisme : 2 types (liste d’Animal.parler(malade=True))"
  },
  {
    "objectID": "doc/cours/poo-avancee-slides.html#le-génie-logiciel",
    "href": "doc/cours/poo-avancee-slides.html#le-génie-logiciel",
    "title": "Programation orientée Objet - Avancée",
    "section": "Le génie logiciel",
    "text": "Le génie logiciel\nVideo\n\nOn va aller un cran au-dessus."
  },
  {
    "objectID": "doc/cours/poo-avancee.html",
    "href": "doc/cours/poo-avancee.html",
    "title": "Programation orientée Objet - Avancée",
    "section": "",
    "text": "Notions avancées de POO\n\nRappels\nClasses abstraites\nBridge pattern\n\nGénie logiciel\n\nDéfinition\nSingle responsibility principle\nDesign patterns"
  },
  {
    "objectID": "doc/cours/poo-avancee.html#plan",
    "href": "doc/cours/poo-avancee.html#plan",
    "title": "Programation orientée Objet - Avancée",
    "section": "",
    "text": "Notions avancées de POO\n\nRappels\nClasses abstraites\nBridge pattern\n\nGénie logiciel\n\nDéfinition\nSingle responsibility principle\nDesign patterns"
  },
  {
    "objectID": "doc/cours/poo-avancee.html#quelques-rappels",
    "href": "doc/cours/poo-avancee.html#quelques-rappels",
    "title": "Programation orientée Objet - Avancée",
    "section": "Quelques rappels",
    "text": "Quelques rappels\nLes trois principes de l’objet :\n\nEncapsulation : un objet va contenir des attributs et des méthodes.\nHéritage : un objet peut hériter des attributs et méthodes d’une autre classe pour les redéfinir. Il peut également ajouter d’autres attributs/méthodes.\nPolymorphisme : une méthode peut être associée à un code différent en fonction des paramètres passés ou de l’objet auquel elle appartient.\n\n\nCe sont les trois principes qu’apporte la programmation orientée objet. Ils sont présentés par ordre de “simplicité”. La qualité de votre code va dépendre de votre maîtrise et application de ces principes. Cela prend du temps pour bien les comprendre.\n\nAttribut : ce qu’il est\nMéthode : ce qu’il peut faire\nHéritage : Nouvelles capacités (ex : Médecin -&gt; Chirurgien)\nPolymorphisme : 2 types (liste d’Animal.parler(malade=True))\n\n\n\nUn exemple pour illustrer tout ça\nApplication de traitements automatiques des données :\n\nPlusieurs sources de données : enquêtes, webscraping, fichiers administratifs, …\nPlusieurs formats de données : csv, xml, json, … (on en reparlera)\nPlusieurs algorithmes de traitement : statistique exploratoire, régression, “machine learning”, …\n\n\nFondamentalement, c’est une application assez simple.\n\n\n\nExemple de diagramme de classe\n\n\nVoyez-vous des choses à corriger ?\nEst-ce que la méthode process() sera la même pour survey et census ?\ndef process(self):\n  if self.type = \"census\":\n    ...\n  elif\n    ...\n\n\n\nUn exemple avec de l’héritage\n\n\nLa classe Source permet de centraliser des attributs communs et de définir des méthodes communes, mais ces méthodes vont être surchargées par les classes filles.\nGrâce au polymorphisme, j’ai un comportement différent mais le code reste clair, avec une partie commune à tous les types de fichiers et une partie spécifique.\nCode dans le dossier exemple POO.\nQue pensez-vous de la classe Source ?\n\n\n\nLes classes abstraites\n\nClasse Abstraite : classe dont l’implémentation n’est pas complète et qui n’est pas instantiable. Permet de passer un contrat. Les classes filles vont devoir implémenter ce qui manque.\n\nAvantages :\n\nNous savons ce que toutes les classes filles doivent faire 👍\nNous pouvons générer du code 🙏\nLimite le risque d’erreur !! 👌\n\n\nCertains objets n’ont pas besoin d’être implémentés complètement ni de pouvoir être instantiés. Souvent, c’est pour des notions abstraites.\nRappels : classe, objet, abstrait (Vehicule)\n\n\n\nPar exemple\n\n\nPour vous, cela peut sembler marginal comme changement (surtout à cause de Python), mais ce changement permet de manipuler l’abstraction au lieu des implémentations et d’avoir un code propre (vous ferez ça en TP).\nv = Vehicule(\"rouge\") -&gt; ça marche plus\nMéthode custom_process abstraite\n\n\n\nEt en Python ?\n\nPas de gestion native des classes abstraites 😱\nModule Abstract Base Classes (abc) pour résoudre le problème 🦾\nDéjà inclus dans votre distribution Python 😌\n\nStep 1 : Importer le module 🧳\nStep 2 : Hériter de ABC 👨‍👩‍👧‍👦\nStep 3 : Définir les méthodes abstraites 📝\nStep 4 : ???\nStep 5 : Profit 💰💰\n\n\n\nStep 4 : implémenter les méthodes abstraites dans les classes filles\nL’autre gros défaut de Python est son typage dynamique.\nPython va typer les objets au runtime, et pas au compile time. Cela ne permet pas d’avoir autant d’outils que dans d’autres langages. Mais vous pouvez utiliser les docstrings pour typer vos objets.\n\n\n\nEt si on ajoutait les formats de données ?\nActuellement, 3 formats de données dans notre application :\n\nCSV : Comma Separated Values (tabulaire)\nXML : eXtended Markup Language (format à balise)\nJSON : JavaScript Object Notation (format clef-valeur)\n\n\nOn reviendra plus en détail sur les différents formats.\nRetour 2 slides avant : si on fait pareil et qu’on utilise l’héritage pour le format\n\n\n\nPar exemple\n\nVoyez-vous un problème ?\n\nCà grossit de manière exponentielle\n\n\n\nLa puissance de la POO\n\nActuellement 4 * 3 classes “concrètes” à définir 😱\nLa lecture du format est dépendante de la source 😵\n\nMAIS\n\nOn peut externaliser ce traitement ! 😌\nRelation d’agrégation 🤯\n\n\nIl faut bien comprendre\n\n\n\nLe bridge pattern\n\n\n\n\n\n\nWork smart, not hard\n\nComposition + héritage : 9 classes 😎\nHéritage : 17 classes 😫\nOn peut facilement ajouter des types et des formats 🥳\n\n\n\n\n\n\n\nPattern Bridge\n\n\n\nDécoupage d’une grosse classe en un groupe de petites classes avec leur propre hiérarchie qu’il faut ensuite assembler.\n\n\n\n\nPour résumer\n\nUtiliser la puissance de la POO 💣\nPréférer les objets spécifiques (héritage) au if/elif/else 🐱‍🏍\nLes classes abstraites sont des plans pour les futures classes 👷‍♀️👷‍♂️\nLa POO permet de créer des codes plus lisibles, évolutifs et maintenables 👑"
  },
  {
    "objectID": "doc/cours/poo-avancee.html#le-génie-logiciel",
    "href": "doc/cours/poo-avancee.html#le-génie-logiciel",
    "title": "Programation orientée Objet - Avancée",
    "section": "Le génie logiciel",
    "text": "Le génie logiciel\nVideo\n\nOn va aller un cran au-dessus.\n\n\nC’est quoi le génie logiciel ?\n\nUn constat : coder bêtement ne permet pas de faire une application de qualité.\nMais empiler des briques bêtement ne permet pas de faire une maison, même si on a un plan.\nBesoin de planifier, de documenter, de tester…\n\n\nEt cette partie sera la seconde du rapport intermédiaire.\n\n\n\nPourquoi c’est important : parallèle avec la construction d’une maison\n\n\n\nPourquoi c’est important : parallèle avec la construction d’une maison\n\nVous avez le plan de construction d’une maison (fourni par l’architecte)\nMais implémenter ce plan demande des connaissances techniques\nBesoin de refaire des schémas pour des zones précises (arches, escaliers, …)\nCe n’est pas du temps perdu !\n\nFaire du code de qualité c’est comme faire de l’artisanat de précision, cela demande outils, expérience et méthodes.\n\nCertains disent même qu’on devrait passer plus de temps à analyser qu’à coder. Sujet à débat, mais cela montre bien que la phase d’analyse (comment je code les fonctions) est super importante !\n\n\n\nQuelques principes de base\n\nDécomposition d’un programme en modules simples cohérents\nLes modules exposent des méthodes utilisables/surchageables par d’autres modules mais restent protégés aux modifications non prévues\nChaque module doit être une boîte noire pour les autres\nSi on garde les mêmes entrées/sorties, on peut changer un module sans risque\nPrivilégier abstractions + héritage plutôt que if/elif/else\n\n\nModule architecture != module Python. Couche, c’est quand on a des modules empilés (beaucoup de vocabulaire à assimiler d’un coup).\nFaire un dessin avec et sans. Expliquer que c’est le boulot d’un objet métier de dire comment il s’affiche et comment on le stocke.\nPareil c’est pas le boulot d’une vue de faire un calcul. Par contre une vue peut demander. Bien insister sur “l’indépendance des couches”. Théoriquement si deux personnes travaillent sur 2 couches et se sont mises d’accord sur comment elles communiquent le travail peut se faire en parallèle.\n\n\n\nUn mantra\n\n\n\n\n\n\nImportant\n\n\n\nFaible couplage, forte cohérence\n\n\n\nFaible couplage inter-classes : modifier une classe doit impacter les autres le moins possible.\nForte cohérence intra-classe : chaque classe doit être un ensemble cohérent d’attributs et de méthodes.\n\n\nGardez ça en tête dès que vous faites du code (R, SAS, etc.). Faites des fonctions les plus unitaires possible pour pouvoir les tester et les remplacer facilement. Divisez votre code en plusieurs fichiers pour le rendre réutilisable plus facilement. Ce n’est pas facile au début, mais il faut y penser.\n\n\n\nFaible couplage, forte cohérence : pourquoi le respecter ?\n\nTravail en groupe 🦸‍♀️🧙‍♂️👨‍💼👩‍🔬\nLisibilité du code 📖\nDébogages 🐞\n\nLimiter les risques d’erreur quand on modifie le code (éviter l’assiette de spaghetti) 🍝\n\n“Spaghetti” : code très chaotique où tout communique avec tout, et où chaque morceau de code fait un peu de tout. Il faut prendre un bout de code et le remonter à la main en “tirant” dessus. Cela devient ingérable quand il y a plus de 1000 lignes de code (et différents langages).\n\n\n\nRetour sur le bridge pattern\n\n\nJe remontre le schéma quelques secondes\n\n\n\nRetour sur le bridge pattern\n\nLa partie “Source” gère les traitements liés à la source.\nLa partie “Fichier” gère la lecture de fichier.\nSeules les entrées/sorties comptent.\nOn peut ajouter une partie “Traitement” pour des traitements supplémentaires.\nPas de if/elif/else inutiles.\n\nChaque partie de notre code s’occupe d’une seule chose\n\nAvantages :\n\nLecture du code facilitée.\nEn cas de bug, facile de trouver le coupable.\nOn peut répartir le travail facilement.\n\n\n\n\nLes design patterns : définition\n\n“En informatique, et plus particulièrement en développement logiciel, un patron de conception (souvent appelé design pattern) est un arrangement caractéristique de modules, reconnu comme bonne pratique en réponse à un problème de conception d’un logiciel. Il décrit une solution standard, utilisable dans la conception de différents logiciels.”\n— Source\n\n\n\nLes design patterns : in a nutshell\n\nBonnes pratiques\nSolutions standards à des problèmes de conception\nSolutions robustes\nIndépendants de la technologie\nIndépendants du métier\n\n\nEst un outil qui est là pour vous aider\n\n\nEn plus ils apportent un vocabulaire commun.\nIl est plus rapide de répondre “tu devrais utiliser un bridge” que “tu devrais faire une seconde hiérarchie de classes et assembler ces hiérarchies”\n\n\n\nLes design patterns : exemple\nProblème récurent :\n\nCréer des objets complexes qui sont une composition de caractéristiques indépendantes\nDit autrement : découpler l’abstraction de son implémentation pour qu’elles puissent varier indépendamment\n\n\n\nLes design patterns : exemple\n\n\nEn ajoutant les méthodes stats\n\n\n\nPour résumer\n\nFaire une application complexe demande un code complexe 🧩\nSans phase de conception on va dans le mur 🧱\nIl existe des solutions prêtes à l’emploi à des problèmes courants 🧰\n\n\n\n\n\n\n\nImportant\n\n\n\nFaible couplage, forte cohérence"
  },
  {
    "objectID": "doc/cours/outils-dev-slides.html#stack-vm",
    "href": "doc/cours/outils-dev-slides.html#stack-vm",
    "title": "Outils de développement",
    "section": "Stack VM",
    "text": "Stack VM\n\nPython 3.10 : la version de Python installée à l’ENSAI\nVisual Studio Code : votre éditeur de code\nGit : pour gérer vos dépôts\nPostgreSQL : une base de données\n\nDBeaver : pour consulter, modifier cette base de données"
  },
  {
    "objectID": "doc/cours/outils-dev-slides.html#visual-studio-code",
    "href": "doc/cours/outils-dev-slides.html#visual-studio-code",
    "title": "Outils de développement",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\n\nÉditeur de code source populaire\nIntégre un explorer et un terminal\nNombreuses extensions\nPersonnalisation avancée"
  },
  {
    "objectID": "doc/cours/outils-dev-slides.html#logs",
    "href": "doc/cours/outils-dev-slides.html#logs",
    "title": "Outils de développement",
    "section": "Logs",
    "text": "Logs"
  },
  {
    "objectID": "doc/cours/outils-dev.html",
    "href": "doc/cours/outils-dev.html",
    "title": "Outils de développement",
    "section": "",
    "text": "Python 3.10 : la version de Python installée à l’ENSAI\nVisual Studio Code : votre éditeur de code\nGit : pour gérer vos dépôts\nPostgreSQL : une base de données\n\nDBeaver : pour consulter, modifier cette base de données"
  },
  {
    "objectID": "doc/cours/outils-dev.html#stack-vm",
    "href": "doc/cours/outils-dev.html#stack-vm",
    "title": "Outils de développement",
    "section": "",
    "text": "Python 3.10 : la version de Python installée à l’ENSAI\nVisual Studio Code : votre éditeur de code\nGit : pour gérer vos dépôts\nPostgreSQL : une base de données\n\nDBeaver : pour consulter, modifier cette base de données"
  },
  {
    "objectID": "doc/cours/outils-dev.html#visual-studio-code",
    "href": "doc/cours/outils-dev.html#visual-studio-code",
    "title": "Outils de développement",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\n\nÉditeur de code source populaire\nIntégre un explorer et un terminal\nNombreuses extensions\nPersonnalisation avancée\n\n\nZoom sur les Settings\n\nfichier .vscode/settings.json\nFormater : Black\nLinter : Flake8\n\n\n\nMontrer le fichier settings.json\nicone ⚙️ niveau workspace ou user\nà priori vous n’avez rien à modifier\nvous pouvez intégrer ce fichier dans votre dépôt projet"
  },
  {
    "objectID": "doc/cours/outils-dev.html#logs",
    "href": "doc/cours/outils-dev.html#logs",
    "title": "Outils de développement",
    "section": "Logs",
    "text": "Logs\n\nQu’est-ce que les logs\nUn log capture des informations sur ce qui s’est passé à un moment donné.\n\nSurveillance\nDébogage\n\n\n\nIls permettent de surveiller l’état d’un système\nIls aident à identifier et résoudre les problèmes\n\n\n\n\nLevel 1 - Débutant\n\nVous avez une erreur dans votre code\nMais vous ne savez pas exactement où ?\nQue faites-vous ?\n\n\nVous mettez des “prints” partout\n\n\n\nLevel 2 - Mode Debug\n\nVous ajoutez un point d’arrêt\nVous lancez en mode debug\nVous avancez jusqu’à l’erreur\n\n\nDemo\n\n\n\nLevel 3 - Logs\n\nImportez le module logging et configurez\n\nimport logging\n\nlogging.basicConfig(\n    filename='logs/example.log',  \n    level=logging.INFO,     \n    format=\"%(asctime)s - %(levelname)-8s - %(message)s\",\n    datefmt=\"%d/%m/%Y %H:%M:%S\")\n\n\nLevel 3 - Logs\n\nPostionnez vos logs\n\nlogger.debug(\"Ceci est un message de débogage\")\nlogger.info(\"Ceci est un message d'information\")\nlogger.warning(\"Ceci est un message d'avertissement\")\nlogger.error(\"Ceci est un message d'erreur\")\n\n\nLes niveaux de logs\n\nDEBUG : utile pour le débogage lors du développement\nINFO : suivi du code exécuté\nWARNING : situation inhabituelle mais non bloquante\nERROR : affecte la logique du programme mais ne l’arrête pas complètement\nCRITICAL : nécessite une intervention urgente\n\n\n\nFichier de config\n\nPossible d’externaliser la config dans un fichier logging_config.yml\n\n\nDémo log_decorator"
  },
  {
    "objectID": "doc/cours/intro-slides.html#cours-de-compléments-dinfo",
    "href": "doc/cours/intro-slides.html#cours-de-compléments-dinfo",
    "title": "Introduction",
    "section": "Cours de Compléments d’info",
    "text": "Cours de Compléments d’info\n\n6h CM\n12h TP\nludovic.deneuville@ensai.fr\nbureau 161\nsur la base des cours de Rémi Pépin\n\n\nPrésentation :\n\nINSEE, informatique, Orléans GEOLOC, Lille enquêtes, Nautile\nRémi Pépin, assistant d’enseignement entre 2018 et 2023\n\nCours de Cloud Computing"
  },
  {
    "objectID": "doc/cours/intro.html",
    "href": "doc/cours/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "6h CM\n12h TP\nludovic.deneuville@ensai.fr\nbureau 161\nsur la base des cours de Rémi Pépin\n\n\nPrésentation :\n\nINSEE, informatique, Orléans GEOLOC, Lille enquêtes, Nautile\nRémi Pépin, assistant d’enseignement entre 2018 et 2023\n\nCours de Cloud Computing\n\n\n\n\n\n\n\n\n\n\n\nBut du cours\n\n\n\nVous apporter les connaissances nécessaires pour mener à bien un projet informatique.\n\n\n\nConduire un projet\nDépasser les 50 lignes de code\nVivre la vie de développeur\nTravailler en équipe\n\n\n\norganiser votre code\n\n\n\n\n\n\nVersionnage avec git\nAnalyse fonctionnelle, génie logiciel\nProgrammation orientée objet avancée\nCommunication avec une base de données en python\nSécurité informatique\nCommunication client-serveur\n\n\n\n\n\nSettings VScode\nFormateur, Linter\nOpen Folder\n\n\n\nTP : truc à récup pour le projet\nRévisez les Pokemon\nSujets très longs\n\n\n\n\n\n\n🚧 date\n2h\nsur papier\n1 feuille A4 recto / verso manuscrite\n\n\n\nBut : voir si vous avez retenu le principal\npas de piège\nsur papier car TP trop compliqué à organiser, chatGPT\nMANUSCRITE : pas de photocopie\n\n\n\n\n\nPrésentation du projet"
  },
  {
    "objectID": "doc/cours/intro.html#cours-de-compléments-dinfo",
    "href": "doc/cours/intro.html#cours-de-compléments-dinfo",
    "title": "Introduction",
    "section": "",
    "text": "6h CM\n12h TP\nludovic.deneuville@ensai.fr\nbureau 161\nsur la base des cours de Rémi Pépin\n\n\nPrésentation :\n\nINSEE, informatique, Orléans GEOLOC, Lille enquêtes, Nautile\nRémi Pépin, assistant d’enseignement entre 2018 et 2023\n\nCours de Cloud Computing\n\n\n\n\n\n\n\n\n\n\n\nBut du cours\n\n\n\nVous apporter les connaissances nécessaires pour mener à bien un projet informatique.\n\n\n\nConduire un projet\nDépasser les 50 lignes de code\nVivre la vie de développeur\nTravailler en équipe\n\n\n\norganiser votre code\n\n\n\n\n\n\nVersionnage avec git\nAnalyse fonctionnelle, génie logiciel\nProgrammation orientée objet avancée\nCommunication avec une base de données en python\nSécurité informatique\nCommunication client-serveur\n\n\n\n\n\nSettings VScode\nFormateur, Linter\nOpen Folder\n\n\n\nTP : truc à récup pour le projet\nRévisez les Pokemon\nSujets très longs\n\n\n\n\n\n\n🚧 date\n2h\nsur papier\n1 feuille A4 recto / verso manuscrite\n\n\n\nBut : voir si vous avez retenu le principal\npas de piège\nsur papier car TP trop compliqué à organiser, chatGPT\nMANUSCRITE : pas de photocopie\n\n\n\n\n\nPrésentation du projet"
  },
  {
    "objectID": "doc/cours/analyse-fonctionnelle-slides.html#plan",
    "href": "doc/cours/analyse-fonctionnelle-slides.html#plan",
    "title": "Analyse fonctionnelle",
    "section": "Plan",
    "text": "Plan\n\nL’analyse fonctionnelle\n\nDéfinition\nDiagrammes UML\n\nL’architecture logicielle\n\nDéfinition\nSéparation des responsabilités"
  },
  {
    "objectID": "doc/cours/analyse-fonctionnelle-slides.html#analyse-fonctionnelle",
    "href": "doc/cours/analyse-fonctionnelle-slides.html#analyse-fonctionnelle",
    "title": "Analyse fonctionnelle",
    "section": "Analyse fonctionnelle",
    "text": "Analyse fonctionnelle\n\n\n\nLes questions qu’il faut se poser avant de commencer :\n\nQu’est ce qu’on fait ? Qui le fait\nBesoins du client\nFonctionnalités requises / optionnelles / bonus\nBien gérer les priorités\nRépartition des rôles dans l’équipe"
  },
  {
    "objectID": "doc/cours/analyse-fonctionnelle-slides.html#architecture-logicielle",
    "href": "doc/cours/analyse-fonctionnelle-slides.html#architecture-logicielle",
    "title": "Analyse fonctionnelle",
    "section": "Architecture logicielle",
    "text": "Architecture logicielle"
  },
  {
    "objectID": "doc/cours/analyse-fonctionnelle.html",
    "href": "doc/cours/analyse-fonctionnelle.html",
    "title": "Analyse fonctionnelle",
    "section": "",
    "text": "L’analyse fonctionnelle\n\nDéfinition\nDiagrammes UML\n\nL’architecture logicielle\n\nDéfinition\nSéparation des responsabilités"
  },
  {
    "objectID": "doc/cours/analyse-fonctionnelle.html#plan",
    "href": "doc/cours/analyse-fonctionnelle.html#plan",
    "title": "Analyse fonctionnelle",
    "section": "",
    "text": "L’analyse fonctionnelle\n\nDéfinition\nDiagrammes UML\n\nL’architecture logicielle\n\nDéfinition\nSéparation des responsabilités"
  },
  {
    "objectID": "doc/cours/analyse-fonctionnelle.html#analyse-fonctionnelle",
    "href": "doc/cours/analyse-fonctionnelle.html#analyse-fonctionnelle",
    "title": "Analyse fonctionnelle",
    "section": "Analyse fonctionnelle",
    "text": "Analyse fonctionnelle\n\n\n\nLes questions qu’il faut se poser avant de commencer :\n\nQu’est ce qu’on fait ? Qui le fait\nBesoins du client\nFonctionnalités requises / optionnelles / bonus\nBien gérer les priorités\nRépartition des rôles dans l’équipe"
  },
  {
    "objectID": "doc/cours/analyse-fonctionnelle.html#architecture-logicielle",
    "href": "doc/cours/analyse-fonctionnelle.html#architecture-logicielle",
    "title": "Analyse fonctionnelle",
    "section": "Architecture logicielle",
    "text": "Architecture logicielle\n\n\nC’est quoi l’architecture logicielle ?\n\nLe pendant technique de l’analyse fonctionnelle\nMaintenant que l’on a le qui et quoi, on détermine le comment\nOn dessine le code de notre application\nVision macro de notre application (agencement des grandes pièces)\n\n\nPour le moment on ne fait pas encore de code.\nOn va seulement faire une ébauche de notre application avec les composants qui la compose (aussi bien logique que physique).\nPar exemple dans votre cas vous allez sûrement avoir :\n\nUn code python qui tourne sur votre ordinateur\nUn webservice externe qui vous fournis des données\nUne base de données postgres.\n\nC’est déjà 3 composants, mais rapidement on en beaucoup et il faut savoir comment les agencer\n\n\n\nPourquoi c’est important : parallèle avec l’architecture\n\n\n\nPourquoi c’est important : parallèle avec l’architecture\n\nPièces, l’installation électrique, l’eau, le gaz, contraintes législatives, s’adapter au terrain…\nBesoin de réfléchir comment il faut agencer tout ça dès le début\nSi on construit au fil de l’eau, on risque d’avoir une maison incohérente (au mieux)\nCe n’est pas du temps perdu !\n\n\nCertaines personnes disent même qu’on devrait passer plus de temps à analyser qu’à coder. Sujet à débat, mais cela montre bien que la phase d’analyse (comment je code les fonctions) est super importante !\nChatGPT peut presque coder à notre place.\n\n\n\nUn grand principe : separation of concerns\n\n\nVersion macro en 3 couches.\n\nPrésentation : tout ce qui se charge de l’affichage\nBusiness : c’est le métier de votre application, sa plus-value\nData : stockage des données\n\nChaque couche communique avec celles adjacentes.\nUne couche a juste à savoir comment elle doit demander une information et ce qu’on lui retourne.\nPas évident mais très important !!!\n\n\n\nLes principales couches d’une application\n\nPrésentation : tout ce qui se charge de l’affichage (page web, console, fenêtre)\nMétier : c’est le métier de votre application, sa plus-value\nPersistance : gère la persistance des données. Base de données ou système de fichiers\n\n\n\nPour votre projet\n\nPrésentation : terminal\nMétier : votre code Python\nPersistance : base de données\n\n\nExemple page web\n\n\n\nZoom sur la couche métier\n\n\nÀ l’intérieur de la couche Métier, il y a plusieurs sous-couches.\nDans les TP : - Couche présentation : View (on navigue entre des vues) - DAO, business_object, service - Contrôleur (client) : Il reçoit les demandes de l’utilisateur via l’interface utilisateur (par exemple, une requête HTTP dans le cas d’une application Web) et appelle les services appropriés pour exécuter les actions demandées.\n\n\n\nLes couches de la couche métier 1/2\n\nDAO (Data access object) :\n\nC’est la partie de votre code qui communique avec la base de données (CM3/TP3)\n\nService :\n\nCode métier\nManipule des objets métiers pour créer de l’information ou de la valeur\nDemande des objets à la couche DAO (TP4)\nAppelle les webservices externes (TP3)\n\n\n\n\nLes couches de la couche métier 2/2\n\nObjets métiers :\n\nCouche transversale\nReprésentent des concepts métiers que votre code va manipuler\nObjets avec surtout des attributs et peu de méthodes\n\nContrôleur :\n\nRécupère les inputs des utilisateurs\nRenvoie les données à afficher\n\n\n\nOn découpe les objets :\nAttributs -&gt; Objets métiers\nMéthodes -&gt; Services\n\n\n\nPourquoi séparer en couches ?\n\nTravail en groupe 🦸‍♀️🧙‍♂️👨‍💼👩‍🔬\nLisibilité du code 📖\nDébogages 🐞\n\n\nLimiter les risques d’erreurs quand on modifie le code (éviter l’assiette de spaghetti) 🍝\n\n\nIl faut savoir qu’un code doit être lisible par les autres.\nEt les autres, ça peut être soi-même dans 2 mois. Blague sur la relecture de code.\nSi on a un code bien séparé, différentes équipes peuvent travailler en parallèle.\nEt séparer en couches permet de trouver rapidement la source du problème.\n\n\n\nInformations à retenir\n\nPasser du temps à réfléchir aux différents modules d’une application n’est pas une perte de temps 🕵️‍♀️\nDiviser en couches permet de travailler en parallèle 🧪🧫📚\nMais il faut encore réfléchir à comment bien coder 🤖\n\n\nPossible en projet de se répartir les couches."
  }
]